@use 'sass:list';
@use 'sass:meta';
@use 'sass:math';
@use 'sass:string';

/// Converts a decimal number into a ratio expressed as a space-separated list.
///
/// @access public
///
/// @param {Number} $number - The decimal number to convert.
/// @param {Number} $accuracy [50000] - The search limit for the denominator.
///
/// @return {List} - The number converted into a ratio.
///
/// @throw Invalid number value.
@function decimal-to-ratio($number, $accuracy: 50000) {
  $closest-numerator: 1;
  $closest-denominator: 1;
  $min-difference: math.abs($number - math.div($closest-numerator, $closest-denominator));

  @for $denominator from 1 through $accuracy + 1 {
    $numerator: math.round($number * $denominator);
    $difference: math.abs($number - math.div($numerator, $denominator));

    @if $difference < $min-difference {
      $min-difference: $difference;
      $closest-numerator: $numerator;
      $closest-denominator: $denominator;

      @if $min-difference == 0 or $difference > $min-difference{
        @return ($closest-numerator $closest-denominator);
      }
    }
  }

  @return ($closest-numerator $closest-denominator);
}

/// Converts a decimal number into a ratio expressed as a space-separated list.
/// @access public
///
/// @param {Number} $number - The decimal number to convert.
/// @param {Number} $accuracy [10000] - The search limit for the denominator.
///
/// @return {List} - The number converted into a ratio.
///
/// @throw Invalid number value.
///
/// @alias decimal-to-ratio
@function num-to-ratio($number, $accuracy: 10000) {
  @return decimal-to-ratio($number, $accuracy);
}
