////
/// This file is an updated fork of _family.scss for Sass versions 1.6+.
/// @author Lucas Bonomi < @lukyvj -- lucasbonomi.com >
/// Taken from the family.scss library
/// @link http://lukyvj.github.io/family.scss/
/// Copyright 2016 - MIT Licence
////

@use 'sass:meta';
@use 'sass:math';
@use 'sass:list';
@use 'sass:string';
@use '../../functions/order-index' as *;

/// Select all children from the first to `$num`.
///
/// @content [Write the style you want to apply to the children, and it will be
/// added within the @content directive]
///
/// @param {Number} $num - All child elements counted from the first to this
/// number will be selected.
///
/// @group Utilities
@mixin first($num: 1) {
  @if $num == 1 {
    &:first-child {
      @content;
    }
  } @else {
    &:nth-child(-n + #{$num}) {
      @content;
    }
  }
}

/// Select all children of type from the first to `$num`.
///
/// @content [Write the style you want to apply to the children, and it will be
/// added within the @content directive]
///
/// @param {Number} $num - All child elements counted from the first to this
/// number will be selected.
///
/// @group Utilities
@mixin first-of-type($num: 1) {
  @if $num == 1 {
    &:first-of-type {
      @content;
    }
  } @else {
    &:nth-of-type(-n + #{$num}) {
      @content;
    }
  }
}

/// Select all children from the last to `$num`.
///
/// @content [Write the style you want to apply to the children, and it will be
/// added within the @content directive]
///
/// @param {Number} $num - All child elements counted from the last to this
/// number will be selected.
///
/// @group Utilities
@mixin last($num: 1) {
  @if $num == 1 {
    &:last-child {
      @content;
    }
  } @else {
    &:nth-last-child(-n + #{$num}) {
      @content;
    }
  }
}

/// Select all children of type from the last to `$num`.
///
/// @content [Write the style you want to apply to the children, and it will be
/// added within the @content directive]
///
/// @param {Number} $num - All child elements counted from the last to this
/// number will be selected.
///
/// @group Utilities
@mixin last-of-type($num: 1) {
  @if $num == 1 {
    &:last-of-type {
      @content;
    }
  } @else {
    &:nth-last-of-type(-n + #{$num}) {
      @content;
    }
  }
}

/// Select all children after the first to `$num`.
///
/// @content [Write the style you want to apply to the children, and it will be
/// added within the @content directive]
///
/// @param {Number} $num - After the first child elements of this quantity, all
/// children are selected.
///
/// @group Utilities
@mixin after-first($num) {
  &:nth-child(n + #{$num + 1}) {
    @content;
  }
}

/// Select all children before `$num` from the last.
///
/// @content [Write the style you want to apply to the children, and it will be
/// added within the @content directive]
///
/// @param {Number} $num - This number back from the last child element will
/// be selected.
///
/// @group Utilities
@mixin from-end($num) {
  &:nth-last-child(#{$num}) {
    @content;
  }
}

/// Select all children between `$first` and `$last`.
///
/// @content [Write the style you want to apply to the children, and it will be
/// added within the @content directive]
///
/// @param {Number} $first - The first child element that will be selected,
/// counted from the start. This child element and all others up to and
/// including $last are selected.
/// @param {Number} $last - The last child element that will be selected,
/// counted from the start. This child element and all before it up to and
/// including $first are selected.
///
/// @group Utilities
@mixin between($first, $last) {
  &:nth-child(n + #{$first}):nth-child(-n + #{$last}) {
    @content;
  }
}

/// Select all evenly numbered children between `$first` and `$last`.
///
/// @content [Write the style you want to apply to the children, and it will be
/// added within the @content directive]
///
/// @param {Number} $first - The first child element of the selection range,
/// counted from the start. Will only be selected if it is evenly numbered.
/// @param {Number} $last - The last child element of the selection range,
/// counted from the start. WIll only be selected if it is evenly numbered.
///
/// @group Utilities
@mixin even-between($first, $last) {
  &:nth-child(even):nth-child(n + #{$first}):nth-child(-n + #{$last}) {
    @content;
  }
}

/// Select all odd children between `$first` and `$last`.
///
/// @content [Write the style you want to apply to the children, and it will be
/// added within the @content directive]
///
/// @param {Number} $first - The first child element of the selection range,
/// counted from the start. Will only be selected if it is an odd number.
/// @param {Number} $last - The last child element of the selection range,
/// counted from the start. WIll only be selected if it is an odd number.
///
/// @group Utilities
@mixin odd-between($first, $last) {
  &:nth-child(odd):nth-child(n + #{$first}):nth-child(-n + #{$last}) {
    @content;
  }
}

/// Select all `$num` children between `$first` and `$last`.
///
/// @content [Write the style you want to apply to the children, and it will be
/// added within the @content directive]
///
/// @param {Number} $num - Select every $num items for the range set by $first
/// and $last parameters.
/// @param {Number} $first - The starting number for the selection range,
/// counted from the start.
/// @param {Number} $last - The ending number for the selection range, counted
/// from the start.
///
/// @group Utilities
@mixin n-between($num, $first, $last) {
  &:nth-child(#{$num}n):nth-child(n + #{$first}):nth-child(-n + #{$last}) {
    @content;
  }
}

/// Select all children but `$num`.
///
/// @content [Write the style you want to apply to the children, and it will be
/// added within the @content directive]
///
/// @param {Number} $num - All child elements are selected except for $num.
///
/// @group Utilities
@mixin all-but($num) {
  &:not(:nth-child(#{$num})) {
    @content;
  }
}

/// Select each child every `$num`.
///
/// @content [Write the style you want to apply to the children, and it will be
/// added within the @content directive]
///
/// @param {Number} $num - Every $num child elements, a child is selected.
///
/// @group Utilities
@mixin each($num) {
  &:nth-child(#{$num}n) {
    @content;
  }
}

/// Select each child every `$num`.
///
/// @content [Write the style you want to apply to the children, and it will be
/// added within the @content directive]
///
/// @param {Number} $num - Every $num child elements, a child is selected.
///
/// @group Utilities
/// @alias each
@mixin every($num) {
  &:nth-child(#{$num}n) {
    @content;
  }
}

/// Select the `$num` child from the start and the `$num` child from the last.
///
/// @content [Write the style you want to apply to the children, and it will be
/// added within the @content directive]
///
/// @param {Number} $num - The child element that is $num from the start, as
/// well as the child element that is $num from the end, will be selected.
///
/// @group Utilities
@mixin from-first-last($num) {
  &:nth-child(#{$num}),
  &:nth-last-child(#{$num}) {
    @content;
  }
}

/// Select the item in the middle of `$num` child. Only works with odd number
/// chain.
///
/// @content [Write the style you want to apply to the children, and it will be
/// added within the @content directive]
///
/// @param {Number} $num - Count $num child elements from the start and the
/// middle element of that selection range will be selected.
///
/// @group Utilities
@mixin middle($num) {
  &:nth-child(#{math.round(math.div($num, 2))}) {
    @content;
  }
}

/// Select all children between the `$num` first and the `$num` last.
///
/// @content [Write the style you want to apply to the children, and it will be
/// added within the @content directive]
///
/// @param {Number} $num - Count $num children from the start and from the end
/// and all other child elements except for those will be selected.
///
/// @group Utilities
@mixin all-but-first-last($num) {
  &:nth-child(n + #{$num}):nth-last-child(n + #{$num}) {
    @content;
  }
}

/// This quantity-query mixin will only select the first of `$limit` items. It
/// will not work if the quantity of child elements is less than `$limit`.
///
/// @content [Write the style you want to apply to the children, and it will be
/// added within the @content directive]
///
/// @param {Number} $limit - If the quantity of child elements is equal to or
/// greater than `$limit`, the first of those elements is selected.
///
/// @group Utilities
@mixin first-of($limit) {
  &:nth-last-child(#{$limit}):first-child {
    @content;
  }
}

/// This quantity-query mixin will only select the last of `$limit` items. It
/// will not work if the quantity of child elements of the same type
/// is less than `$limit`.
///
/// @content [Write the style you want to apply to the children, and it will be
/// added within the @content directive]
///
/// @param {Number} $limit - If the quantity of child elements of the same type
/// is greater than or equal to `$limit`, the last of those elements, determined
/// by `$limit`, is selected.
///
/// @group Utilities
@mixin last-of($limit) {
  &:nth-of-type(#{$limit}):nth-last-of-type(1) {
    @content;
  }
}

/// This quantity-query mixin will select every items if there is at least `$num`
/// items. It will not select anything if there is not as many item as `$num`.
///
/// @content [Write the style you want to apply to the children, and it will be
/// added within the @content directive]
///
/// @param {Number} $num - If the number of child elements is equal to or
/// greater than this number, then all will be selected. If the number of child
/// elements is less than this number, then none are selected.
///
/// @group Utilities
@mixin at-least($num) {
  $selector: &;
  $child: list.nth(list.nth($selector, -1), -1);

  &:nth-last-child(n + #{$num}),
  &:nth-last-child(n + #{$num}) ~ #{$child} {
    @content;
  }
}

/// This quantity-query mixin will select every items if there is at most `$num`
/// items. It will not if there is not as much as item as you set in `$num`.
///
/// @content [Write the style you want to apply to the children, and it will be
/// added within the @content directive]
///
/// @param {Number} $num - If the number of child elements is equal to or
/// less than this number, then all will be selected.
///
/// @group Utilities
@mixin at-most($num) {
  $selector: &;
  $child: list.nth(list.nth($selector, -1), -1);

  &:nth-last-child(-n + #{$num}):first-child,
  &:nth-last-child(-n + #{$num}):first-child ~ #{$child} {
    @content;
  }
}

/// This quantity-query mixin will select every items there is between `$min`
/// and `$max` items. If the quantity of child elements is less than the $min
/// or $greater than the $max, none will be selected. If the quantity is in
/// range, all will be selected.
///
/// @content [Write the style you want to apply to the children, and it will be
/// added within the @content directive]
///
/// @param {Number} $min - The minimum number of children
/// @param {Number} $max - The maximum number of children
///
/// @group Utilities
@mixin in-between($min, $max) {
  $selector: &;
  $child: list.nth(list.nth($selector, -1), -1);

  &:nth-last-child(n + #{$min}):nth-last-child(-n + #{$max}):first-child,
  &:nth-last-child(n + #{$min}):nth-last-child(-n + #{$max}):first-child ~ #{$child} {
    @content;
  }
}

/// Select the first exact child element.
///
/// @content [Write the style you want to apply to the children, and it will be
/// added within the @content directive]
///
/// @group Utilities
@mixin first-child {
  &:first-child {
    @content;
  }
}

/// Select the last exact child element.
///
/// @content [Write the style you want to apply to the children, and it will be
/// added within the @content directive]
///
/// @group Utilities
@mixin last-child {
  &:last-child {
    @content;
  }
}

/// Select all evenly numbered child elements.
///
/// @content [Write the style you want to apply to the children, and it will be
/// added within the @content directive]
///
/// @group Utilities
@mixin even {
  &:nth-child(even) {
    @content;
  }
}

/// Select all odd numbered child elements.
///
/// @content [Write the style you want to apply to the children, and it will be
/// added within the @content directive]
///
/// @group Utilities
@mixin odd {
  &:nth-child(odd) {
    @content;
  }
}

/// Select only the first and last child element.
///
/// @content [Write the style you want to apply to the children, and it will be
/// added within the @content directive]
///
/// @group Utilities
@mixin first-last {
  &:first-child,
  &:last-child {
    @content;
  }
}

/// Will only select the child if it is unique. If it has any sibling elements
/// then none will be selected.
///
/// @content [Write the style you want to apply to the children, and it will be
/// added within the @content directive]
///
/// @group Utilities
@mixin unique {
  &:only-child {
    @content;
  }
}

/// Will only select the child if it is unique. If it has any sibling elements
/// then none will be selected.
///
/// @content [Write the style you want to apply to the children, and it will be
/// added within the @content directive]
///
/// @group Utilities
/// @alias unique
@mixin only {
  &:only-child {
    @content;
  }
}

/// Will only select children if they are not unique. Meaning if there is at
/// least 2 children, the style is applied.
///
/// @content [Write the style you want to apply to the children, and it will be
/// added within the @content directive]
///
/// @group Utilities
@mixin not-unique {
  &:not(:only-child) {
    @content;
  }
}

/// Will only select children if they are not unique. Meaning if there is at
/// least 2 children, the style is applied.
///
/// @content [Write the style you want to apply to the children, and it will be
/// added within the @content directive]
///
/// @group Utilities
/// @alias not-unique
@mixin not-only-child {
  &:not(:only-child) {
    @content;
  }
}

/// This mixin is used to automatically sort z-index in numerical order. But it
/// can also sort them in reverse-numerical order, depending the parameters you
/// select.
///
/// @content [Write the style you want to apply to the children, and it will be
/// added within the @content directive]
///
/// @param {Number} $num - Number of children to index.
/// @param {String} $direction ['forward'] - Direction of the sort. Can be
/// `forward` or `backward`.
/// @param {Number} $index [0] - Base indexing number for the sort.
///
/// @group Utilities
/// @require {function} order-index
///
/// @throw Invalid $direction value
@mixin child-index($num, $direction: 'forward', $index: 0) {
  @if $direction and is-string($direction) {
    $direction: string.to-lower-case($direction);
  }

  @for $i from 1 through $num {
    @if $direction ==
      'forward' or
      $direction ==
      'fwd' or
      $direction ==
      'fw' or
      $direction ==
      'f'
    {
      &:nth-child(#{$i}) {
        z-index: order-index($i, $index);
        @content;
      }
    } @else if
      $direction ==
      'backward' or
      $direction ==
      'back' or
      $direction ==
      'bckwrd' or
      $direction ==
      'bw' or
      $direction ==
      'bck' or
      $direction ==
      'b'
    {
      &:nth-last-child(#{$i}) {
        z-index: order-index($i, $index);
        @content;
      }
    } @else {
      @error 'Invalid direction value of `#{meta.inspect($direction)}` for ' +
          'the `child-index` mixin. You must choose a direction of either ' +
          '`forward` or `backward`.';
    }
  }
}
