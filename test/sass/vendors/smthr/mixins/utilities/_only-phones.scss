@use 'sass:meta';
@use 'sass:math';
@use '../../functions/conv-to-em' as *;
@use '../../functions/strip-unit' as *;

/// Targets phones and phone-sized devices
///
/// @param {Number} $max-phone-width [436px] - The maximum viewport width
/// of the devices being targeted.
/// @param {Bool} $target-all-devices [false] - If true, query will target
/// all devices that fall within the specified maximum viewport width.
/// Otherwise, attempts to target only phone devices by setting a minimum
/// resolution along with the maximum viewport width.
/// @param {Number} $min-resolution-ratio [1.8] - A minimum pixel ratio
/// resolution value used to calculate the media query if $target-all-devices
/// is false.
///
/// @content Styles that target phones and/or phone-sized devices added within
/// the content directive.
///
/// @group Utilities
/// @require {function} conv-to-em
/// @require {function} strip-unit
/// @since 0.8.2 - Was not working in previous versions
@mixin only-phones(
  $max-phone-width: 436px,
  $target-all-devices: false,
  $min-resolution-ratio: 1.8
) {
  @if math.is-unitless($max-phone-width) {
    $max-phone-width: $max-phone-width * 1px;
  }

  @if math.unit($max-phone-width) == 'rem' {
    $max-phone-width: strip-unit($max-phone-width) * 1em;
  }

  @if math.unit($max-phone-width) == 'px' {
    $max-phone-width: conv-to-em($max-phone-width);
  }

  @if $target-all-devices or $min-resolution-ratio == 1 {
    @media screen and (max-width: $max-phone-width) {
      @content;
    }
  } @else {
    @media
      screen and (max-width: $max-phone-width) and
      (-webkit-min-device-pixel-ratio: $min-resolution-ratio),

      screen and (max-width: $max-phone-width) and
      (min-resolution: ($min-resolution-ratio * 96dpi)),

      screen and (max-width: $max-phone-width) and
      (min-resolution: ($min-resolution-ratio * 1dppx))
    {
      @content;
    }
  }
}

/// Targets phones and phone-sized devices
///
/// @param {Number} $max-phone-width [436px] - The maximum viewport width
/// of the devices being targeted.
/// @param {Bool} $target-all-devices [false] - If true, query will target
/// all devices that fall within the specified maximum viewport width.
/// Otherwise, attempts to target only phone devices by setting a minimum
/// resolution along with the maximum viewport width.
/// @param {Number} $min-resolution-ratio [1.8] - A minimum pixel ratio
/// resolution value used to calculate the media query if $target-all-devices
/// is false.
///
/// @content Styles that target phones and/or phone-sized devices added within
/// the content directive.
///
/// @group Utilities
/// @require {mixin} only-phones
/// @alias only-phones
@mixin phones-only (
  $max-phone-width: 436px,
  $target-all-devices: false,
  $min-resolution-ratio: 1.8
) {
  @include only-phones($max-phone-width, $target-all-devices, $min-resolution-ratio) {
    @content;
  }
}

/// Targets phones and phone-sized devices
///
/// @param {Number} $max-phone-width [436px] - The maximum viewport width
/// of the devices being targeted.
/// @param {Bool} $target-all-devices [false] - If true, query will target
/// all devices that fall within the specified maximum viewport width.
/// Otherwise, attempts to target only phone devices by setting a minimum
/// resolution along with the maximum viewport width.
/// @param {Number} $min-resolution-ratio [1.8] - A minimum pixel ratio
/// resolution value used to calculate the media query if $target-all-devices
/// is false.
///
/// @content Styles that target phones and/or phone-sized devices added within
/// the content directive.
///
/// @group Utilities
/// @require {mixin} only-phones
///
/// @alias only-phones
@mixin target-phones(
  $max-phone-width: 436px,
  $target-all-devices: false,
  $min-resolution-ratio: 1.8
) {
  @include only-phones($max-phone-width, $target-all-devices, $min-resolution-ratio) {
    @content;
  }
}
