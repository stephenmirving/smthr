@use 'sass:meta';
@use 'sass:list';
@use 'sass:math';
@use 'sass:string';
@use '../../functions/equals-false' as *;
@use '../../functions/equals-true' as *;
@use '../../functions/is-alias' as *;
@use '../../functions/is-global-value' as *;
@use '../../functions/is-falsey' as *;
@use '../../functions/is-list' as *;
@use '../../functions/is-number' as *;
@use '../../functions/is-string' as *;
@use '../../functions/list-to-string' as *;

/// Generates a speed animation that speeds an element in or out, from or
/// towards a given direction. It is recommended that the `animation-stage()`
/// mixin be used on the parent element.
///
/// @param {String | Bool} $in-or-out ['in'] - Determines if the element will
/// speed 'in' (`in`, `true`, or `i`) or 'out' (`out`, `false`, or `o`).
/// @param {String} $side ['left'] - Will either speed in from this side or
/// speed out towards this side, depending on the value of $in-or-out. The value
/// of $side must be either `left` or `right`, or any valid aliases for these
/// $side values.
/// @param {Number} $duration [null] - The duration of the animation (`s` or `ms`).
/// @param {Number} $delay [null] - The optional delay time for the animation.
/// @param {Number | String} $iterations [null] - The number of iterations
/// for the animation to complete. Can be `infinite`, any unitless number, or
/// any CSS global value.
/// @param {String} $anim-dir [null] - Sets the animation-direction property.
/// Can be `normal`, `reverse`, `alternate`, or `alternate-reverse`. Can also be
/// any CSS global value. Default of `null` assumes the CSS property default of
/// `normal`.
/// @param {Timing-Function} $timing-func [null] - The timing function for
/// the animation. A null value passed here will default to the recommended
/// timing function for this animation of `ease-out` on a speed-in animation,
/// and `ease-in` on a speed-out animation.
/// @param {Number | String} $anim-num [null] - If the mixin is used more than
/// once with different values in a stylesheet, you can pass a number or string
/// to the mixin here that gets appeneded to end of the animation name so that
/// the animations do not overwrite each other.
///
/// @group Animations
/// @require {function} equals-false
/// @require {function} equals-true
/// @require {function} is-alias
/// @require {function} is-falsey
/// @require {function} is-global-value
/// @require {function} is-list
/// @require {function} is-number
/// @require {function} is-string
/// @require {function} list-to-string
///
/// @throw Invalid $in-or-out value error.
/// @throw Invalid $side value error.
/// @throw Invalid $duration value error.
/// @throw Invalid $delay value error.
/// @throw Invalid $iterations value error.
/// @throw Invalid $anim-dir value error.
@mixin speed(
  $in-or-out: 'in',
  $side: 'left',
  $duration: 0.65s,
  $delay: null,
  $iterations: null,
  $anim-dir: null,
  $timing-func: null,
  $anim-num: null,
) {
  $opacity-val-1: 0;
  $opacity-val-2: 1;
  $side-factor: 1;
  $in-out-factor: 1;
  $trans-val-1: null;
  $trans-val-2: null;
  $skew-val-1: null;
  $skew-val-2: null;
  $anim-suffix: '';

  @if $in-or-out and is-string($in-or-out) {
    $in-or-out: string.to-lower-case($in-or-out);
  }

  @if $delay and is-string($delay) {
    $delay: string.to-lower-case($delay);
  }


  @if $anim-dir {
    @if is-list($anim-dir) {
      $anim-dir: list-to-string($anim-dir);
    }

    @if is-string($anim-dir) {
      $anim-dir: string.to-lower-case($anim-dir);
    }
  }

  @if $timing-func and is-string($timing-func) {
    $timing-func: string.to-lower-case($timing-func);
  }

  @if equals-true($in-or-out) or $in-or-out == 'in' or $in-or-out == 'i' {
    $in-or-out: true;
    $anim-suffix: '-in-from-';
  } @else if is-falsey($in-or-out) or $in-or-out == 'out' or $in-or-out == 'o' {
    $in-or-out: false;
    $in-out-factor: -1;
    $anim-suffix: '-out-to-';
  } @else {
    @error 'Invalid $in-or-out value of #{meta.inspect($in-or-out)} for ' +
        'the [ speed() ] mixin. It must be either `in` or `out`, `true` ' +
        'or `false`.';
  }

  @if $side {
    @if is-list($side) {
      $side: list-to-string($side);
    }

    @if is-string($side) {
      $side: string.to-lower-case($side);
    }

    @if is-alias('left', $side) {
      $anim-suffix: string.insert(
        $anim-suffix,
        'left',
        string.length($anim-suffix) + 1
      );
    } @else if is-alias('right', $side) {
      $side-factor: -1;
      $anim-suffix: string.insert(
        $anim-suffix,
        'right',
        string.length($anim-suffix) + 1
      );
    } @else {
      @error 'Invalid $side of #{meta.inspect($side)} chosen for ' +
          'the [ speed() ] mixin. The $side value must be either ' +
          '`left` or `right`.';
    }
  } @else {
    @error 'You must pass a $side for the [ speed() ] mixin. The ' +
        '$side value must be either `left` or `right`.';
  }

  @if not is-number($duration) {
    @error 'Invalid $duration value of #{meta.inspect($duration)} for the ' +
        '[ speed() ] mixin. The duration property must be a number.';
  } @else if math.is-unitless($duration) {
    // If no there is no unit for $duration, unless $duration > 60, assume seconds
    $duration: if($duration > 60, $duration * 1ms, $duration * 1s);
  } @else if not list.index('s' 'ms', math.unit($duration)) {
    @error 'Invalid $duration value of `#{meta.inspect($duration)}` for the ' +
        '[ speed() ] mixin. The duration property must be in either s or ms units.';
  } @else if math.unit($duration) == 'ms' and $duration % 100 == 0ms {
    // If time in ms would be shorter as seconds, convert it
    $duration: math.div($duration, 1000ms) * 1s;
  }

  @if is-falsey($delay) or
      is-alias('none', $delay) or
      $delay == 0s or
      $delay == 0ms
  {
    $delay: null;
  }
  @if $delay {
    @if not is-number($delay) {
      @error 'Invalid delay value of `#{meta.inspect($delay)}` for the ' +
          '[ speed() ] mixin. The delay property must be a number.';
    } @else if math.is-unitless($delay) {
      // If no there is no unit for $delay, unless $delay > 60, assume seconds
      $delay: if($delay > 60, $delay * 1ms, $delay * 1s);
    } @else if not list.index('s' 'ms', math.unit($delay)) {
      @error 'Invalid delay value of `#{meta.inspect($delay)}` for the ' +
          '[ speed() ] mixin. The delay property must be in either s or ms units.';
    } @else if math.unit($delay) == 'ms' and $delay % 100 == 0ms {
      // If time in ms would be shorter as seconds, convert it
      $delay: math.div($delay, 1000ms) * 1s;
    }
  }

  @if $iterations {
    @if is-string($iterations) {
      $iterations: string.to-lower-case($iterations);
    }

    @if is-alias('infinite', $iterations) {
      $iterations: infinite;
    } @else if not (is-number($iterations) and math.is-unitless($iterations)) and
      not is-global-value($iterations)
    {
      @error 'Invalid $iterations value of `#{meta.inspect($iterations)}` ' +
          'for the [ speed() ] mixin.';
    }
  } @else {
    $iterations: null;
  }

  @if is-falsey($anim-dir) or
      is-alias('none', $anim-dir) or
      is-alias('normal', $anim-dir)
  {
    $anim-dir: null;
  } @else if is-alias('reverse', $anim-dir) {
    $anim-dir: reverse;
  } @else if is-alias('alternate', $anim-dir) {
    $anim-dir: alternate;
  } @else if is-alias('alternate-reverse', $anim-dir) {
    $anim-dir: alternate-reverse;
  } @else if not is-global-value($anim-dir) {
    @error 'Invalid animation-direction value of #{meta.inspect($anim-dir)} ' +
        'for the [ speed() ] mixin.';
  }

  @if equals-false($timing-func) or is-alias('normal', $timing-func) {
    $timing-func: if(($in-or-out), ease-out, ease-in);
  }

  // Set keyframes values
  $trans-val-1:
    translate3d(-100% * $side-factor, 0, 0)
    skewX(30deg * $side-factor * $in-out-factor);
  $trans-val-2: translate3d(0, 0, 0);
  $skew-val-1: skewX(-20deg * $side-factor);
  $skew-val-2: skewX(5deg * $side-factor);

   // If speeding out rather than in, reverse the opacity values
  @if not $in-or-out {
    $opacity-val-1: 1;
    $opacity-val-2: 0;
  }

  @if equals-false($anim-num) or $anim-num == '' {
    $anim-num: null;
  } @else {
    $anim-suffix: string.insert(
      $anim-suffix,
      '--#{$anim-num}',
      string.length($anim-suffix) + 1
    );
  }

  transform: translate3d(0, 0, 0);
  animation: speed#{$anim-suffix} #{$duration} #{$timing-func} #{$delay}
    #{$iterations} #{$anim-dir} both;

  @at-root {
    @keyframes speed#{$anim-suffix} {
      0% {
        opacity: $opacity-val-1;

        @if $in-or-out {
          transform: $trans-val-1;
        }
      }

      @if $in-or-out {
        60% {
          opacity: $opacity-val-2;
          transform: $skew-val-1;
        }

        80% {
          transform: $skew-val-2;
        }
      }

      100% {
        @if not $in-or-out {
          opacity: $opacity-val-2;
        }

        transform: if($in-or-out, $trans-val-2, $trans-val-1);
      }
    }
  }
}
