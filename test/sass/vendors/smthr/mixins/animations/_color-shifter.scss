@use 'sass:list';
@use 'sass:math';
@use 'sass:meta';
@use 'sass:string';
@use '../../functions/equals-false' as *;
@use '../../functions/is-alias' as *;
@use '../../functions/is-falsey' as *;
@use '../../functions/is-global-value' as *;
@use '../../functions/is-list' as *;
@use '../../functions/is-number' as *;
@use '../../functions/is-string' as *;
@use '../../functions/is-time' as *;
@use '../../functions/list-to-string' as *;

/// Animates the shift between any quantity of given colors.
///
/// @param {List} $colors [()] - A list of colors that the animation will shift
/// between, one into the next.
/// @param {String | Number} $duration [null] - The amount of time it takes the
/// animation to shift from one color into the next one. This value must be in
/// either milliseconds (`ms`) or seconds (`s`). If a only a unit-less number is
/// passed, it will be assumed that the value is in seconds. When no argument is
/// passed, the default timing is 2s per color shift.
/// @param {String | Number} $delay [null] - The amount of time before the color
/// shifting animation first starts. No delay is the default. This value must be
/// in either milliseconds (`ms`) or seconds (`s`). If only a unit-less number
/// is passed, it will be assumed that the value is in seconds.
/// @param {Number | String} $iterations [infinite] - The number of iterations
/// for the animation to complete. Can be `infinite`, any unitless number, or
/// any CSS global value.
/// @param {String} $anim-dir [alternate] - Sets the animation-direction property.
/// Can be `normal`, `reverse`, `alternate`, or `alternate-reverse`. Can also be
/// any CSS global value.
/// @param {Timing-Function} $timing-func [linear] - The timing function for the
/// animation's shifting effect.
/// @param {Bool | String} $is-fg-shifter [null] - All values except for `null`
/// `false`, `'false'`, `'background'`, and `'bg'` will make the animation
/// shift the foreground (text) color instead of the default background-color.
/// @param {Number | String} $anim-num [null] - If the color-shifter mixin is
/// used more than once in a stylesheet with different values, you can pass a
/// number or string to the mixin here that gets appeneded to end of the
/// animation name so that the animations do not overwrite each other.
///
/// @group Animations
/// @require {function} equals-false
/// @require {function} is-alias
/// @require {function} is-falsey
/// @require {function} is-global-value
/// @require {function} is-list
/// @require {function} is-number
/// @require {function} is-string
/// @require {function} is-time
/// @require {function} list-to-string
///
/// @throw The $colors parameter is not a valid list containing enough colors.
/// @throw No valid argument passed to the $duration parameter error.
/// @throw Invalid $duration data type, must be a number.
/// @throw Invalid $duration unit type, must be a time value in `s` or `ms` units.
/// @throw Invalid $delay data type, must be a number.
/// @throw Invalid $delay unit type, must be a time value in `s` or `ms` units.
@mixin color-shifter(
  $colors: (),
  $duration: null,
  $delay: null,
  $iterations: infinite,
  $anim-dir: alternate,
  $timing-func: linear,
  $is-fg-shifter: null,
  $anim-num: null
) {
  // The list of percentage values to be used in the keyframes
  $interval-values: ();

  // Total number of those values after 0%
  $num-intervals: list.length($colors) - 1;

  // The amount to count up by from 0% to get to 100% in the keyframes
  $interval-multiple: math.div(100, $num-intervals);

  // The unit-less value of the last interval determined for the keyframes
  $last-interval: 0;

  // The unit-less value of the current interval being added to the keyframes
  $current-interval: 0;

  // Append the current interval (0%) to the interval list for the keyframes
  $interval-values: list.append($interval-values, 0);

  // The combination variable for $infinite and $alternate
  $inf-alt: null;

  // Prefix for the animation name, if $is-fg-shifter flag is true, becomes 'fg-'
  $anim-prefix: 'bg-';

  @if not is-list($colors) or list.length($colors) < 2 {
    @error 'You need to pass a list of at least 2 colors in order to use the ' +
        '[ color-shifter() ] mixin.';
  }

  @if $delay and is-string($delay) {
    $delay: string.to-lower-case($delay);
  }

  @if $anim-dir {
    @if is-list($anim-dir) {
      $anim-dir: list-to-string($anim-dir);
    }

    @if is-string($anim-dir) {
      $anim-dir: string.to-lower-case($anim-dir);
    }
  }

  @if $timing-func and is-string($timing-func) {
    $timing-func: string.to-lower-case($timing-func);
  }

  @if $is-fg-shifter and is-string($is-fg-shifter) {
    $is-fg-shifter: string.to-lower-case($is-fg-shifter);
  }

  // If no argument passed to $duration, create the default timing of 2s per color
  @if is-falsey($duration) {
    $duration: list.length($colors) * 2s;

    @warn 'No valid argument passed to the $duration parameter of the ' +
        '[ color-shifter() ] mixin. Assuming a duration of 2s per color.';
  } @else {
    @if not is-number($duration) {
      @error 'Invalid $duration value of `#{$duration}` for the ' +
          '[ color-shifter() ] mixin. The duration property must be a number.';
    }

    @if math.is-unitless($duration) {
      // If no there is no unit for $duration, and $duration < 30, assume seconds
      @if $duration < 30 {
        $duration: $duration * 1s;
      } @else {
        $duration: $duration * 1ms; // ... otherwise assume ms
      }

      @warn 'The number passed to the $duration parameter of the ' +
            '[ color-shifter() ] mixin was unitless. Assuming a #{$duration} ' +
            'duration for each color shift.';
    }

    // The duration parameter is the time it takes to animate from one color to
    // the next, so multiple the duration by the number of colors in the list.
    $duration: $duration * list.length($colors);

    @if not is-duration($duration) {
      @error 'Invalid $duration value of `#{$duration}` for the [ color-shifter() ] ' +
          'mixin. The duration property must be in either s or ms units.';
    } @else if $duration % 10 == 0ms {
      // If time in ms would be shorter as seconds, convert it
      $duration: math.div($duration, 1000ms) * 1s;

      // Get rid of possible leading zero in front of decimal place
      @if string.slice($duration + '', 1, 2) == '0.' {
        $duration: #{string.slice($duration + '', 2)};
      }
    }
  }

  @if is-falsey($delay) or
    $delay ==
    0s or
    $delay ==
    0ms or
    is-alias('none', $delay)
  {
    $delay: null;
  }

  @if $delay {
    @if not is-number($delay) {
      @error 'Invalid delay value of `#{meta.inspect($delay)}` for the ' +
          '[ color-shifter ] mixin. The delay property must be a number.';
    } @else if math.is-unitless($delay) {
      // If no there is no unit for $delay, unless $delay > 60, assume seconds
      $delay: if($delay > 60, $delay * 1ms, $delay * 1s);
    } @else if not list.index('s' 'ms', math.unit($delay)) {
      @error 'Invalid delay value of `#{meta.inspect($delay)}` for the ' +
          '[ color-shifter ] mixin. The delay property must be in ' +
          'either s or ms units.';
    } @else if $delay % 10 == 0ms {
      $delay: math.div($delay, 1000ms) * 1s;

      @if string.slice($delay + '', 1, 2) == '0.' {
        $delay: #{string.slice($delay + '', 2)};
      }
    }
  }

  @if $iterations {
    @if is-string($iterations) {
      $iterations: string.to-lower-case($iterations);
    }

    @if is-alias('infinite', $iterations) {
      $iterations: infinite;
    } @else if not (is-number($iterations) and math.is-unitless($iterations)) and
      not is-global-value($iterations)
    {
      @error 'Invalid $iterations value of `#{meta.inspect($iterations)}` ' +
          'for the [ color-shifter() ] mixin.';
    }
  } @else {
    $iteratons: null;
  }

  @if is-falsey($anim-dir) or
      is-alias('none', $anim-dir) or
      is-alias('normal', $anim-dir)
  {
    $anim-dir: null;
  } @else if is-alias('reverse', $anim-dir) {
    $anim-dir: reverse;
  } @else if is-alias('alternate', $anim-dir) {
    $anim-dir: alternate;
  } @else if is-alias('alternate-reverse', $anim-dir) {
    $anim-dir: alternate-reverse;
  } @else if not is-global-value($anim-dir) {
    @error 'Invalid animation-direction value of #{meta.inspect($anim-dir)} ' +
        'for the [ color-shifter() ] mixin.';
  }

  @if is-falsey($timing-func) or
      is-alias('none', $timing-func) or
      is-alias('normal', $timing-func) or
      $timing-func == 'ease'
  {
    // Take all potential values the user might pass to keep the default setting
    // and ensure that the timing function remains at that default
    $timing-func: null;
  }

  @if is-falsey($is-fg-shifter) or
      is-alias('background-color', $is-fg-shifter) or
      is-alias('background', $is-fg-shifter) or
      is-alias('none', $is-fg-shifter)
  {
    $is-fg-shifter: 'background-color';
  } @else {
    $is-fg-shifter: 'color';
    $anim-prefix: 'fg-'
  }

  @if equals-false($anim-num) or $anim-num == '' {
    $anim-num: null;
  } @else if is-string($anim-num) or is-number($anim-num) {
    $anim-num: '--#{$anim-num}';
  } @else {
    @error 'Invalid data type for the $anim-num parameter passed to the ' +
        '[ color-shifter() ] mixin. You must pass a number or a string.';
  }

  // Generate the full list of intervals for the keyframes
  @for $k from 1 through $num-intervals {
    $current-interval: $last-interval + $interval-multiple;
    $interval-values: list.append($interval-values, $current-interval);
    $last-interval: $current-interval;
  }

  animation: #{$anim-prefix}color-shifter#{$anim-num} #{$duration} #{$timing-func}
    #{$delay} #{$iterations} #{$anim-dir} both;

  @at-root {
    @keyframes #{$anim-prefix}color-shifter#{$anim-num} {
      $index: 1;

      @each $interval in $interval-values {
        $rounded-val: math.div(math.round($interval * 1000), 1000);

        #{$rounded-val + '%'} {
          #{$is-fg-shifter}: list.nth($colors, $index);
        }

        $index: $index + 1;
      }
    }
  }
}
