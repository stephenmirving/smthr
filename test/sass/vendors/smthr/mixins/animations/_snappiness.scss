@use 'sass:meta';
@use 'sass:list';
@use 'sass:math';
@use 'sass:string';
@use '../../functions/equals-false' as *;
@use '../../functions/is-alias' as *;
@use '../../functions/is-falsey' as *;
@use '../../functions/is-global-value' as *;
@use '../../functions/is-list' as *;
@use '../../functions/is-number' as *;
@use '../../functions/is-string' as *;
@use '../../functions/list-to-string' as *;

/// Animates an element like it is a rubber band being pulled and snapped. It
/// is recommended to use the `animation-stage()` mixin on the parent element.
///
/// @param {String} $axis ['horizontal'] - The axis the animation occurs along.
/// Can be `horizontal`, `vertical`, `diagonal`, or `diagonal2`.
/// @param {Number} $duration [0.9s] - The duration of the animation (`s` or `ms`).
/// @param {Number} $delay [null] - The optional delay of the animation (ms or s)
/// @param {Number | String} $iterations [null] - The number of iterations
/// to complete. Sets the value for the `animation-iteration-count` property.
/// Can be `infinite`, any unitless number, or any CSS global value.
/// @param {String} $anim-dir [null] - Sets the value for the
/// `animation-direction` property. Can be `normal`, `reverse`, `alternate`, or
/// `alternate-reverse`. Can also be any CSS global value. Default of `null`
/// assumes the CSS property default of `normal`.
/// @param {Timing-Function} $timing-func [null] - The timing function for the
/// animation. A null $timing-func will create an animation with the CSS default
/// timiing-function of ease.
/// @param {Number | String} $anim-num [null] - If the mixin is used more than
/// once with different values in a stylesheet, you can pass a number or string
/// to the mixin here that gets appeneded to end of the animation name so that
/// the animations do not overwrite each other.
///
/// @group Animations
/// @require {function} equals-false
/// @require {function} is-alias
/// @require {function} is-falsey
/// @require {function} is-global-value
/// @require {function} is-list
/// @require {function} is-number
/// @require {function} is-string
/// @require {function} list-to-string
///
/// @throw Invalid $axis value error.
/// @throw Invalid $duration value error.
/// @throw Invalid $delay value error.
/// @throw Invalid $iterations value error.
/// @throw Invalid $anim-dir value error.
@mixin snappiness(
  $axis: 'horizontal',
  $duration: 0.9s,
  $delay: null,
  $iterations: null,
  $anim-dir: null,
  $timing-func: linear,
  $anim-num: null
) {
  // Default $axis values for 'horizontal'
  $transform-val1: scale3d(1, 1, 1);
  $transform-val2: scale3d(1.25, 0.75, 1);
  $transform-val3: scale3d(0.75, 1.25, 1);
  $transform-val4: scale3d(1.15, 0.85, 1);
  $transform-val5: scale3d(0.95, 1.05, 1);
  $transform-val6: scale3d(1.05, 0.95, 1);
  $anim-suffix: '';

  @if $axis {
    @if is-list($axis) {
      $axis: list-to-string($axis);
    }

    @if is-string($axis) {
      $axis: string.to-lower-case($axis);
    }
  }

  @if $delay and is-string($delay) {
    $delay: string.to-lower-case($delay);
  }

  @if $anim-dir {
    @if is-list($anim-dir) {
      $anim-dir: list-to-string($anim-dir);
    }

    @if is-string($anim-dir) {
      $anim-dir: string.to-lower-case($anim-dir);
    }
  }

  @if $timing-func and is-string($timing-func) {
    $timing-func: string.to-lower-case($timing-func);
  }

  @if is-alias('top-to-bottom', $axis) {
    $transform-val1: scale3d(1, 1, 1);
    $transform-val2: scale3d(0.75, 1.25, 1);
    $transform-val3: scale3d(1.25, 0.75, 1);
    $transform-val4: scale3d(0.85, 1.15, 1);
    $transform-val5: scale3d(1.05, 0.95, 1);
    $transform-val6: scale3d(0.95, 1.05, 1);
    $anim-suffix: '-vertically';
  } @else if is-alias('bottom-left-to-top-right', $axis) {
    $transform-val1: skew(0, 0);
    $transform-val2: skew(-25deg, -25deg);
    $transform-val3: skew(15deg, 15deg);
    $transform-val4: skew(-15deg, -15deg);
    $transform-val5: skew(5deg, 5deg);
    $transform-val6: skew(-5deg, -5deg);
    $anim-suffix: '-diagonally';
  } @else if is-alias('bottom-right-to-top-left', $axis) {
    $transform-val1: skew(0, 0);
    $transform-val2: skew(25deg, 25deg);
    $transform-val3: skew(-15deg, -15deg);
    $transform-val4: skew(15deg, 15deg);
    $transform-val5: skew(-5deg, -5deg);
    $transform-val6: skew(5deg, 5deg);
    $anim-suffix: '-diagonally';
  } @else if is-alias('left-to-right', $axis) {
    $anim-suffix: '-horizontally';
  } @else {
    @error '`#{meta.inspect($axis)}` is not a valid direction for the ' +
        '[ snappiness() ] mixin.';
  }

  @if not is-number($duration) {
    @error 'Invalid $duration value of `#{meta.inspect($duration)}` for the ' +
        '[ snappinesss ] mixin. The duration property must be a number.';
  } @else if math.is-unitless($duration) {
    // If no there is no unit for $duration, unless $duration > 60, assume seconds
    $duration: if($duration > 60, $duration * 1ms, $duration * 1s);
  } @else if not list.index('s' 'ms', math.unit($duration)) {
    @error 'Invalid $duration value of `#{meta.inspect($duration)}` for the ' +
        '[ snappinesss ] mixin. The duration property must be in either s or ms units.';
  } @else if $duration % 10 == 0ms {
    // If time in ms would be shorter as seconds, convert it
    $duration: math.div($duration, 1000ms) * 1s;

    // Get rid of possible leading zero in front of decimal place
    @if string.slice($duration + '', 1, 2) == '0.' {
      $duration: #{string.slice($duration + '', 2)};
    }
  }

  @if is-falsey($delay) or
      is-alias('none', $delay) or
      $delay == 0s or $delay == 0ms
  {
    $delay: null;
  }
  @if $delay {
    @if not is-number($delay) {
      @error 'Invalid delay value of `#{meta.inspect($delay)}` for the ' +
          '[ snappiness() ] mixin. The delay property must be a number.';
    } @else if math.is-unitless($delay) {
      // If no there is no unit for $delay, unless $delay > 60, assume seconds
      $delay: if($delay > 60, $delay * 1ms, $delay * 1s);
    } @else if not list.index('s' 'ms', math.unit($delay)) {
      @error 'Invalid delay value of `#{meta.inspect($delay)}` for the ' +
          '[ snappiness() ] mixin. The delay property must be in either `s` ' +
          '(seconds) or `ms` (milliseconds) units.';
    } @else if $delay % 10 == 0ms {
      $delay: math.div($delay, 1000ms) * 1s;

      @if string.slice($delay + '', 1, 2) == '0.' {
        $delay: #{string.slice($delay + '', 2)};
      }
    }
  }

  @if $iterations {
    @if is-string($iterations) {
      $iterations: string.to-lower-case($iterations);
    }

    @if is-alias('infinite', $iterations) {
      $iterations: infinite;
    } @else if (is-number($iterations) and math.is-unitless($iterations)) or
      is-global-value($iterations)
    {
      $iterations: $iterations;
    } @else {
      @error 'Invalid $iterations value of `#{meta.inspect($iterations)}`' +
          ' for the [ snappiness() ] mixin.';
    }
  } @else {
    $iterations: null;
  }

  @if is-falsey($anim-dir) or
    is-alias('none', $anim-dir) or
    is-alias('normal', $anim-dir)
  {
    $anim-dir: null;
  } @else if is-alias('reverse', $anim-dir) {
    $anim-dir: reverse;
  } @else if is-alias('alternate', $anim-dir) {
    $anim-dir: alternate;
  } @else if is-alias('alternate-reverse', $anim-dir) {
    $anim-dir: alternate-reverse;
  } @else if not is-global-value($anim-dir) {
    @error 'Invalid animation-direction value of `#{$anim-dir}`' +
        ' for the [ snappiness() ] mixin.';
  }

  @if not
    $timing-func or
    $timing-func ==
    'ease' or
    is-alias('none', $timing-func) or
    is-alias('normal', $timing-func)
  {
    $timing-func: null;
  }

  @if equals-false($anim-num) or $anim-num == '' {
    $anim-num: null;
  } @else {
    $anim-suffix: string.insert(
      $anim-suffix,
      '--#{$anim-num}',
      string.length($anim-suffix) + 1
    );
  }

  animation: snap#{$anim-suffix} #{$duration} #{$timing-func} #{$delay}
    #{$iterations} #{$anim-dir} both;

  @at-root {
    @keyframes snap#{$anim-suffix} {
      0%,
      100% {
        transform: #{$transform-val1};
      }

      30% {
        transform: #{$transform-val2};
      }

      40% {
        transform: #{$transform-val3};
      }

      50% {
        transform: #{$transform-val4};
      }

      65% {
        transform: #{$transform-val5};
      }

      75% {
        transform: #{$transform-val6};
      }
    }
  }
}

/// Animates an element like it is a rubber band being pulled and snapped.
///
/// @param {String} $axis [horizontal] - The direction of the animation
/// occurs in. Can be `horizontal`, `vertical`, `diagonal1`, or `diagonal2`.
/// or `d2`).
/// @param {Number} $duration [0.9s] - The duration of the animation (`s` or `ms`).
/// @param {Number} $delay [null] - The optional delay of the animation (ms or s)
/// @param {Number | String} $iterations [null] - The number of iterations
/// for the animation to complete. Can be `infinite`, `inherit`, `initial`, or
/// any unitless number.
/// @param {String} $anim-dir [null] - Sets the animation-direction property.
/// Can be `normal`, `reverse`, `alternate`, or `alternate-reverse`. Default of
/// `null` assumes the CSS property default of `normal`.
/// @param {Timing-Function} $timing-func [null] - The timing function for the
/// animation. A null $timing-func will create an animation with the CSS default
/// timiing-function of ease.
/// @param {Number | String} $anim-num [null] - If the mixin is used more than
/// once with different values in a stylesheet, you can pass a number or string
/// to the mixin here that gets appeneded to end of the animation name so that
/// the animations do not overwrite each other.
///
/// @group Animations
/// @require {function} is-alias
///
/// @throw Invalid $axis value
/// @throw Invalid $duration value
/// @throw Invalid $delay value
/// @throw Invalid $iterations value
/// @throw Invalid $anim-dir value
///
/// @alias snappiness
@mixin snap(
  $axis: horizontal,
  $duration: 0.9s,
  $delay: null,
  $iterations: null,
  $anim-dir: null,
  $timing-func: linear,
  $anim-num: null
) {
  @include snappiness(
    $axis,
    $duration,
    $delay,
    $iterations,
    $anim-dir,
    $timing-func,
    $anim-num
  );
}

/// Animates an element like it is a rubber band being pulled and snapped.
///
/// @param {String} $axis ['horizontal'] - The axis the animation occurs along.
/// Can be `horizontal`, `vertical`, `diagonal`, or `diagonal2`.
/// @param {Number} $duration [0.9s] - The duration of the animation (`s` or `ms`).
/// @param {Number} $delay [null] - The optional delay of the animation (ms or s)
/// @param {Number | String} $iterations [null] - The number of iterations
/// to complete. Sets the value for the `animation-iteration-count` property.
/// Can be `infinite`, any unitless number, or any CSS global value.
/// @param {String} $anim-dir [null] - Sets the value for the
/// `animation-direction` property. Can be `normal`, `reverse`, `alternate`, or
/// `alternate-reverse`. Can also be any CSS global value. Default of `null`
/// assumes the CSS property default of `normal`.
/// @param {Timing-Function} $timing-func [null] - The timing function for the
/// animation. A null $timing-func will create an animation with the CSS default
/// timiing-function of ease.
/// @param {Number | String} $anim-num [null] - If the mixin is used more than
/// once with different values in a stylesheet, you can pass a number or string
/// to the mixin here that gets appeneded to end of the animation name so that
/// the animations do not overwrite each other.
///
/// @group Animations
/// @require {function} equals-false
/// @require {function} is-alias
/// @require {function} is-falsey
/// @require {function} is-global-value
/// @require {function} is-list
/// @require {function} is-number
/// @require {function} is-string
/// @require {function} list-to-string
///
/// @throw Invalid $axis value error.
/// @throw Invalid $duration value error.
/// @throw Invalid $delay value error.
/// @throw Invalid $iterations value error.
/// @throw Invalid $anim-dir value error.
///
/// @alias snappiness
@mixin jello(
  $axis: 'horizontal',
  $duration: 0.9s,
  $delay: null,
  $iterations: null,
  $anim-dir: null,
  $timing-func: linear,
  $anim-num: null
) {
  @include snappiness(
    $axis,
    $duration,
    $delay,
    $iterations,
    $anim-dir,
    $timing-func,
    $anim-num
  );
}
