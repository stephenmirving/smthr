@use 'sass:list';
@use 'sass:map';
@use 'sass:meta';
@use 'sass:string';
@use '../variables/maps' as *;

/// Safely converts a string representation of a number into an actual number
/// that will always work when things like string.unquote() or interpolation
/// give errors.This function assumes the input string is a valid numerical
/// value.
/// @access public
///
/// @param {String} $string - Value to be parsed.
///
/// @return {Number} - The numerical representation of the input string.
///
/// @throw $string is not a string.
/// @throw $string is not a valid numberic.
@function str-to-num($string) {
  @if meta.type-of($string) == 'number' {
    @warn 'Value of [ #{meta.inspect($string)} ] passed to the [ str-to-num() ] ' +
        'function is already a number and does not need to be converted.';
    @return $string;
  }

  @if meta.type-of($string) != 'string' {
    @warn 'Ivalid input of [ #{$string} ] used in the [ str-to-num ] function. ' +
        'This is not a valid string. Returning input as-is.';
    @return $string;
  }

  $result: 0;
  $digits: 0;
  $minus: string.slice($string, 1, 1) == '-';
  $numbers: (
    '0': 0,
    '1': 1,
    '2': 2,
    '3': 3,
    '4': 4,
    '5': 5,
    '6': 6,
    '7': 7,
    '8': 8,
    '9': 9
  );

  @for $i from if($minus, 2, 1) through string.length($string) {
    $char: string.slice($string, $i, $i);

    @if not(list.index(map.keys($numbers), $char) or $char == '.') {
      @return _to-unit(
        if($minus, $result * -1, $result),
        string.slice($string, $i)
      );
    }

    @if $char == '.' {
      $digits: 1;
    } @else if $digits == 0 {
      $result: $result * 10 + map.get($numbers, $char);
    } @else {
      $digit: $digits * 10;
      $result: $result + math.div(map.get($numbers, $char), $digits);
    }
  }

  $result: if($minus, $result * -1, $result);

  // Check if coercion succeeded by comparing types.
  @if type-of($result) == 'number' {
    @return $result;
  } @else {
    @error 'Failed to convert [ #{$string} ] into a number with the ' +
        '[ str-to-num ] function. This string is not a valid numeric value.';
  }
}

/// Safely converts a string representation of a number into an actual number
/// that will always work when things like string.unquote() or interpolation
/// give errors.This function assumes the input string is a valid numerical
/// value.
/// @access public
///
/// @param {String} $string - Value to be parsed.
///
/// @return {Number} - The numerical representation of the input string.
///
/// @throw $string is not a string.
/// @throw $string is not a valid numberic.
///
/// @alias str-to-num
@function string-to-number($string) {
  @return str-to-num($string);
}

/// Safely converts a string representation of a number into an actual number
/// that will always work when things like string.unquote() or interpolation
/// give errors.This function assumes the input string is a valid numerical
/// value.
/// @access public
///
/// @param {String} $string - Value to be parsed.
///
/// @return {Number} - The numerical representation of the input string.
///
/// @throw $string is not a string.
/// @throw $string is not a valid numberic.
///
/// @alias str-to-num
@function string-to-numeric($string) {
  @return str-to-num($string);
}

/// Used by the str-to-num function as a helper for converting numbers with units.
/// @access private
///
/// @param {String} $value - The number part of the conversion.
/// @param {String} $unit - The unit in the value being coerced.
///
/// @return {Number} - A number with the given unit.
@function _to-unit($value, $unit) {
  @if not list.index(map.keys($map-units), $unit) {
    @error 'Invalid $unit value of `#{meta.inspect($unit)}` passed to the ' +
        '[ str-to-num() ] function.';
  }

  @return $value * map.get($map-units, $unit);
}
