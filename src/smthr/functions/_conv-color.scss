@use 'sass:meta';
@use 'sass:math';
@use 'sass:color';
@use 'sass:string';
@use './to-cmyk' as *;
@use './to-hex' as *;
@use './to-fixed' as *;
@use './strip-unit' as *;

/// Takes a given color in virtually any notation and converts it into the given
/// color syntax types.
/// @access public
///
/// @param {Color} $color - The color to convert.
/// @param {String} $syntax [hsl] - The color syntax to convert into.
/// @return {Color} The converted color in the given syntax.
///
/// @require strip-unit
/// @require to-hex
/// @require to-fixed
/// @require to-cmyk
/// @throw Invalid data type for $color
/// @throw Invalid color syntax type for $syntax
/// @alias convert-color
/// @alias convert-color-to
@function conv-color($color, $syntax: hsl) {
  @if meta.type-of($color) != 'color' {
    @error 'Invalid data type passed to [ conv-color() ] function. You passed ' +
      '[ #{$color} ] for the $color argument, which is not a ' +
      'a color that can be converted by this function.';
  }

  $color-alpha: color.alpha($color);
  $color-red: color.red($color);
  $color-green: color.green($color);
  $color-blue: color.blue($color);
  $color-hue: strip-unit(to-fixed(color.hue($color)));
  $color-lightness: to-fixed(color.lightness($color));
  $color-saturation: to-fixed(color.saturation($color));
  $color-whiteness: math.round(color.whiteness($color));
  $color-blackness: math.round(color.blackness($color));

  @if meta.type-of($syntax) == 'string' {
    $syntax: string.to-lower-case($syntax);
  } @else {
    @error 'Invalid value of [ #{meta.inspect($syntax)} ] passed to ' +
       'the `conv-color()` function. Value of $syntax must be a string.';
  }

  @if $syntax == 'hex' or $syntax == '#' {
    @return to-hex($color);
  } @else if $syntax == 'rgb' {
    @if $color-alpha == 1 {
      @return #{'rgb(' + $color-red + ' ' + $color-green + ' ' + $color-blue + ')'};
    } @else {
      @return #{'rgb(' + $color-red + ' ' + $color-green + ' ' + $color-blue +
        ' / ' + $color-alpha + ')'};
    }
  } @else if $syntax == 'rgba' {
    @return #{'rgba(' + $color-red + ', ' + $color-green + ', ' + $color-blue +
      ', ' + $color-alpha + ')'};
  } @else if $syntax == 'hsl' {
    @if $color-alpha == 1 {
      @return #{'hsl(' + $color-hue + ' ' + $color-saturation + ' ' +
        $color-lightness + ')'};
    } @else {
      @return #{'hsl(' + $color-hue + ' ' + $color-saturation + ' ' +
        $color-lightness + ' / ' + $color-alpha + ')'};
    }
  } @else if $syntax == 'hsla' {
    @return #{'hsla(' + $color-hue + ', ' + $color-saturation + ', ' +
      $color-lightness + ', ' + $color-alpha + ')'};
  } @else if $syntax == 'hwb' {
    @if $color-alpha == 1 {
      @return #{'hwb(' + $color-hue + ' ' + $color-whiteness + ' ' +
        $color-blackness + ')'};
    } @else {
      @return #{'hwb(' + $color-hue + ' ' + $color-whiteness + ' ' +
        $color-blackness + ' / ' + $color-alpha + ')'};
    }
  } @else if $syntax == 'cmyk' {
    @return to-cmyk($color);
  } @else {
    @error 'Invalid $syntax value of [ #{$syntax} ] passed to ' +
       'the [ conv-color() ] function. Value of $syntax must be a string ' +
       'representing a valid CSS color function specification. This function ' +
       'supports converting into the following $syntax values: ' +
       '[ hex, \'#\', rgb, rgba, hsl, hsla, hwb, cmyk ].';
  }
}

/// Takes a given color in virtually any notation and converts it into the given
/// color syntax types.
/// @access public
///
/// @param {Color} $color - The color to convert.
/// @param {String} $syntax [hsl] - The color syntax to convert into.
///
/// @require strip-unit
/// @require to-hex
/// @require to-fixed
/// @require to-cmyk
/// @throw Invalid data type for $color
/// @throw Invalid color syntax type for $syntax
/// @alias conv-color
/// @alias convert-color-to
@function convert-color($color, $syntax) {
  @return conv-color($color, $syntax);
}

/// Takes a given color in virtually any notation and converts it into the given
/// color syntax types.
/// @access public
///
/// @param {Color} $color - The color to convert.
/// @param {String} $syntax [hsl] - The color syntax to convert into.
/// @require strip-unit
/// @require to-hex
/// @require to-fixed
/// @require to-cmyk
/// @throw Invalid data type for $color
/// @throw Invalid color syntax type for $syntax
/// @alias convert-color
/// @alias convert-color-to
@function convert-color-to($color, $syntax) {
  @return conv-color($color, $syntax);
}
