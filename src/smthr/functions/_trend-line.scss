@use 'sass:list';
@use 'sass:map';
@use 'sass:math';

/// Calculate the least square fit linear regression, or "trend-line", of a
/// mapped set of provided values.
/// @access public
///
/// @param {Map} $map - A map where the keys are viewport widths and each value
/// associated is the desired pixel size at that given view width.
/// @return A linear equation expressed as a calc() function.
/// @example font-size: trend-line((576px: 24px, 768px: 24px, 992px: 34px))
@function trend-line($map) {
  // Get the number of provided breakpoints
  $num-points: list.length(map.keys($map));

  @if $num-points < 2 {
    @error 'The $map passed to the [ trend-line() ] fucntion must contain ' +
        'at least 2 values.';
  }

  // Then calculate the averages
  $res-sum: 0;
  $size-sum: 0;

  @each $resolution, $size in $map {
    $res-sum: $res-sum + $resolution;
    $size-sum: $size-sum + $size;
  }

  $res-avg: math.div($res-sum, $num-points);
  $size-avg: math.div($size-sum, $num-points);

  // Rest of the necessary calculations...
  $multiplied-diff: 0;
  $squared-diff: 0;

  @each $resolution, $size in $map {
    // Calculate the differences from the averages
    $res-diff: $resolution - $res-avg;
    $size-diff: $size - $size-avg;

    // Calculate the sum of multiplied differences
    $multiplied-diff: $multiplied-diff + ($res-diff * $size-diff);

    // Calculate the sum of squared resolution differences
    $squared-diff: $squared-diff + ($res-diff * $res-diff);
  }

  // Now calculate the slope of the line...
  $slope: math.div($multiplied-diff, $squared-diff);

  // ... and the y-intercept
  $y-intercept: $size-avg - ($slope * $res-avg);

  // Return the CSS calc equation
  @return calc(#{$slope * 100vw} + #{$y-intercept});
}
