@use 'sass:list';
@use 'sass:meta';
@use 'map-to-string' as *;

/// Iterates over a List and returns it as a converted String.
///
/// @param {List | Map} $list - The List to convert into a String.
/// @param {String} $separator [' '] - The separator to use between
/// the list elements. By default this is the separator used in $list.
/// @param {Bool} $extra-space [false] - Pass true to use extra space between
/// list items in the resulting String.
///
/// @return {String} The converted String.
///
/// @access public
/// @group Utilities
/// @require {function} map-to-string
///
/// @throw Invalid $separator type error.
@function list-to-string(
  $list,
  $separator: if(meta.type-of($list) == 'list', list.separator($list), ' '),
  $extra-space: false
) {
  $str: '';
  $type: meta.type-of($list);

  @if $type == 'string' {
    @return $list;
  }

  @if $separator == comma or $separator == ',' or $separator == ', ' {
    @if $extra-space {
      $separator: ', ';
    } @else {
      $separator: ',';
    }
  } @else if $separator == space or $separator == ' ' or $separator == '  ' {
    @if $extra-space {
      $separator: '  ';
    } @else {
      $separator: ' ';
    }
  } @else if $separator == slash or $separator == '/' or $separator == ' / '{
    @if $extra-space {
      $separator: ' / ';
    } @else {
      $separator: '/';
    }
  } @else {
    @error 'Invalid $separator type passed to the [ list-to-string() ]' +
        'function. You passed `#{meta.inspect($list)}`, which is not ' +
        'a valid separator string. Use something like comma, space, or slash.';
  }

  @if $type == 'map' {
    @return map-to-string($list, $separator);
  }

  @each $item in $list {
    @if $str == '' {
      $str: '#{$item}';
    } @else {
      $str: '#{$str}#{$separator}#{$item}';
    }
  }

  @return $str;
}

/// Iterates over a List and returns it as a converted String.
///
/// @param {List | Map} $list - The List to convert into a String.
/// @param {String} $separator [' '] - The separator to use between
/// the list elements. By default this is the separator used in $list.
/// @param {Bool} $extra-space [false] - Pass true to use extra space between
/// list items in the resulting String.
///
/// @return {String} The converted String.
///
/// @access public
/// @group Utilities
/// @require {function} map-to-string
///
/// @throw Invalid $separator type error.
///
/// @alias list-to-string
@function list-to-str(
  $list,
  $separator: if(meta.type-of($list) == 'list', list.separator($list), ' '),
  $extra-space: false
) {
  @return list-to-string($list, $extra-space, $separator);
}

/// Iterates over a List and returns it as a converted String.
///
/// @param {List | Map} $list - The List to convert into a String.
/// @param {String} $separator [' '] - The separator to use between
/// the list elements. By default this is the separator used in $list.
/// @param {Bool} $extra-space [false] - Pass true to use extra space between
/// list items in the resulting String.
///
/// @return {String} The converted String.
///
/// @access public
/// @group Utilities
/// @require {function} map-to-string
///
/// @throw Invalid $separator type error.
///
/// @alias list-to-string
@function list-join(
  $list,
  $separator: if(meta.type-of($list) == 'list', list.separator($list), ' '),
  $extra-space: false
) {
  @return list-to-string($list, $extra-space, $separator);
}
