@use 'sass:meta';
@use 'sass:list';
@use 'sass:map';

/// Deep set function to set a value in nested maps
/// @author Kitty Giraudel
/// @access public
/// @param {Map} $map - Map
/// @param {List} $keys - Key chaine
/// @param {*} $value - Value to assign
/// @return {Map} The map object that was set
@function map-set-deep($map, $keys, $value) {
  $maps: ($map);
  $result: null;

  @if meta.type-of(list.nth($keys, -1)) == 'map' {
    @warn 'The last key you specified in the map-set-deep() function is a map' +
        '; it will be overrided with `#{$value}`.';
  }

  @if length($keys) == 1 {
    @return map.merge(
      $map,
      (
        $keys: $value
      )
    );
  }

  // Loop from the first to the second to last key from $keys
  // Store the associated map to this key in the $maps list
  // If the key doesn't exist, throw an error
  @for $i from 1 through length($keys) - 1 {
    $current-key: list.nth($keys, $i);
    $current-map: list.nth($maps, -1);
    $current-get: map.get($current-map, $current-key);

    @if not $current-get {
      @error 'Key `#{$key}` doesn\'t exist at current level in map when ' +
          'using the map-set-deep() function.';
    }

    $maps: list.append($maps, $current-get);
  }

  // Loop from the last map to the first one
  // Merge it with the previous one
  @for $i from length($maps) through 1 {
    $current-map: list.nth($maps, $i);
    $current-key: list.nth($keys, $i);
    $current-val: if($i == list.length($maps), $value, $result);
    $result: map.merge(
      $current-map,
      (
        $current-key: $current-val
      )
    );
  }

  @return $result;
}
