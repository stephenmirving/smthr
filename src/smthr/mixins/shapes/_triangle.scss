@use 'sass:meta';
@use 'sass:string';
@use '../../functions/is-alias' as *;

/// Creates a CSS triangle, which can be used for dropdown arrows, dropdown
/// pips, and more. Use this mixin inside a `&::before` or `&::after` selector,
/// to attach the triangle to an existing element.
///
/// @param {String} $direction [down] - Direction that the triangle points.
/// Can be `up` (or `u`), `right` (or `r`), `down` (or `d`), or `left` (or `l`).
/// @param {Number} $size [9px] - Width of the triangle.
/// @param {Color} $color [#3e3e3e] - Color of the triangle.
///
/// @group Shapes
/// @throw Invalid $direction value
@mixin triangle($direction: down, $size: 9px, $color: #3e3e3e) {
  @if meta.type-of($direction) == 'string' {
    $direction: string.to-lower-case($direction);
  }

  content: '';
  display: block;
  width: 0;
  height: 0;

  border: inset $size;

  @if is-alias('bottom', $direction) {
    border-color: $color transparent transparent;
    border-top-style: solid;
    border-bottom-width: 0;
  } @else if is-alias('top', $direction) {
    border-color: transparent transparent $color;
    border-top-width: 0;
    border-bottom-style: solid;
  } @else if is-alias('right', $direction) {
    border-color: transparent transparent transparent $color;
    border-right-width: 0;
    border-left-style: solid;
  } @else if is-alias('left', $direction) {
    border-color: transparent $color transparent transparent;
    border-right-style: solid;
    border-left-width: 0;
  } @else {
    @error 'Invalid direction of `#{meta.inspect($direction)}` for the ' +
        '[ triangle() ] mixin. The value for $direction must be ' +
        'one of the following: `top`, `right`, `bottom`, or `left`.';
  }
}
