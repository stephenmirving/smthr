@use 'sass:color';
@use 'sass:meta';
@use 'sass:math';

/// Creates a 3D ribbon shape for headers. Apply the ribbon to a header element
/// and include an inner inline element for the header's content.
///
/// @example <h1 class="ribbon"><strong class="ribbon-content">HEADER</strong></h1>
/// @link https://css-tricks.com/snippets/css/ribbon/
///
/// @param {Length-Percentage} $font-size [1em] - The font-size of the ribbon
/// text.
/// @param {Number} $ribbon-size [1] - A number value used to calculate the
/// overall size of the ribbon.
/// @param {Color} $bg-color [purple] - The background color for the ribbon.
/// @param {Color} $fg-color [purple] - The color of the ribbon's text.
/// @param {String} $content-suffix ['-content'] - The suffix that is added
/// to the class name that this mixin is applied to, representing the internal
/// inline class that contains the ribbon's text content.
///
/// @group Shapes
/// @alias banner
/// @throw Invalid $ribbon-size value
@mixin ribbon(
  $font-size: 1em,
  $ribbon-size: 1,
  $bg-color: #ba89b6,
  $fg-color: #fff,
  $content-suffix: '-content'
) {
  @if meta.type-of($ribbon-size) !=
    'number' or not
    math.is-unitless($ribbon-size)
  {
    @error 'Invalid $ribbon-size value for the `ribbon` mixin.';
  }

  position: relative;
  width: 50%;
  padding: ($ribbon-size * 1rem) ($ribbon-size * 2rem);
  margin: ($ribbon-size * 2rem) auto ($ribbon-size * 3rem);
  background: $bg-color;
  font-size: $font-size !important;
  line-height: 1;
  text-align: center;
  @if $fg-color {
    color: $fg-color;
  }

  &::before,
  &::after {
    content: '';
    position: absolute;
    bottom: -1 * ($ribbon-size * 1rem);
    z-index: -1;
    display: block;
    border: ($ribbon-size * 1.5rem) solid color.mix(#000, $bg-color, 18.5%);
  }

  &::before {
    left: -1 * ($ribbon-size * 2rem);
    border-right-width: $ribbon-size * 1.5rem;
    border-left-color: transparent;
  }

  &::after {
    right: -1 * ($ribbon-size * 2rem);
    border-right-color: transparent;
    border-left-width: $ribbon-size * 1.5rem;
  }

  &#{$content-suffix}:before,
  &#{$content-suffix}:after {
    content: '';
    position: absolute;
    bottom: -($ribbon-size * 1rem);
    display: block;
    border-style: solid;
    border-color: color.mix(#000, $bg-color, 31%) transparent transparent;
  }

  &#{$content-suffix}:before {
    left: 0;
    border-width: ($ribbon-size * 1rem) 0 0 ($ribbon-size * 1rem);
  }

  &#{$content-suffix}:after {
    right: 0;
    border-width: ($ribbon-size * 1rem) ($ribbon-size * 1rem) 0 0;
  }
}

/// Creates a 3D ribbon shape for headers. Apply the ribbon to a header element
/// and include an inner inline element for the header's content.
///
/// @example <h1 class="ribbon"><strong class="ribbon-content">HEADER</strong></h1>
/// @link https://css-tricks.com/snippets/css/ribbon/
///
/// @param {Length-Percentage} $font-size [1em] - The font-size of the ribbon
/// text.
/// @param {Number} $ribbon-size [1] - A number value used to calculate the
/// overall size of the ribbon.
/// @param {Color} $bg-color [purple] - The background color for the ribbon.
/// @param {Color} $fg-color [purple] - The color of the ribbon's text.
/// @param {String} $content-suffix ['-content'] - The suffix that is added
/// to the class name that this mixin is applied to, representing the internal
/// inline class that contains the ribbon's text content.
///
/// @group Shapes
/// @alias ribbon
/// @throw Invalid $ribbon-size value
@mixin banner(
  $font-size: 1em,
  $ribbon-size: 1,
  $bg-color: #ba89b6,
  $fg-color: #fff,
  $content-suffix: '-content'
) {
  @include ribbon(
    $font-size,
    $ribbon-size,
    $bg-color,
    $fg-color,
    $content-suffix
  );
}
