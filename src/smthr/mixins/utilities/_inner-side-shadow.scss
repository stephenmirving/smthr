@use 'sass:math';
@use 'sass:meta';
@use 'sass:string';

/// Creates an inner box-shadow for only one side of an element.
///
/// @param {Keyword} $side [bottom] - Side the shadow is supposed to appear.
/// Can be `top`, `left`, `right` or `bottom`.
/// @param {Length} $size [20px] - The width of the shadow on the target side.
/// @param {Color} $color [hsl(0 0 0 / 0.3] - The color of the shadow.
///
/// @group Utilities
@mixin inner-side-shadow(
  $side: 'bottom',
  $size: 20px,
  $color: hsl(0 0 0 / 0.3)
) {
  @if math.is-unitless($size) {
    $size: $size * 1px;
  }

  @if $side and meta.type-of($side) == 'string' {
    $side: string.to-lower-case($side);
  }

  $helper: math.round($size * 0.65);

  @if $side == 'top' or $side == 't' or $side == 'up' or $side == 'u' {
    box-shadow: inset 0 $helper $size (-1) * $helper $color;
  } @else if $side == 'left' or $side == 'l' {
    box-shadow: inset $helper 0 $size (-1) * $helper $color;
  } @else if $side == 'right' or $side == 'r' {
    box-shadow: inset (-1) * $helper 0 $size (-1) * $helper $color;
  } @else if
    $side ==
    'bottom' or
    $side ==
    'b' or
    $side ==
    'btm' or
    $side ==
    'down' or
    $side ==
    'd'
  {
    box-shadow: inset 0 (-1) * $helper $size (-1) * $helper $color;
  } @else {
    @error 'Invalid side value of `#{meta.inspect($side)}` for the '
        + '`inner-side-shadow` mixin.';
  }
}
