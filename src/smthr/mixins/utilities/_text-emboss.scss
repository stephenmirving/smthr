@use 'sass:color';
@use '../../functions/conv-color' as *;
@use '../../functions/is-color' as *;

/// Apply a subtle embossing text shadow effect.
/// @param {Float} $opacity - The opacity value.
/// @param {Color} $color [#fff} - The embossing shadow's color value. Can be
/// and color type, but if the color has an alpha/opacity value other than 1 it
/// will be disregarded in favor of the $opacity parameter.
///
/// @group Utilities
///
/// @throw {Error} Invalid color value.
/// @throw {Warn} Color value stripped of alpha value in favor of $opacity.
@mixin text-emboss($opacity, $color: #fff, $blur: 0) {
  $red-component: null;
  $green-component: null;
  $blue-component: null;

  @if is-color($color) {
    @if color.alpha($color) != 1 {
      @warn 'Ignoring alpha value of #{meta.inspect($color)} passed to the' +
          '[ text-emboss() ] mixin in favor of the $opacity parameter for the ' +
          'function.';
    }

    // Remove any potential alpha value from the $color parameter
    $red-component: color.red($color);
    $green-component: color.green($color);
    $blue-component: color.blue($color);

    // Convert color to hex with any potential alpha value in the color removed.
    $color: conv-color(
      rgb($red-component, $green-component, $blue-component),
      'hex'
    );
  } @else {
    @error 'Invalid $color value of #{meta.inspect($color)} passed to the ' +
        '[ text-emboss() ] mixin.';
  }

  text-shadow: 0 1px $blur rgba($color, $opacity);
}
