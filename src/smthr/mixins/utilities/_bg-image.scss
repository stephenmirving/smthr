@use 'sass:string';
@use 'sass:map';
@use 'sass:meta';
@use '../../placeholders/variables' as *;

/// Apply a background image with a version that is scaled to 2x for Retina and
/// other HiDPI displays.
///
/// @param {URL} $img-name - File path for the image. Must either be a
/// quoted string or inside a function to be read correctly.
/// @param {Length-Percentage} $bg-width - Width component of the background-size
/// property value for the image.
/// @param {Length-Percentage} $bg-height [$bg-width] - Height component of the
/// background-size property value for the image.
/// @param {Number} $ratio [1.3] - A minimum pixel ratio resolution value used
/// to calculate the media query targeting Retina and other HiDPI screens.
/// Common targeting ratios are 1.25, 1.3, 1.5, and 2.
/// @param {String} $img-2x-suffix [$image-suffix-2x|'@2x']- The suffix that is
/// appended to the end of image name to designate that it is the 2x version for
/// HiDPI displays. Must be a quoted string to be ready correctly.
/// @param {Map} $extra-hidpi-properties [null] - You can pass this argument
/// a map of property: value pairs that will be added to the HiDPI/Retina
/// media query.
///
/// @group Utilities
/// @throw Value of $bg-width must not be null
/// @throw Invalid $bg-width or $bg-height data type
/// @throw Invalid $img filename
@mixin bg-image(
  $img-name,
  $bg-width,
  $bg-height: $bg-width,
  $ratio: 1.3,
  $img-2x-suffix:
    if(
      meta.variable-exists('image-suffix-2x') or
        meta.global-variable-exists('image-suffix-2x', smth),
      $image-suffix-2x,
      '@2x'
    ),
  $extra-hidpi-properties: null
) {
  $hidpi-img: $img-name;

  @if $extra-hidpi-properties and
    meta.type-of($extra-hidpi-properties) ==
    'string'
  {
    $extra-hidpi-properties: string.to-lower-case($extra-hidpi-properties);
  }

  @if not
    $extra-hidpi-properties or
    $extra-hidpi-properties ==
    'none' or
    $extra-hidpi-properties ==
    'no' or
    $extra-hidpi-properties ==
    nil or
    $extra-hidpi-properties ==
    'n/a' or
    $extra-hidpi-properties ==
    ' ' or
    $extra-hidpi-properties ==
    () or
    $extra-hidpi-properties ==
    ()
  {
    $extra-hidpi-properties: null;
  }

  @if not $bg-width {
    @error 'You must enter an image width for the $bg-width parameter of the ' +
        '`bg-image` mixin.';
  } @else if
    (
      meta.type-of($bg-width) !=
        'number' or
        (
          $bg-height and
            $bg-height !=
            auto and
            meta.type-of($bg-height) !=
            'number'
        )
    )
  {
    @error 'Invalid type for the dimensions used in the `bg-image` mixin.';
  } @else {
    $bg-width: if(
      meta.type-of($bg-width) == 'number' and math.is-unitless($bg-width),
      $bg-width * 1px,
      $bg-width
    );
    $bg-height: if(
      (meta.type-of($bg-height) == 'number' and math.is-unitless($bg-height)),
      $bg-height * 1px,
      $bg-height
    );
  }

  $size: if(
    not $bg-height or $bg-height == auto,
    $bg-width,
    $bg-width $bg-height
  );

  @if string.index($img-name, '.png') or
    string.index($img-name, '.svg') or
    string.index($img-name, '.gif') or
    string.index($img-name, '.jpg') or
    string.index($img-name, '.jpx') or
    string.index($img-name, '.jp2') or
    string.index($img-name, '.j2c') or
    string.index($img-name, '.j2k') or
    string.index($img-name, '.jps') or
    string.index($img-name, '.ppm') or
    string.index($img-name, '.iff') or
    string.index($img-name, '.tdi') or
    string.index($img-name, '.dmc') or
    string.index($img-name, '.dc3') or
    string.index($img-name, '.dic') or
    string.index($img-name, '.mpo') or
    string.index($img-name, '.bmp') or
    string.index($img-name, '.pxr') or
    string.index($img-name, '.tga') or
    string.index($img-name, '.vda') or
    string.index($img-name, '.icb') or
    string.index($img-name, '.vst') or
    string.index($img-name, '.pcx') or
    string.index($img-name, '.jpf') or
    (
      not string.index($img-name, '.jpeg') and string.index($img-name, '.jpe')
    ) or
    (not string.index($img-name, '.tiff') and string.index($img-name, '.tif'))
  {
    $hidpi-img: string.insert(
      $img-name,
      $img-2x-suffix,
      string.length($img-name) - 3
    );
  } @else if
    string.index($img-name, '.tiff') or
    string.index($img-name, '.jpeg') or
    string.index($img-name, '.webp')
  {
    $hidpi-img: string.insert(
      $img-name,
      $img-2x-suffix,
      string.length($img-name) - 4
    );
  } @else if string.index($img-name, '.') {
    $hidpi-img: string.insert(
      $img-name,
      $img-2x-suffix,
      string.index($img-name, '.')
    );

    @warn 'You are using an unknown file type on the image you referenced in ' +
        'the [ bg-image() ] mixin. Please ensure you are using a valid image file' +
        ' type. If you use an unknown file type with multiple `.` characters ' +
        'the `bg-image` mixin may not work correctly.';
  } @else {
    @error 'The image you referenced in the [ bg-image() ] mixin does not have a ' +
        'file extension. Please use the full image name including the ' +
        'image\'s file extension.';
  }

  // Normal sized image
  background-image: url(#{$img-name});

  // Scaled up version of the image for HiDPI displays
  @media screen and (-webkit-min-device-pixel-ratio: $ratio),
    only screen and (min-resolution: $ratio * 96dpi),
    only screen and (min-resolution: $ratio * 1dppx) {
    background-image: url(#{$hidpi-img});
    background-size: $size;

    @if $extra-hidpi-properties {
      $key-list: map.keys($extra-hidpi-properties);

      @each $key in $key-list {
        #{$key}: map.get($extra-hidpi-properties, $key);
      }
    }
  }
}
