@use 'sass:meta';
@use 'sass:list';
@use 'sass:math';
@use 'sass:string';

/// Generates an animation that fades an element in or out. If a forward or
/// backward direction is chosen to augment the fade, it is recommended that
/// the `animation-stage` mixin be used on the parent element.
///
/// @param {String|Boolean} $in-or-out [in] - Determines if the element will
/// fade `in` (or true, `i`) our `out` (or false, `o`).
/// @param {String} $direction [null] - Will optionally either fade in from
/// this direction or fade out towards this direction, depending on $in-or-out.
/// @param {Time} $timing [null] - The duration of the animation (s or ms).
/// @param {Time} $delay [null] - The optional delay time for the animation.
/// @param {Number|String} $iterations [null] - The number of iterations
/// to complete. If the value passed is not a number, it will be set to infinite.
/// @param {Keyword} $anim-dir [null] - Sets the animation-direction property.
/// Can be `normal`, `reverse`, `alternate`, or `alternate-reverse`. Default of
/// null assumes the CSS property default of `normal`.
/// @param {Timing-Function} $timing-func [null] - The timing function for the
/// animation. A null value passed here will default to the recommended timing
/// function for this animation of `cubic-bezier(0.39, 0.575, 0.565, 1)`.
/// @param {Number|String} $anim-num [null] - If the mixin is used more than
/// once with different values in a stylesheet, you can pass a number or string
/// to the mixin here that gets appeneded to end of the animation name so that
/// the animations do not overwrite each other.
///
/// @group Animations
/// @throw Invalid $in-or-out value
/// @throw Invalid $timing value
/// @throw Invalid $delay value
/// @throw Invalid $iterations value
/// @throw Invalid $anim-dir value
@mixin fade(
  $in-or-out: in,
  $direction: null,
  $timing: null,
  $delay: null,
  $iterations: null,
  $anim-dir: null,
  $timing-func: null,
  $anim-num: null
) {
  // Default values for a fade in with no direction
  $opacity-val-1: 0;
  $opacity-val-2: 1;
  $trans-val-1: null;
  $trans-val-2: null;
  $temp-val: null;
  $is-fwd-or-bck: false;
  $anim-suffix: '';

  @if $in-or-out and meta.type-of($in-or-out) == 'string' {
    $in-or-out: string.to-lower-case($in-or-out);
  }

  @if $in-or-out == true or $in-or-out == 'in' or $in-or-out == 'i' {
    $in-or-out: true;
    $anim-suffix: '-in';
  } @else if not $in-or-out or $in-or-out == 'out' or $in-or-out == 'o' {
    $in-or-out: false;
    $anim-suffix: '-out';
  } @else {
    @error 'Invalid value for $in-or-out of `#{meta.inspect($in-or-out)}` ' +
        'in the [ fade ] mixin. Value must be either `in`, `out`, true, or false.';
  }

  @if $direction {
    @if meta.type-of($direction) == 'string' {
      $direction: string.to-lower-case($direction);
    }

    @if $direction == 'bottom' or $direction == 'btm' or $direction == 'b' {
      $trans-val-1: translateY(50px);
      $trans-val-2: translateY(0);
      $direction: 'bottom';
    } @else if
      $direction ==
      'forwards' or
      $direction ==
      'forward' or
      $direction ==
      'front' or
      $direction ==
      'fwd' or
      $direction ==
      'fw' or
      $direction ==
      'f'
    {
      $is-fwd-or-bck: true;
      $trans-val-1: translateZ(80px);
      $trans-val-2: translateZ(0);
      $direction: 'front';
    } @else if
      $direction ==
      'backwards' or
      $direction ==
      'backward' or
      $direction ==
      'bckwrd' or
      $direction ==
      'back' or
      $direction ==
      'bck' or
      $direction ==
      'bw' or
      $direction ==
      'b'
    {
      $is-fwd-or-bck: true;
      $trans-val-1: translateZ(-80px);
      $trans-val-2: translateZ(0);
      $direction: 'back';
    } @else if
      $direction ==
      'top' or
      $direction ==
      't' or
      $direction ==
      'up' or
      $direction ==
      'u'
    {
      $trans-val-1: translateY(-50px);
      $trans-val-2: translateY(0);
      $direction: 'top';
    } @else if $direction == 'left' or $direction == 'l' {
      $trans-val-1: translateX(-50px);
      $trans-val-2: translateX(0);
      $direction: 'left';
    } @else if $direction == 'right' or $direction == 'r' {
      $trans-val-1: translateX(50px);
      $trans-val-2: translateX(0);
      $direction: 'right';
    } @else if
      $direction ==
      'top-left' or
      $direction ==
      'topleft' or
      $direction ==
      't-l' or
      $direction ==
      'tl' or
      $direction ==
      'left-top' or
      $direction ==
      'lefttop' or
      $direction ==
      'l-t' or
      $direction ==
      'lt'
    {
      $trans-val-1: translateX(-50px) translateY(-50px);
      $trans-val-2: translateX(0) translateY(0);
      $direction: 'top-left';
    } @else if
      $direction ==
      'top-right' or
      $direction ==
      'topright' or
      $direction ==
      't-r' or
      $direction ==
      'tr' or
      $direction ==
      'right-top' or
      $direction ==
      'righttop' or
      $direction ==
      'r-t' or
      $direction ==
      'rt'
    {
      $trans-val-1: translateX(50px) translateY(-50px);
      $trans-val-2: translateX(0) translateY(0);
      $direction: 'top-right';
    } @else if
      $direction ==
      'bottom-right' or
      $direction ==
      'bottomright' or
      $direction ==
      'b-r' or
      $direction ==
      'br' or
      $direction ==
      'right-bottom' or
      $direction ==
      'rightbottom' or
      $direction ==
      'r-b' or
      $direction ==
      'rb'
    {
      $trans-val-1: translateX(50px) translateY(50px);
      $trans-val-2: translateX(0) translateY(0);
      $direction: 'bottom-right';
    } @else if
      $direction ==
      'bottom-left' or
      $direction ==
      'bottomleft' or
      $direction ==
      'b-l' or
      $direction ==
      'bl' or
      $direction ==
      'left-bottom' or
      $direction ==
      'leftbottom' or
      $direction ==
      'l-b' or
      $direction ==
      'lb'
    {
      $trans-val-1: translateX(-50px) translateY(50px);
      $trans-val-2: translateX(0) translateY(0);
      $direction: 'bottom-left';
    } @else {
      @error 'Invalid direction of `#{meta.inspect($direction)}` chosen for the ' +
          '[ fade() ] mixin.';
    }
  } @else {
    $direction: null;
  }

  @if $direction {
    @if $in-or-out {
      $anim-suffix: string.insert(
        $anim-suffix,
        '-from',
        string.length($anim-suffix) + 1
      );
    } @else {
      $anim-suffix: string.insert(
        $anim-suffix,
        '-to',
        string.length($anim-suffix) + 1
      );
    }

    $anim-suffix: string.insert(
      $anim-suffix,
      '-#{$direction}',
      string.length($anim-suffix) + 1
    );
  }

  // If fade is out rather than in, swap and reverse the necessary values
  @if not $in-or-out {
    $opacity-val-1: 1;
    $opacity-val-2: 0;

    $temp-val: $trans-val-1;
    $trans-val-1: $trans-val-2;
    $trans-val-2: $temp-val;
  }

  @if not $timing {
    @if $in-or-out {
      $timing: if((not $direction), 1.2s, 0.6s);
    } @else {
      $timing: if((not $direction), 1s, 0.7s);
    }
  }

  @if meta.type-of($timing) != 'number' {
    @error 'Invalid $timing value of `#{$timing}` for the ' +
        '[ fade ] mixin. The timing property must be a number.';
  } @else if math.is-unitless($timing) {
    // If no there is no unit for $timing, assume seconds
    $timing: $timing * 1s;
  } @else if not list.index('s' 'ms', math.unit($timing)) {
    @error 'Invalid $timing value of `#{$timing}` for the ' +
        '[ fade ] mixin. The timing property must be in either s or ms units.';
  } @else if math.unit($timing) == 'ms' and $timing % 100 == 0ms {
    // If time in ms would be shorter as seconds, convert it
    $timing: math.div($timing, 1000ms) * 1s;
  }

  @if $delay ==
    0 or
    $delay ==
    0s or
    $delay ==
    0ms or
    $delay ==
    'none' or
    $delay ==
    'no' or
    $delay ==
    'n' or
    $delay ==
    'n/a' or
    $delay ==
    nil or not
    $delay
  {
    $delay: null;
  }
  @if $delay {
    @if meta.type-of($delay) != 'number' {
      @error 'Invalid delay value of `#{meta.inspect($delay)}` for the [ fade() ] mixin.' +
          'The delay property must be a number.';
    } @else if math.is-unitless($delay) {
      // If no there is no unit for $delay, assume seconds
      $delay: $delay * 1s;
    } @else if not list.index('s' 'ms', math.unit($delay)) {
      @error 'Invalid delay value of `#{meta.inspect($delay)}` for the [ fade() ] mixin.' +
          'The delay property must be in either s or ms units.';
    } @else if math.unit($delay) == 'ms' and $delay % 100 == 0ms {
      // If time in ms would be shorter as seconds, convert it
      $delay: math.div($delay, 1000ms) * 1s;
    }
  }

  @if $iterations {
    @if $iterations == 'infinite' or $iterations == 'inf' or $iterations == 'i'
    {
      $iterations: infinite;
    } @else if
      (
        math.is-unitless($iterations) and meta.type-of($iterations) == 'number'
      ) or
      $iterations ==
      initial or
      $iterations ==
      inherit
    {
      $iterations: $iterations;
    } @else {
      @error 'Invalid $iterations value of `#{meta.inspect($iterations)}` for the ' +
          '[ fade() ] mixin.';
    }
  }

  @if not
    $anim-dir or
    $anim-dir ==
    'none' or
    $anim-dir ==
    'no' or
    $anim-dir ==
    'n/a' or
    $anim-dir ==
    'n' or
    $anim-dir ==
    'default' or
    $anim-dir ==
    'def' or
    $anim-dir ==
    'normal' or
    $anim-dir ==
    'nor'
  {
    $anim-dir: null;
  } @else if
    $anim-dir ==
    'reverse' or
    $anim-dir ==
    'rev' or
    $anim-dir ==
    'rvs' or
    $anim-dir ==
    'r'
  {
    $anim-drection: reverse;
  } @else if $anim-dir == 'alternate' or $anim-dir == 'alt' or $anim-dir == 'a'
  {
    $anim-dir: alternate;
  } @else if
    $anim-dir ==
    'alternate-reverse' or
    $anim-dir ==
    'alternate reverse' or
    $anim-dir ==
    'alternatereverse' or
    $anim-dir ==
    'alt-rev' or
    $anim-dir ==
    'alt rev' or
    $anim-dir ==
    'altrev' or
    $anim-dir ==
    'alt-rvs' or
    $anim-dir ==
    'alt rvs' or
    $anim-dir ==
    'altrvs' or
    $anim-dir ==
    'a-r' or
    $anim-dir ==
    'ar'
  {
    $anim-dir: alternate-reverse;
  } @else {
    @error 'Invalid animation-direction value of `#{$anim-dir}` for the ' +
        '[ fade() ] mixin';
  }

  @if not
    $timing-func or
    $timing-func ==
    'none' or
    $timing-func ==
    'no' or
    $timing-func ==
    'n' or
    $timing-func ==
    'def' or
    $timing-func ==
    'default' or
    $timing-func ==
    'd'
  {
    // Take all potential values the user might pass to keep the default setting
    // and ensure that the timing function remains at that default
    @if $in-or-out {
      $timing-func: cubic-bezier(0.39, 0.575, 0.565, 1);
    } @else {
      $timing-func: if(
        (not $direction),
        ease-out,
        cubic-bezier(0.25, 0.46, 0.45, 0.94)
      );
    }
  }

  @if not $anim-num {
    $anim-num: null;
  } @else {
    $anim-suffix: string.insert(
      $anim-suffix,
      '--#{$anim-num}',
      string.length($anim-suffix) + 1
    );
  }

  animation: fade#{$anim-suffix} #{$timing} #{$timing-func} #{$delay} #{$iterations}
    #{$anim-dir} both;

  @if $is-fwd-or-bck {
    transform: translate3d(0, 0, 0);
    transform-style: preserve-3d;
  }

  @at-root {
    @keyframes fade#{$anim-suffix} {
      0% {
        opacity: $opacity-val-1;
        @if $direction {
          transform: $trans-val-1;
        }
      }

      100% {
        opacity: $opacity-val-2;
        @if $direction {
          transform: $trans-val-2;
        }
      }
    }
  }
}
