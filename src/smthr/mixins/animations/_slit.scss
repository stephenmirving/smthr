@use 'sass:meta';
@use 'sass:list';
@use 'sass:math';
@use 'sass:string';
@use '../utilities/only-moz' as *;
@use '../../functions/is-alias' as *;

/// Generates an animation that appears to either slit an element in or out on
/// its axis.
///
/// @param {String|Boolean} $in-or-out [in] - Determines if the element will
/// appear to slit `in` (or true, `i`) or `out` (or false, `o`).
/// @param {String} $axis [right] - The axis on which the animation turns
/// the element.
/// @param {Time} $timing [0.5s] - The duration of the animation (s or ms)
/// @param {Time} $delay [null] - The optional delay time for the animation.
/// @param {Number|String} $iterations [null] - The number of iterations
/// to complete. If the value passed is not a number, it will be set to infinite
/// @param {Keyword} $anim-dir [null] - Sets the animation-direction property.
/// Can be `normal`, `reverse`, `alternate`, or `alternate-reverse`. Default of
/// null assumes the CSS property default of `normal`.
/// @param {Timing-Function} $timing-func [null] - The timing function for
/// the animation. A default of null will apply a timing-function of ease-out
/// on a slit-in animation and ease-in on a slit-out animation.
/// @param {Number|String} $anim-num [null] - If the mixin is used more than
/// once with different values in a stylesheet, you can pass a number or string
/// to the mixin here that gets appeneded to end of the animation name so that
/// the animations do not overwrite each other.
///
/// @group Animations
/// @require {Function} is-alias
/// @require {Mixin} only-moz
///
/// @throw Invalid $in-or-out value
/// @throw Invalid $axis value
/// @throw Invalid $timing value
/// @throw Invalid $delay value
/// @throw Invalid $iterations value
/// @throw Invalid $anim-dir value
@mixin slit(
  $in-or-out: in,
  $axis: horizontal,
  $timing: 0.5s,
  $delay: null,
  $iterations: null,
  $anim-dir: null,
  $timing-func: null,
  $anim-num: null
) {
  // Default tranform values for slit in on an $axis of 'horizontal'
  $trans-val-1: translateZ(-800px) rotateX(90deg);
  $trans-val-2: translateZ(-160px) rotateX(87deg);
  $trans-val-3: translateZ(0) rotateX(0);
  $opacity-val-1: 0;
  $opacity-val-2: 1;
  $temp-val: null;
  $is-diagonal: false;

  @if $in-or-out and meta.type-of($in-or-out) == 'string' {
    $in-or-out: string.to-lower-case($in-or-out);
  }

  @if $anim-dir and meta.type-of($anim-dir) == 'string' {
    $anim-dir: string.to-lower-case($anim-dir);
  }

  @if $delay and meta.type-of($delay) == 'string' {
    $delay: string.to-lower-case($delay);
  }

  @if $timing-func and meta.type-of($timing-func) == 'string' {
    $timing-func: string.to-lower-case($timing-func);
  }

  @if $in-or-out == true or $in-or-out == 'in' or $in-or-out == 'i' {
    $in-or-out: true;
  } @else if not $in-or-out or $in-or-out == 'out' or $in-or-out == 'o' {
    $in-or-out: false;
  } @else {
    @error 'Invalid $in-or-out value of `#{meta.inspect($in-or-out)}` for the ' +
        '[ slit() ] mixin.';
  }

  @if $axis {
    @if meta.type-of($axis) == 'string' {
      $axis: string.to-lower-case($axis);
    }

    @if $axis == 'vertical' or $axis == 'vert' or $axis == 'ver' or $axis == 'v'
    {
      $trans-val-1: translateZ(-800px) rotateY(90deg);
      $trans-val-2: translateZ(-160px) rotateY(87deg);
      $trans-val-3: translateZ(0) rotateY(0);
    } @else if
      $axis ==
      'diagonal-1' or
      $axis ==
      'diagonal1' or
      $axis ==
      'diagonal' or
      $axis ==
      'diag-1' or
      $axis ==
      'diag1' or
      $axis ==
      'diag' or
      $axis ==
      'd' or
      $axis ==
      'd1'
    {
      $trans-val-1: translateZ(-800px) rotate3d(1, 1, 0, 90deg);
      $trans-val-2: translateZ(-160px) rotate3d(1, 1, 0, 87deg);
      $trans-val-3: translateZ(0) rotate3d(1, 1, 0, 0);
      $is-diagonal: true;
    } @else if $axis == 'diagonal2' or $axis == 'diagonal-2' or $axis == 'diag2' or $axis=='diag-2' or $axis == 'd-2' or $axis == 'd2' {
      $trans-val-1: translateZ(-800px) rotate3d(-1, 1, 0, -90deg);
      $trans-val-2: translateZ(-160px) rotate3d(-1, 1, 0, -87deg);
      $trans-val-3: translateZ(0) rotate3d(-1, 1, 0, 0);
      $is-diagonal: true;
    } @else if
      $axis !=
      'horizontal' and
      $axis !=
      'horiz' and
      $axis !=
      'horz' and
      $axis !=
      'h'
    {
      @error 'Invalid axis of `#{meta.inspect($axis)}` chosen for the [ slit() ] mixin.';
    }
  } @else {
    @error 'You must choose an axis for the [ slit() ] mixin.';
  }

  // If animation slits out rather than in, swap and reverse the necessary values
  @if not $in-or-out {
    $temp-val: $trans-val-1;
    $trans-val-1: $trans-val-3;
    $trans-val-3: $temp-val;
    $opacity-val-1: 1;
    $opacity-val-2: 0;
  }

  @if meta.type-of($timing) != 'number' {
    @error 'Invalid $timing value of `#{$timing}` for the [ slit() ] ' +
        'mixin. The timing property must be a number.';
  } @else if math.is-unitless($timing) {
    // If no there is no unit for $timing, assume seconds
    $timing: $timing * 1s;
  } @else if not list.index('s' 'ms', math.unit($timing)) {
    @error 'Invalid $timing value of `#{$timing}` for the [ slit() ] ' +
        'mixin. The timing property must be in either s or ms units.';
  } @else if $timing % 10 == 0ms {
    // If time in ms would be shorter as seconds, convert it
    $timing: math.div($timing, 1000ms) * 1s;

    // Get rid of possible leading zero in front of decimal place
    @if string.slice($timing + '', 1, 2) == '0.' {
      $timing: string.unquote(string.slice($timing + '', 2));
    }
  }

  @if not
    $delay or
    $delay ==
    0 or
    $delay ==
    0s or
    $delay ==
    0ms or
    is-alias('none', $delay)
  {
    $delay: null;
  }
  @if $delay {
    @if meta.type-of($delay) != 'number' {
      @error 'Invalid delay value of `#{meta.inspect($delay)}` for the [ slit() ]' +
          ' mixin. The delay property must be a number.';
    } @else if math.is-unitless($delay) {
      $delay: $delay * 1s;
    } @else if not list.index('s' 'ms', math.unit($delay)) {
      @error 'Invalid delay value of `#{meta.inspect($delay)}` for the [ slit() ]' +
          ' mixin. The delay property must be in either s or ms units.';
    } @else if $delay % 10 == 0ms {
      $delay: math.div($delay, 1000ms) * 1s;

      @if string.slice($delay + '', 1, 2) == '0.' {
        $delay: #{string.slice($delay + '', 2)};
      }
    }
  }

  @if $iterations {
    @if meta.type-of($iterations) == 'string' {
      $iterations: string.to-lower-case($iterations);
    }

    @if is-alias('infinite', $iterations) {
      $iterations: infinite;
    } @else if (
        (
          math.is-unitless($iterations) and
          meta.type-of($iterations) == 'number'
        ) or
          $iterations ==
          initial or
          $iterations ==
          inherit
      )
    {
      $iterations: $iterations;
    } @else {
      @error 'Invalid $iterations value of `#{meta.inspect($iterations)}`' +
          ' for the [ slit() ] mixin.';
    }
  } @else {
    $iteratons: null;
  }

  @if not
    $anim-dir or
    is-alias('none', $anim-dir) or
    is-alias('normal', $anim-dir)
  {
    $anim-dir: null;
  } @else if is-alias('reverse' $anim-dir) {
    $anim-drection: reverse;
  } @else if is-alias('alternate' $anim-dir) {
    $anim-dir: alternate;
  } @else if is-alias('alternate-reverse' $anim-dir) {
    $anim-dir: alternate-reverse;
  } @else {
    @error 'Invalid animation-direction value of `#{$anim-dir}`' +
        ' for the [ slit() ] mixin';
  }

  @if not
    $timing-func or
    is-alias('none', $timing-func) or
    is-alias('normal', $timing-func)
  {
    // Take all potential values the user might pass to keep the default setting
    // and ensure that the timing function remains at that default
    $timing-func: if(($in-or-out), ease-out, ease-in);
  }

  @if not $anim-num {
    $anim-num: null;
  } @else {
    $anim-num: '-#{$anim-num}';
  }

  transform: translate3d(0, 0, 0);
  transform-style: preserve-3d;
  animation: slit#{$anim-num} #{$timing} #{$timing-func} #{$delay} #{$iterations}
    #{$anim-dir} both;

  @include only-moz {
    backface-visibility: hidden;
  }

  @at-root {
    @keyframes slit#{$anim-num} {
      0% {
        @if $in-or-out and $is-diagonal {
          animation-timing-function: ease-in;
        }

        opacity: $opacity-val-1;
        transform: $trans-val-1;
      }

      54% {
        @if  $in-or-out and $is-diagonal {
          animation-timing-function: ease-in-out;
        }

        opacity: $opacity-val-2;
        transform: $trans-val-2;
      }

      100% {
        @if $in-or-out and $is-diagonal {
          animation-timing-function: ease-out;
        }
        @if not $in-or-out {
          opacity: 0;
        }

        transform: $trans-val-3;
      }
    }
  }
}
