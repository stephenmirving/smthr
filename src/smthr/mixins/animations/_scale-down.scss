@use 'sass:meta';
@use 'sass:list';
@use 'sass:math';
@use 'sass:string';
@use '../../functions/is-alias' as *;

/// Animates an element by scaling it down.
///
/// @param {String} $direction [top] - The direction the element will appear
/// to be scaling down from.
/// @param {Time} $timing [0.4s] - The duration of the animation (s or ms).
/// @param {Time} $delay [null] - The optional delay time for the animation.
/// @param {String} $axis [null] - The animation can optionally start along an
/// axis line. This value can be null (or false, `no`, `n`), `horizontal` (or
/// `horiz`, `horz`, `hor`, `h`) or `vertical` (or `vert`, `ver`, `v`). Along
/// the horizontal axis, only `left`, `right`, or `center` $direction values are
/// valid. Along the vertical axis, only `top`, `bottom`, and `center`
/// $direction values are valid.
/// @param {Number|String} $iterations [null] - The number of iterations
/// for the animation to complete. If the value passed is not a number, it will
/// be set to infinite.
/// @param {Keyword} $anim-dir [null] - Sets the animation-direction property.
/// Can be `normal`, `reverse`, `alternate`, or `alternate-reverse`. Default of
/// null assumes the CSS property default of `normal`.
/// @param {Timing-Function} $timing-func [null] - The timing function for the
/// animation. Default value of null will apply the recommended function for
/// this animation of `cubic-bezier(0.25, 0.46, 0.45, 0.94)`.
/// @param {Number|String} $anim-num [null] - If the mixin is used more than
/// once with different values in a stylesheet, you can pass a number or string
/// to the mixin here that gets appeneded to end of the animation name so that
/// the animations do not overwrite each other.
///
/// @group Animations
/// @require {Function} is-alias
///
/// @throw Invalid $direction value
/// @throw Invalid $axis value
/// @throw Invalid $timing value
/// @throw Invalid $delay value
/// @throw Invalid $anim-dir value
@mixin scale-down(
  $direction: 'center',
  $timing: 0.4s,
  $delay: null,
  $axis: null,
  $iterations: null,
  $anim-dir: null,
  $timing-func: null,
  $anim-num: null
) {
  // Default value for the 'center' direction
  $trans-val-1: scale(1);
  $trans-val-2: scale(0.5);
  $trans-origin-val: null;
  $anim-suffix: '-to';

  @if $direction and meta.type-of($direction) == 'string' {
    $direction: string.to-lower-case($direction);
  }

  @if $delay and meta.type-of($delay) == 'string' {
    $delay: string.to-lower-case($delay);
  }

  @if $axis and meta.type-of($axis) == 'string' {
    $axis: string.to-lower-case($axis);
  }

  @if $anim-dir and meta.type-of($anim-dir) == 'string' {
    $anim-dir: string.to-lower-case($anim-dir);
  }

  @if $timing-func and meta.type-of($timing-func) == 'string' {
    $timing-func: string.to-lower-case($timing-func);
  }

  @if $direction == 'top' or $direction == 't' {
    $trans-origin-val: 50% 0%;
    $direction: 'top';
  } @else if
    $direction ==
    'top-right' or
    $direction ==
    'topright' or
    $direction ==
    'right-top' or
    $direction ==
    'righttop' or
    $direction ==
    't-r' or
    $direction ==
    'tr' or
    $direction ==
    'r-t' or
    $direction ==
    'rt'
  {
    $trans-origin-val: 100% 0;
    $direction: 'top-right';
  } @else if is-alias('right', $direction) {
    $trans-origin-val: 100% 50%;
    $direction: 'right';
  } @else if
    $direction ==
    'bottom-right' or
    $direction ==
    'bottomright' or
    $direction ==
    'right-bottom' or
    $direction ==
    'rightbottom' or
    $direction ==
    'b-r' or
    $direction ==
    'br' or
    $direction ==
    'r-b' or
    $direction ==
    'r-b'
  {
    $transform-origin-val: 100% 100%;
    $direction: 'bottom-right';
  } @else if $direction == 'bottom' or $direction == 'btm' or $direction == 'b'
  {
    $transform-origin-val: 50% 100%;
    $direction: 'bottom';
  } @else if
    $direction ==
    'bottom-left' or
    $direction ==
    'bottomleft' or
    $direction ==
    'left-bottom' or
    $direction ==
    'leftbottom' or
    $direction ==
    'b-l' or
    $direction ==
    'bl' or
    $direction ==
    'l-b' or
    $direction ==
    'lb'
  {
    $transform-origin-val: 0% 100%;
    $direction: 'bottom-left';
  } @else if is-alias('left', $direction) {
    $transform-origin-val: 0% 50%;
    $direction: 'left';
  } @else if
    $direction ==
    'top-left' or
    $direction ==
    'topleft' or
    $direction ==
    'left-top' or
    $direction ==
    'lefttop' or
    $direction ==
    't-l' or
    $direction ==
    'tl' or
    $direction ==
    'l-t' or
    $direction ==
    'lt'
  {
    $transform-origin-val: 0% 0%;
    $direction: 'top-left';
  } @else if
    $direction ==
    'center' or
    $direction ==
    'centre' or
    $direction ==
    'cent' or
    $direction ==
    'cen' or
    $direction ==
    'c'
  {
    $direction: 'center';
  } @else {
    @error 'Invalid direction value of `#{meta.inspect($direction)}` for the ' +
        '`scale-down` mixin.';
  }

  @if $axis and $axis != 'none' and $axis != 'no' and $axis != 'n' {
    @if $axis == 'vertical' or $axis == 'vert' or $axis == 'ver' or $axis == 'v'
    {
      $trans-val-1: scaleY(1);
      $trans-val-2: scaleY(0.3);
      $anim-suffix: '-vertically-to';

      @if $direction !=
        'top' and
        $direction !=
        'bottom' and
        $direction !=
        'center'
      {
        @error 'You have chosen an axis value of `vertical` that cannot be ' +
            'used with the direction value of `#{meta.inspect($direction)}` ' +
            'for the `scale-down` mixin. A vertical axis must have direction ' +
            'value of either `top`, `bottom`, or `center`.';
      } @else if $direction == 'top' {
        $trans-origin-val: 100% 0%;
      } @else if $direction == 'bottom' {
        $trans-origin-val: 0% 100%;
      }
    } @else if
      (
        $axis ==
          'horizontal' or
          $axis ==
          'horz' or
          $axis ==
          'hor' or
          $axis ==
          'h'
      )
    {
      $trans-val-1: scaleX(1);
      $trans-val-2: scaleX(0.3);
      $anim-suffix: '-horizontally-to';

      @if $direction !=
        'left' and
        $direction !=
        'right' and
        $direction !=
        'center'
      {
        @error 'You have chosen an axis value of `horizontal` that cannot be ' +
            'used with the direction value of `#{meta.inspect($direction)}` for the ' +
            '`scale-down` mixin. A horizontal axis must have direction value of ' +
            'either `left`, `right`, or `center`.';
      } @else if $direction == 'left' {
        $trans-origin-val: 0% 0%;
      } @else if $direction == 'right' {
        $trans-origin-val: 100% 100%;
      }
    } @else {
      @error 'Invalid $axis value of `#{meta.inspect($axis)} for the `scale-down` mixin.';
    }
  }

  @if meta.type-of($timing) != 'number' {
    @error 'Invalid $timing value of `#{$timing}` for the `scale-down` ' +
        'mixin. The timing property must be a number.';
  } @else if math.is-unitless($timing) {
    // If no there is no unit for $timing, assume seconds
    $timing: $timing * 1s;
  } @else if not list.index('s' 'ms', math.unit($timing)) {
    @error 'Invalid $timing value of `#{$timing}` for the `scale-down` ' +
        'mixin. The timing property must be in either s or ms units.';
  } @else if math.unit($timing) == 'ms' and $timing % 50 == 0ms {
    // If time in ms would be shorter as seconds, convert it
    $timing: math.div($timing, 1000ms) * 1s;

    // Get rid of possible leading zero in front of decimal place
    @if string.slice($timing + '', 1, 2) == '0.' {
      $timing: string.unquote(string.slice($timing + '', 2));
    }
  }

  @if not
    $delay or
    $delay ==
    0 or
    $delay ==
    0s or
    $delay ==
    0ms or
    is-alias('none', $delay)
  {
    $delay: null;
  }
  @if $delay {
    @if meta.type-of($delay) != 'number' {
      @error 'Invalid delay value of `#{meta.inspect($delay)}` for the `scale-down` ' +
          'mixin. The delay property must be a number.';
    } @else if math.is-unitless($delay) {
      $delay: $delay * 1s;
    } @else if not list.index('s' 'ms', math.unit($delay)) {
      @error 'Invalid delay value of `#{meta.inspect($delay)}` for the `scale-down` ' +
          'mixin. The delay property must be in either s or ms units.';
    } @else if math.unit($delay) == 'ms' and $delay % 50 == 0ms {
      $delay: math.div($delay, 1000ms) * 1s;

      @if string.slice($delay + '', 1, 2) == '0.' {
        $delay: #{string.slice($delay + '', 2)};
      }
    }
  }

  @if $iterations {
    @if meta.type-of($iterations) == 'string' {
      $iterations: string.to-lower-case($iterations);
    }

    @if is-alias('infinite', $iterations) {
      $iterations: infinite;
    } @else if
      (
        (
            math.is-unitless($iterations) and
              meta.type-of($iterations) ==
              'number'
          ) or
          $iterations ==
          initial or
          $iterations ==
          inherit
      )
    {
      $iterations: $iterations;
    } @else {
      @error 'Invalid $iterations value of `#{meta.inspect($iterations)}` for the ' +
          '`scale-down` mixin.';
    }
  } @else {
    $iterations: null;
  }

  @if not
    $anim-dir or
    is-alias('none', $anim-dir) or
    is-alias('normal', $anim-dir)
  {
    $anim-dir: null;
  } @else if is-alias('reverse' $anim-dir) {
    $anim-drection: reverse;
  } @else if is-alias('alternate' $anim-dir) {
    $anim-dir: alternate;
  } @else if is-alias('alternate-reverse' $anim-dir) {
    $anim-dir: alternate-reverse;
  } @else {
    @error 'Invalid animation-direction value of `#{$anim-dir}`' +
        ' for the `scale-down` mixin';
  }

  @if not
    $timing-func or
    is-alias('none', $timing-func) or
    is-alias('normal', $timing-func)
  {
    // Take all potential values the user might pass to keep the default setting
    // and ensure that the timing function remains at that default
    $timing-func: cubic-bezier(0.25, 0.46, 0.45, 0.94);
  }

  $anim-suffix: string.insert(
    $anim-suffix,
    '-#{$direction}',
    string.length($anim-suffix) + 1
  );

  @if not $anim-num {
    $anim-num: null;
  } @else {
    $anim-suffix: string.insert(
      $anim-suffix,
      '--#{$anim-num}',
      string.length($anim-suffix) + 1
    );
  }

  animation: scale-down#{$anim-suffix} #{$timing} #{$timing-func} #{$delay} #{$iterations}
    #{$anim-dir} both;

  @at-root {
    @keyframes scale-down#{$anim-suffix} {
      0% {
        transform: $trans-val-1;
        @if $direction != 'center' {
          transform-origin: $trans-origin-val;
        }
      }

      100% {
        transform: $trans-val-2;
        @if $direction != 'center' {
          transform-origin: $trans-origin-val;
        }
      }
    }
  }
}
