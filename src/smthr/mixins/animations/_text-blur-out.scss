@use 'sass:meta';
@use 'sass:list';
@use 'sass:math';
@use 'sass:string';

/// Animates text from focused in, to blurred out, to invisible
///
/// @param {String} $style [out] - The style of the blur-out effect. Can be
/// `out` (or `o`, null, `none`, `no`, `n` `default`, or `def`), `expand`
/// (or `exp`, or 'e'), `forward` (or `fwd` or `f`), `contract` (or `cont` or
/// `c`), or `backward` (or `back`, `bck`, or `b`).
/// @param {Time} $timing [1s] - The duration of the animation (s or ms).
/// @param {Time} $delay [null] - The optional delay time for the animation.
/// @param {Number|String} $iterations [null] - The number of iterations
/// for the animation to complete. If the value passed is not a number, it will
/// be set to infinite.
/// @param {Keyword} $anim-dir [null] - Sets the animation-direction
/// property. Can be `normal`, `reverse`, `alternate`, or `alternate-reverse`.
/// Default of null assumes the default of `normal`.
/// @param {Timing-Function} $timing-func [null] - The timing function for the
/// animation. If no specific function is passed, the mixin will choose the
/// best custom timing function for the given style.
/// @param {Number|String} $anim-num [null] - If the mixin is used more than
/// once with different values in a stylesheet, you can pass a number or string
/// to the mixin here that gets appeneded to end of the animation name so that
/// the animations do not overwrite each other.
///
/// @group Animations
/// @throw Invalid $style value
/// @throw Invalid $timing value
/// @throw Invalid $delay value
/// @throw Invalid $iterations value
/// @throw Invalid $anim-dir value
@mixin text-blur-out(
  $style: in,
  $timing: 1s,
  $delay: null,
  $iterations: null,
  $anim-dir: null,
  $timing-func: null,
  $anim-num: null
) {
  @if $style and meta.type-of($style) == 'string' {
    $style: string.to-lower-case($style);
  }

  @if $delay and meta.type-of($delay) == 'string' {
    $delay: string.to-lower-case($delay);
  }

  @if $anim-dir and meta.type-of($anim-dir) == 'string' {
    $anim-dir: string.to-lower-case($anim-dir);
  }

  @if $timing-func and meta.type-of($timing-func) == 'string' {
    $timing-func: string.to-lower-case($timing-func);
  }

  @if not $timing-func {
    @if (
      not
        $style or
        $style ==
        'expand' or
        $style ==
        'exp' or
        $style ==
        'e' or
        $style ==
        'forward' or
        $style ==
        'fwd' or
        $style ==
        'f'
    ) {
      $timing-func: cubic-bezier(0.25, 0.46, 0.45, 0.94);
    } @else {
      $timing-func: cubic-bezier(0.55, 0.085, 0.68, 0.53);
    }
  }

  @if meta.type-of($timing) != 'number' {
    @error 'Invalid $timing value of [ #{meta.inspect($timing)} ] for the ' +
        '`text-blur-out` mixin. The timing property must be a number.';
  } @else if math.is-unitless($timing) {
    // If no there is no unit for $timing, assume seconds
    $timing: $timing * 1s;
  } @else if not list.index('s' 'ms', math.unit($timing)) {
    @error 'Invalid $timing value of [ #{meta.inspect($timing)} ] for the ' +
        '`text-blur-out` mixin. The timing property must be in either ' +
        's or ms units.';
  } @else if $timing % 10 == 0ms {
    // If time in ms would be shorter as seconds, convert it
    $timing: math.div($timing, 1000ms) * 1s;

    // Get rid of possible leading zero in front of decimal place
    @if string.slice($timing + '', 1, 2) == '0.' {
      $timing: string.unquote(string.slice($timing + '', 2));
    }
  }

  @if $delay ==
    0 or
    $delay ==
    0s or
    $delay ==
    0ms or
    $delay ==
    'none' or
    $delay ==
    'no' or
    $delay ==
    'n' or
    $delay ==
    'n/a' or
    $delay ==
    nil or not
    $delay
  {
    $delay: null;
  }
  @if $delay {
    @if meta.type-of($delay) != 'number' {
      @error 'Invalid delay value of [ #{meta.inspect($delay)} ] for the ' +
          '`text-blur-out` mixin. The delay property must be a number.';
    } @else if math.is-unitless($delay) {
      $delay: $delay * 1s;
    } @else if not list.index('s' 'ms', math.unit($delay)) {
      @error 'Invalid delay value of [ #{meta.inspect($delay)} ] for the ' +
          '`text-blur-out` mixin. The delay property must be in either ' +
          's or ms units.';
    } @else if $delay % 10 == 0ms {
      $delay: math.div($delay, 1000ms) * 1s;

      @if string.slice($delay + '', 1, 2) == '0.' {
        $delay: #{string.slice($delay + '', 2)};
      }
    }
  }

  @if $iterations {
    @if meta.type-of($iterations) == 'string' {
      $iterations: string.to-lower-case($iterations);
    }

    @if $iterations == 'infinite' or $iterations == 'inf' or $iterations == 'i'
    {
      $iterations: infinite;
    } @else if
      (
        math.is-unitless($iterations) and meta.type-of($iterations) == 'number'
      ) or
      $iterations ==
      initial or
      $iterations ==
      inherit
    {
      $iterations: $iterations;
    } @else {
      @error 'Invalid iteration-count value of [ #{meta.inspect($iterations)} ] for ' +
          'the `text-blur-out` mixin.';
    }
  } @else {
    $iterations: null;
  }

  @if not
    $anim-dir or
    $anim-dir ==
    'none' or
    $anim-dir ==
    'no' or
    $anim-dir ==
    'n/a' or
    $anim-dir ==
    'n' or
    $anim-dir ==
    'default' or
    $anim-dir ==
    'def' or
    $anim-dir ==
    'normal' or
    $anim-dir ==
    'nor'
  {
    $anim-dir: null;
  } @else if $anim-dir == 'reverse' or $anim-dir == 'rev' or $anim-dir == 'r' {
    $anim-drection: reverse;
  } @else if $anim-dir == 'alternate' or $anim-dir == 'alt' or $anim-dir == 'a'
  {
    $anim-dir: alternate;
  } @else if
    $anim-dir ==
    'alternate-reverse' or
    $anim-dir ==
    'alternatereverse' or
    $anim-dir ==
    'alt-rev' or
    $anim-dir ==
    'altrev' or
    $anim-dir ==
    'a-r' or
    $anim-dir ==
    'ar'
  {
    $anim-dir: alternate-reverse;
  } @else {
    @error 'Invalid animation-direction value of [ #{meta.inspect($anim-dir)} ]' +
        ' for the `text-blur-out` mixin';
  }

  animation: txt-blur-out#{$anim-num} #{$timing} #{$timing-func} #{$delay} #{$iterations}
    #{$anim-dir} both;

  @at-root {
    @keyframes txt-blur-out#{$anim-num} {
      0% {
        filter: blur(0.01px);
        @if $style ==
          'backward' or
          $style ==
          'bck' or
          $style ==
          'back' or
          $style ==
          'b' or
          $style ==
          'f' or
          $style ==
          'fwd' or
          $style ==
          'forward'
        {
          transform: translateZ(0);
        }
      }

      100% {
        filter: blur(12px) opacity(0);
        @if $style == 'contract' or $style == 'cont' or $style == 'c' {
          letter-spacing: -0.5em;
        } @else if
          $style ==
          'backward' or
          $style ==
          'bck' or
          $style ==
          'back' or
          $style ==
          'b'
        {
          letter-spacing: -0.5em;
          transform: translateZ(-500px);
        } @else if $style == 'expand' or $style == 'exp' or $style == 'e' {
          letter-spacing: 1em;
        } @else if $style == 'forward' or $style == 'fwd' or $style == 'f' {
          letter-spacing: 1em;
          transform: translateZ(300px);
        }
      }
    }
  }
}
