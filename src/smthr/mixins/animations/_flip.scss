@use 'sass:meta';
@use 'sass:string';
@use 'sass:list';
@use 'sass:math';
@use '../utilities/only-moz' as *;
@use '../../functions/is-alias' as *;

/// Generates an animation that flips an element over. The element this mixin is
/// applied to must have a front-face and a back-face child element. It is
/// recommended that you use this mixin in conjunction with the
/// `animation-front-face` and 'animation-back-face' mixins for element 'face'
/// child elements and the 'animation-stage` mixin for the parent element.
///
/// @param {String} $direction [up] - The direction the scale effect causes
/// the element to seem to be moving towards
/// @param {String} $axis [horizontal] - The axis the element will flip over
/// @param {Time} $duration [0.5s] - The duration of the animation (s or ms)
/// @param {Time} $delay [null] - The optional delay time for the animation.
/// @param {Number|String} $iterations [null] - The number of iterations
/// to complete. If the value passed is not a number, it will be set to infinite
/// @param {Keyword} $anim-dir [null] - Sets the animation-direction property.
/// Can be `normal`, `reverse`, `alternate`, or `alternate-reverse`. Default of
/// null assumes the CSS property default of `normal`.
/// @param {Timing-Function} $timing-func [null] - The timing function for the
/// animation. A null value passed here will default to the recommended timing
/// function for this animation.`
/// @param {Number|String} $anim-num [null] - If the mixin is used more than
/// once with different values in a stylesheet, you can pass a number or string
/// to the mixin here that gets appeneded to end of the animation name so that
/// the animations do not overwrite each other.
///
/// @group Animations
/// @require {mixin} only-moz
/// @require {function} is-alias
/// @require {Map} $map-alias-resolutions
///
/// @throw Invalid $direction value
/// @throw Invalid $axis value
/// @throw Invalid $duration value
/// @throw Invalid $delay value
/// @throw Invalid $iterations value
/// @throw Invalid $anim-dir value
@mixin flip(
  $direction: 'up',
  $axis: 'horizontal',
  $duration: 0.5s,
  $delay: null,
  $iterations: null,
  $anim-dir: null,
  $timing-func: null,
  $anim-num: null
) {
  // Default tranform values for $direction of `top` and $axis of `horizontal`
  $trans-val-1: rotateX(0);
  $trans-val-2: rotateX(180deg);
  $anim-suffix: '';

  @if $anim-dir and meta.type-of($anim-dir) == 'string' {
    $anim-dir: string.to-lower-case($anim-dir);
  }

  @if $delay and meta.type-of($delay) == 'string' {
    $delay: string.to-lower-case($delay);
  }

  @if $timing-func and meta.type-of($timing-func) == 'string' {
    $timing-func: string.to-lower-case($timing-func);
  }

  @if $direction {
    $direction: string.to-lower-case($direction);

    @if is-alias('bottom', $direction) {
      $direction: 'down';
    } @else if is-alias('forwards', $direction) {
      $direction: 'forwards';
    } @else if is-alias('backwards', $direction) {
      $direction: 'backwards';
    } @else if is-alias('top', $direction) {
      $direction: 'up';
    } @else if is-alias('left', $direction) {
      $direction: 'left';
    } @else if is-alias('right', $direction) {
      $direction: 'right';
    } @else if is-alias('top left', $direction) {
      $direction: 'top-left';
    } @else if is-alias('top right', $direction) {
      $direction: 'top-right';
    } @else if is-alias('bottom right', $direction) {
      $direction: 'bottom-right';
    } @else if is-alias('bottom left', $direction) {
      $direction: 'bottom-left';
    } @else {
      @error 'Invalid direction of `#{meta.inspect($direction)}` chosen for ' +
          'the [ flip() ] mixin.';
    }
  } @else {
    @error 'You must provide a direction for the [ flip() ] mixin.';
  }

  @if $axis {
    $axis: string.to-lower-case($axis);

    @if is-alias('left-to-right', $axis) {
      $axis: 'horizontal';
      $anim-suffix: string.insert(
        $anim-suffix,
        '-horizontally',
        string.length($anim-suffix) + 1
      );
    } @else if is-alias('top-to-bottom', $axis) {
      $axis: 'vertical';
      $anim-suffix: string.insert(
        $anim-suffix,
        '-vertically',
        string.length($anim-suffix) + 1
      );
    } @else if is-alias('bottom-left-to-top-right', $axis) {
      $axis: 'diagonal1';
    } @else if is-alias('bottom-right-to-top-left', $axis) {
      $axis: 'diagonal2';
    } @else {
      @error 'Invalid axis of [ #{meta.inspect($axis)} ] chosen for the [ flip() ] mixin.';
    }
  } @else {
    @error 'You must choose an axis for the [ flip() ] mixin.';
  }

  @if $axis == 'diagonal1' or $axis == 'diagonal2' {
    $anim-suffix: string.insert(
      $anim-suffix,
      '-diagonally',
      string.length($anim-suffix) + 1
    );
  }

  @if $axis == 'horizontal' {
    @if $direction == 'down' {
      $trans-val-2: rotateX(-180deg);
    } @else if $direction == 'forwards' {
      $trans-val-1: translateZ(0) rotateX(0);
      $trans-val-2: translateZ(160px) rotateX(-180deg);
    } @else if $direction == 'backwards' {
      $trans-val-1: translateZ(0) rotateX(0);
      $trans-val-2: translateZ(-260px) rotateX(180deg);
    } @else if $direction != 'up' {
      @error 'Invalid $direction value of `#{meta.inspect($direction)}` with an $axis of ' +
          '`horizontal`. For a horizontal axis, you must choose a direction ' +
          'of either `top`, `down`, `backwards`, or `forwards`.';
    }
  } @else if $axis == 'vertical' {
    $trans-val-1: rotateY(0);
    $trans-val-2: rotateY(180deg);

    @if $direction == 'left' {
      $trans-val-2: rotateY(-180deg);
    } @else if $direction == 'forwards' {
      $trans-val-1: translateZ(0) rotateY(0);
      $trans-val-2: translateZ(160px) rotateY(180deg);
    } @else if $direction == 'backwards' {
      $trans-val-1: translateZ(0) rotateY(0);
      $trans-val-2: translateZ(160px) rotateY(180deg);
    } @else if $direction != 'right' {
      @error 'Invalid $direction value of `#{meta.inspect($direction)}` with an $axis of ' +
      '`vertical`. For a vertical axis, you must choose a direction ' +
      'of either `left`, `right`, `backwards`, or `forwards`.';
    }
  } @else if $axis == 'diagonal1' {
    $trans-val-1: rotate3d(1, 1, 0, 0);
    $trans-val-2: rotate3d(1, 1, 0, 180deg);

    @if $direction == 'bottom-left' {
      $trans-val-2: rotate3d(1, 1, 0, -180deg);
    } @else if $direction == 'forwards' {
      $trans-val-1: translateZ(0) rotate3d(1, 1, 0, 0);
      $trans-val-2: translateZ(160px) rotate3d(1, 1, 0, 180deg);
    } @else if $direction == 'backwards' {
      $trans-val-1: translateZ(0) rotate3d(1, 1, 0, 0);
      $trans-val-2: translateZ(-260px) rotate3d(1, 1, 0, -180deg);
    } @else if $direction != 'top-right' {
      @error 'Invalid $direction value of `#{meta.inspect($direction)}` with ' +
      'an $axis of `diagonal1`. For the diagonal1 axis, you must choose a direction ' +
      'of either `top-right`, `bottom-left`, `backwards`, or `forwards`.';
    }
  } @else if $axis == 'diagonal2' {
    $trans-val-1: rotate3d(-1, 1, 0, 0);
    $trans-val-2: rotate3d(-1, 1, 0, -180deg);

    @if $direction == 'bottom-right' {
      $trans-val-2: rotate3d(-1, 1, 0, 180deg);
    } @else if $direction == 'forwards' {
      $trans-val-1: translateZ(0) rotate3d(-1, 1, 0, 0);
      $trans-val-2: translateZ(160px) rotate3d(-1, 1, 0, 180deg);
    } @else if $direction == 'backwards' {
      $trans-val-1: translateZ(0) rotate3d(-1, 1, 0, 0);
      $trans-val-2: translateZ(-260px) rotate3d(-1, 1, 0, -180deg);
    } @else if $direction != 'top-left' {
      @error 'Invalid direction value of `#{meta.inspect($direction)}` with ' +
          'an $axis of [ diagonal2 ]. For the diagonal2 axis, you must choose ' +
          'a direction of either `top-left`, `bottom-right`, `backwards`, or `forwards`.';
    }
  }

  @if meta.type-of($duration) != 'number' {
    @error 'Invalid $duration value of `#{$duration}` for the ' +
        '[ flip() ] mixin. The duration property must be a number.';
  } @else if math.is-unitless($duration) {
    // If no there is no unit for $duration, unless $duration > 60, assume seconds
    $duration: if($duration > 60, $duration * 1ms, $duration * 1s);
  } @else if not list.index('s' 'ms', math.unit($duration)) {
    @error 'Invalid $duration value of `#{$duration}` for the ' +
        '[ flip() ] mixin. The duration property must be in either s or ms units.';
  } @else if $duration % 10 == 0ms {
    // If time in ms would be shorter as seconds, convert it
    $duration: math.div($duration, 1000ms) * 1s;
  }

  @if not
    $delay or
    $delay ==
    0 or
    $delay ==
    0s or
    $delay ==
    0ms or
    is-alias('none', $delay)
  {
    $delay: null;
  }
  @if $delay {
    @if meta.type-of($delay) != 'number' {
      @error 'Invalid delay value of `#{meta.inspect($delay)}` for the ' +
          '[ flip() ] mixin. The delay property must be a number.';
    } @else if math.is-unitless($delay) {
      // If no there is no unit for $delay, unless $delay > 60, assume seconds
      $delay: if($delay > 60, $delay * 1ms, $delay * 1s);
    } @else if not list.index('s' 'ms', math.unit($delay)) {
      @error 'Invalid delay value of `#{meta.inspect($delay)}` for the ' +
          '[ flip() ] mixin. The delay property must be in either s or ms units.';
    } @else if $delay % 10 == 0ms {
      // If time in ms would be shorter as seconds, convert it
      $delay: math.div($delay, 1000ms) * 1s;
    }
  }

  @if $iterations {
    @if meta.type-of($iterations) != 'string' {
      $iterations: string.to-lower-case($iterations);
    }

    @if is-alias('infinite', $iterations) {
      $iterations: infinite;
    } @else if
      (
        math.is-unitless($iterations) and meta.type-of($iterations) == 'number'
      ) or
      $iterations ==
      initial or
      $iterations ==
      inherit
    {
      $iterations: $iterations;
    } @else {
      @error 'Invalid $iterations value of `#{meta.inspect($iterations)}` ' +
          'for the [ flip() ] mixin.';
    }
  } @else {
    $iterations: null;
  }

  @if not
    $anim-dir or
    is-alias('none', $anim-dir) or
    is-alias('normal', $anim-dir)
  {
    $anim-dir: null;
  } @else if is-alias('reverse', $anim-dir) {
    $anim-drection: reverse;
  } @else if is-alias('alternate', $anim-dir) {
    $anim-dir: alternate;
  } @else if is-alias('alternate-reverse', $anim-dir) {
    $anim-dir: alternate-reverse;
  } @else {
    @error 'Invalid animation-direction value of `#{$anim-dir}` ' +
        'for the [ flip() ] mixin';
  }

  @if not $timing-func or is-alias('normal', $timing-func) {
    $timing-func: cubic-bezier(0.455, 0.03, 0.515, 0.955);
  }

  $anim-suffix: string.insert(
    $anim-suffix,
    '-#{$direction}',
    string.length($anim-suffix) + 1
  );

  @if not $anim-num {
    $anim-num: null;
  } @else {
    $anim-suffix: string.insert(
      $anim-suffix,
      '--#{$anim-num}',
      string.length($anim-suffix) + 1
    );
  }

  transform: translate3d(0, 0, 0);
  transform-style: preserve-3d;
  animation: flip#{$anim-suffix} #{$duration} #{$timing-func} #{$delay} #{$iterations}
    #{$anim-dir} both;

  @include only-moz {
    backface-visibility: hidden;
  }

  @at-root {
    @keyframes flip#{$anim-suffix} {
      0% {
        transform: $trans-val-1;
      }

      100% {
        transform: $trans-val-2;
      }
    }
  }
}
