@use 'sass:meta';
@use 'sass:list';
@use 'sass:math';
@use 'sass:string';

/// Adds bounciness to a given element, bouncing it in place.
///
/// @param {String} $direction [top] - The direction the animation will appear
/// to be bouncing towards.
/// @param {Time} $timing [.9s] The duration of the animation (s or ms).
/// @param {Time} $delay [null] - The optional delay time for the animation.
/// @param {Number|String} $iterations [null] - The number of iterations
/// to complete. If the value passed is not a number, it will be set to infinite
/// @param {Keyword} $anim-dir [null] - Sets the animation-direction property.
/// Can be `normal`, `reverse`, `alternate`, or `alternate-reverse`. Default of
/// null assumes the CSS property default of `normal`.
/// @param {Timing-Function} $timing-func [null] - The timing function for the
/// animation. The default of null applies the default timing function of ease.
/// @param {Number|String} $anim-num [null] - If the mixin is used more than
/// once with different values in a stylesheet, you can pass a number or string
/// to the mixin here that gets appeneded to end of the animation name so that
/// the animations do not overwrite each other.
///
/// @group Animations
/// @throw Invalid $direction value
/// @throw Invalid $timing value
/// @throw Invalid $delay value
/// @throw Invalid $iterations value
/// @throw Invalid $anim-dir value
@mixin bounciness(
  $direction: top,
  $timing: 0.9s,
  $delay: null,
  $iterations: null,
  $anim-dir: null,
  $timing-func: null,
  $anim-num: null
) {
  // Values for top $direction default
  $dir-val1: translateY(-45px);
  $dir-val2: translateY(-24px);
  $dir-val3: translateY(-12px);
  $dir-val4: translateY(-6px);
  $dir-val5: translateY(-4px);
  $dir-val6: translateY(0);

  @if string.to-lower-case($direction) ==
    'bottom' or
    string.to-lower-case($direction) ==
    'b'
  {
    $dir-val1: translateY(45px);
    $dir-val2: translateY(24px);
    $dir-val3: translateY(12px);
    $dir-val4: translateY(6px);
    $dir-val5: translateY(4px);
    $dir-val6: translateY(0);
  } @else if
    string.to-lower-case($direction) ==
    'left' or
    string.to-lower-case($direction) ==
    'l'
  {
    $dir-val1: translateX(-48px);
    $dir-val2: translateX(-26px);
    $dir-val3: translateX(-13px);
    $dir-val4: translateX(-6.5px);
    $dir-val5: translateY(-4px);
    $dir-val6: translateY(0);
  } @else if
    string.to-lower-case($direction) ==
    'right' or
    string.to-lower-case($direction) ==
    'r'
  {
    $dir-val1: translateX(48px);
    $dir-val2: translateX(26px);
    $dir-val3: translateX(13px);
    $dir-val4: translateX(6.5px);
    $dir-val5: translateY(4px);
    $dir-val6: translateY(0);
  } @else if
    string.to-lower-case($direction) !=
    'top' and
    string.to-lower-case($direction) !=
    't'
  {
    @error 'Invalid direction of [ #{meta.inspect($direction)} ] for the `bounciness` mixin.';
  }

  @if meta.type-of($timing) != 'number' {
    @error 'Invalid $timing value of [ #{meta.inspect($timing)} ] for the `bounciness` ' +
        'mixin. The timing property must be a number.';
  } @else if math.is-unitless($timing) {
    // If no there is no unit for $timing, assume seconds
    $timing: $timing * 1s;
  } @else if not list.index('s' 'ms', math.unit($timing)) {
    @error 'Invalid $timing value of [ #{meta.inspect($timing)} ] for the `bounciness` ' +
        'mixin. The timing property must be in either s or ms units.';
  } @else if $timing % 10 == 0ms {
    // If time in ms would be shorter as seconds, convert it
    $timing: math.div($timing, 1000ms) * 1s;

    // Get rid of possible leading zero in front of decimal place
    @if  string.slice($timing + '', 1, 2) == '0.' {
      $timing: string.slice($timing + '', 2);
    }
  }

  @if $delay ==
    0 or
    $delay ==
    0s or
    $delay ==
    0ms or
    $delay ==
    'none' or
    $delay ==
    'no' or
    $delay ==
    'n' or
    $delay ==
    'n/a' or
    $delay ==
    nil or not
    $delay
  {
    $delay: null;
  }
  @if $delay {
    @if meta.type-of($delay) != 'number' {
      @error 'Invalid delay value of [ #{meta.inspect($delay)} ] for the `bounciness` ' +
          'mixin. The delay property must be a number.';
    } @else if math.is-unitless($delay) {
      $delay: $delay * 1s;
    } @else if not list.index('s' 'ms', math.unit($delay)) {
      @error 'Invalid delay value of [ #{meta.inspect($delay)} ] for the `bounciness` ' +
          'mixin. The delay property must be in either s or ms units.';
    } @else if $delay % 10 == 0ms {
      $delay: math.div($delay, 1000ms) * 1s;

      @if string.slice($delay + '', 1, 2) == '0.' {
        $delay: #{string.slice($delay + '', 2)};
      }
    }
  }

  @if $iterations {
    @if $iterations == 'infinite' or $iterations == 'inf' or $iterations == 'i'
    {
      $iterations: infinite;
    } @else if (math.is-unitless($iterations) and meta.type-of($iterations) == 'number') or
      $iterations ==
      initial or
      $iterations ==
      inherit
    {
      $iterations: $iterations;
    } @else {
      @error 'Invalid iteration-count value of [ #{meta.inspect($iterations)} ] for the ' +
          '`bounciness` mixin.';
    }
  } @else {
    $iteratons: null;
  }

  @if (
    not
      $anim-dir or
      $anim-dir ==
      'none' or
      $anim-dir ==
      'no' or
      $anim-dir ==
      'n/a' or
      $anim-dir ==
      'n' or
      $anim-dir ==
      'default' or
      $anim-dir ==
      'def' or
      $anim-dir ==
      'normal' or
      $anim-dir ==
      'nor'
  ) {
    $anim-dir: null;
  } @else if $anim-dir == 'reverse' or $anim-dir == 'rev' or $anim-dir == 'r' {
    $anim-drection: reverse;
  } @else if $anim-dir == 'alternate' or $anim-dir == 'alt' or $anim-dir == 'a'
  {
    $anim-dir: alternate;
  } @else if
    $anim-dir ==
    'alternate-reverse' or
    $anim-dir ==
    'alternatereverse' or
    $anim-dir ==
    'alt-rev' or
    $anim-dir ==
    'altrev' or
    $anim-dir ==
    'a-r' or
    $anim-dir ==
    'ar'
  {
    $anim-dir: alternate-reverse;
  } @else {
    @error 'Invalid animation-direction value of [ #{meta.inspect($anim-dir)} ] for' +
        'the `bounciness` mixin';
  }

  @if not
    $timing-func or
    $timing-func ==
    true or
    $timing-func ==
    'none' or
    $timing-func ==
    'no' or
    $timing-func ==
    'n' or
    $timing-func ==
    'def' or
    $timing-func ==
    'default' or
    $timing-func ==
    'd'
  {
    // Take all potential values the user might pass to keep the default setting
    // and ensure that the timing function remains at that default
    $timing-func: null;
  }

  @if not $anim-num {
    $anim-num: null;
  }

  @if $anim-num {
    $anim-num: '-' + $anim-num;
  }

  animation: bounciness#{$anim-num} #{$timing} #{$timing-func} #{$delay} #{$iterations}
    both;

  @at-root {
    @keyframes bounciness#{$anim-num} {
      0% {
        opacity: 1;
        transform: #{$dir-val1};
        animation-timing-function: ease-in;
      }

      24% {
        opacity: 1;
      }

      25%,
      55%,
      75%,
      87% {
        transform: #{$dir-val6};
        animation-timing-function: ease-out;
      }

      40% {
        transform: #{$dir-val2};
        animation-timing-function: ease-in;
      }

      65% {
        transform: #{$dir-val3};
        animation-timing-function: ease-in;
      }

      82% {
        transform: #{$dir-val4};
        animation-timing-function: ease-in;
      }

      93% {
        transform: #{$dir-val5};
        animation-timing-function: ease-in;
      }

      100% {
        opacity: 1;
        transform: #{$dir-val6};
        animation-timing-function: ease-out;
      }
    }
  }
}
