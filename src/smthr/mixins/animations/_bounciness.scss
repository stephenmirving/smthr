@use 'sass:meta';
@use 'sass:list';
@use 'sass:math';
@use 'sass:string';
@use '../../functions/is-alias' as *;

/// Adds bounciness to a given element, bouncing it in place.
///
/// @param {String} $direction [top] - The direction the animation will appear
/// to be bouncing towards. Acceptable values are 'up', 'down', 'left', 'right'.
/// @param {Number} $duration [0.9s] The duration of the animation (`s` or `ms`).
/// @param {Number} $delay [null] - The optional delay time for the animation.
/// @param {Number | String} $iterations [null] - The number of iterations
/// to complete. If the value passed is not a number, it will be set to infinite
/// @param {String} $anim-dir [null] - Sets the animation-direction property.
/// Can be `normal`, `reverse`, `alternate`, or `alternate-reverse`. Default of
/// `null` assumes the CSS property default of `normal`.
/// @param {Timing-Function} $timing-func [null] - The timing function for the
/// animation. The default of null applies the default timing function of ease.
/// @param {Number | String} $anim-num [null] - If the mixin is used more than
/// once with different values in a stylesheet, you can pass a number or string
/// to the mixin here that gets appeneded to end of the animation name so that
/// the animations do not overwrite each other.
///
/// @group Animations
/// @require {function} is-alias
///
/// @throw Invalid $direction value
/// @throw Invalid $duration value
/// @throw Invalid $delay value
/// @throw Invalid $iterations value
/// @throw Invalid $anim-dir value
@mixin bounciness(
  $direction: top,
  $duration: 0.9s,
  $delay: null,
  $iterations: null,
  $anim-dir: null,
  $timing-func: null,
  $anim-num: null
) {
  // Values for top $direction default
  $dir-val1: translateY(-45px);
  $dir-val2: translateY(-24px);
  $dir-val3: translateY(-12px);
  $dir-val4: translateY(-6px);
  $dir-val5: translateY(-4px);
  $dir-val6: translateY(0);
  $anim-suffix: '-from-top';

  @if $direction and meta.type-of($direction) == 'string' {
    $direction: string.to-lower-case($direction);
  }

  @if $delay and meta.type-of($delay) == 'string' {
    $delay: string.to-lower-case($delay);
  }

  @if $anim-dir and meta.type-of($anim-dir) == 'string' {
    $anim-dir: string.to-lower-case($anim-dir);
  }

  @if $timing-func and meta.type-of($timing-func) == 'string' {
    $timing-func: string.to-lower-case($timing-func);
  }

  @if is-alias('bottom', $direction) {
    $dir-val1: translateY(45px);
    $dir-val2: translateY(24px);
    $dir-val3: translateY(12px);
    $dir-val4: translateY(6px);
    $dir-val5: translateY(4px);
    $dir-val6: translateY(0);
    $anim-suffix: '-from-bottom';
  } @else if is-alias('left', $direction) {
    $dir-val1: translateX(-48px);
    $dir-val2: translateX(-26px);
    $dir-val3: translateX(-13px);
    $dir-val4: translateX(-6.5px);
    $dir-val5: translateY(-4px);
    $dir-val6: translateY(0);
    $anim-suffix: '-from-left';
  } @else if is-alias('right', $direction) {
    $dir-val1: translateX(48px);
    $dir-val2: translateX(26px);
    $dir-val3: translateX(13px);
    $dir-val4: translateX(6.5px);
    $dir-val5: translateY(4px);
    $dir-val6: translateY(0);
    $anim-suffix: '-from-right';
  } @else if not is-alias('top', $direction) {
    @error 'Invalid direction of `#{meta.inspect($direction)}` for the ' +
        '[ bounciness() ] mixin.';
  }

  @if meta.type-of($duration) != 'number' {
    @error 'Invalid $duration value of `#{$duration}` for the [ bounciness() ] ' +
        'mixin. The duration property must be a number.';
  } @else if math.is-unitless($duration) {
    // If no there is no unit for $duration, unless $duration > 60, assume seconds
    $duration: if($duration > 60, $duration * 1ms, $duration * 1s);
  } @else if not list.index('s' 'ms', math.unit($duration)) {
    @error 'Invalid $duration value of `#{$duration}` for the [ bounciness() ] ' +
        'mixin. The duration property must be in either s or ms units.';
  } @else if $duration % 10 == 0ms {
    // If time in ms would be shorter as seconds, convert it
    $duration: math.div($duration, 1000ms) * 1s;

    // Get rid of possible leading zero in front of decimal place
    @if string.slice($duration + '', 1, 2) == '0.' {
      $duration: string.slice($duration + '', 2);
    }
  }

  @if not
    $delay or
    $delay ==
    0 or
    $delay ==
    0s or
    $delay ==
    0ms or
    is-alias('none', $delay)
  {
    $delay: null;
  }

  @if $delay {
    @if meta.type-of($delay) != 'number' {
      @error 'Invalid delay value of `#{meta.inspect($delay)}` for the ' +
          '[ bounciness() ] mixin. The delay property must be a number.';
    } @else if math.is-unitless($delay) {
      // If no there is no unit for $delay, unless $delay > 60, assume seconds
      $delay: if($delay > 60, $delay * 1ms, $delay * 1s);
    } @else if not list.index('s' 'ms', math.unit($delay)) {
      @error 'Invalid delay value of `#{meta.inspect($delay)}` for the ' +
          '[ bounciness() ] mixin. The delay property must be ' +
          'in either s or ms units.';
    } @else if $delay % 10 == 0ms {
      $delay: math.div($delay, 1000ms) * 1s;

      @if string.slice($delay + '', 1, 2) == '0.' {
        $delay: #{string.slice($delay + '', 2)};
      }
    }
  }

  @if $iterations {
    @if meta.type-of($iterations) == 'string' {
      $iterations: string.to-lower-case($iterations);
    }

    @if is-alias('infinite', $iterations) {
      $iterations: infinite;
    } @else if
      (
        math.is-unitless($iterations) and meta.type-of($iterations) == 'number'
      ) or
      $iterations ==
      initial or
      $iterations ==
      inherit
    {
      $iterations: $iterations;
    } @else {
      @error 'Invalid $iterations value of `#{meta.inspect($iterations)}` ' +
          'for the [ bounciness() ] mixin.';
    }
  } @else {
    $iteratons: null;
  }

  @if not
    $anim-dir or
    is-alias('none', $anim-dir) or
    is-alias('normal', $anim-dir)
  {
    $anim-dir: null;
  } @else if is-alias('reverse', $anim-dir) {
    $anim-drection: reverse;
  } @else if is-alias('alternate', $anim-dir) {
    $anim-dir: alternate;
  } @else if is-alias('alternate-reverse', $anim-dir) {
    $anim-dir: alternate-reverse;
  } @else {
    @error 'Invalid animation-direction value of `#{$anim-dir}` for' +
        'the [ bounciness() ] mixin';
  }

  @if not
    $timing-func or
    $timing-func ==
    'ease' or
    is-alias('none', $timing-func) or
    is-alias('normal', $timing-func)
  {
    // Take all potential values the user might pass to keep the default setting
    // and ensure that the timing function remains at that default
    $timing-func: null;
  }

  @if not $anim-num {
    $anim-num: null;
  } @else {
    $anim-suffix: string.insert(
      $anim-suffix,
      '--#{$anim-num}',
      string.length($anim-suffix) + 1
    );
  }

  animation: bounciness#{$anim-suffix} #{$duration} #{$timing-func} #{$delay} #{$iterations}
    both;

  @at-root {
    @keyframes bounciness#{$anim-suffix} {
      0% {
        opacity: 1;
        transform: #{$dir-val1};
        animation-timing-function: ease-in;
      }

      24% {
        opacity: 1;
      }

      25%,
      55%,
      75%,
      87% {
        transform: #{$dir-val6};
        animation-timing-function: ease-out;
      }

      40% {
        transform: #{$dir-val2};
        animation-timing-function: ease-in;
      }

      65% {
        transform: #{$dir-val3};
        animation-timing-function: ease-in;
      }

      82% {
        transform: #{$dir-val4};
        animation-timing-function: ease-in;
      }

      93% {
        transform: #{$dir-val5};
        animation-timing-function: ease-in;
      }

      100% {
        opacity: 1;
        transform: #{$dir-val6};
        animation-timing-function: ease-out;
      }
    }
  }
}
