@use 'sass:meta';
@use 'sass:list';
@use 'sass:math';
@use 'sass:string';
@use '../../functions/is-alias' as *;

/// Generates an animation that puffs an element in or out. If a forward or
/// backward $direction is chosen to augment the puff, it is recommended that
/// the `animation-stage` mixin be used on the parent element.
///
/// @param {String|Boolean} $in-or-out [in] - Determines if the element will
/// puff `in` (or true, `i`) our `out` (or false, `o`).
/// @param {String} $direction [null] - Will, depending on $in-or-out, either
/// puff in from this direction or puff out towards this direction.
/// @param {Time} $timing [0.7s] - The duration of the animation (s or ms)
/// @param {Time} $delay [null] - The optional delay time for the animation.
/// @param {Number|String} $iterations [null] - The number of iterations
/// to complete. If the value passed is not a number, it will be set to infinite
/// @param {Keyword} $anim-dir [null] - Sets the animation-direction property.
/// Can be `normal`, `reverse`, `alternate`, or `alternate-reverse`. Default of
/// null assumes the CSS property default of `normal`.
/// @param {Timing-Function} $timing-func [null] - The timing function for the
/// animation. A null value passed here will default to the recommended timing
/// function for this animation of `cubic-bezier(0.39, 0.575, 0.565, 1)`.
/// @param {Number|String} $anim-num [null] - If the mixin is used more than
/// once with different values in a stylesheet, you can pass a number or string
/// to the mixin here that gets appeneded to end of the animation name so that
/// the animations do not overwrite each other.
///
/// @group Animations
/// @require {Function} is-alias
///
/// @throw Invalid $in-or-out value
/// @throw Invalid $timing value
/// @throw Invalid $delay value
/// @throw Invalid $iterations value
/// @throw Invalid $anim-dir value
@mixin puff(
  $in-or-out: in,
  $direction: center,
  $timing: 0.7s,
  $delay: null,
  $iterations: null,
  $anim-dir: null,
  $timing-func: null,
  $anim-num: null
) {
  // Default values for a puff in with center direction
  $opacity-val-1: 0;
  $opacity-val-2: 1;
  $trans-val-1: scale(2);
  $trans-val-2: scale(1);
  $blur-val-1: blur(2px);
  $blur-val-2: blur(0);
  $trans-origin-val: null;
  $temp-val: null;
  $anim-suffix: '';

  @if $in-or-out and meta.type-of($in-or-out) == 'string' {
    $in-or-out: string.to-lower-case($in-or-out);
  }

  @if $anim-dir and meta.type-of($anim-dir) == 'string' {
    $anim-dir: string.to-lower-case($anim-dir);
  }

  @if $delay and meta.type-of($delay) == 'string' {
    $delay: string.to-lower-case($delay);
  }

  @if $timing-func and meta.type-of($timing-func) == 'string' {
    $timing-func: string.to-lower-case($timing-func);
  }

  @if $in-or-out == true or $in-or-out == 'in' or $in-or-out == 'i' {
    $in-or-out: true;
    $anim-suffix: '-in-from';
  } @else if not $in-or-out or $in-or-out == 'out' or $in-or-out == 'o' {
    $in-or-out: false;
    $anim-suffix: '-out-to';
  } @else {
    @error 'Invalid $in-or-out value of `#{meta.inspect($in-or-out)}` for the ' +
        '[ puff() ] mixin. Value must be either "in" or "out"';
  }

  @if $direction {
    @if meta.type-of($direction) == 'string' {
      $direction: string.to-lower-case($direction);
    }

    @if $direction ==
      'top' or
      $direction ==
      't' or
      $direction ==
      'up' or
      $direction ==
      'u'
    {
      $direction: 'top';
      $trans-val-1: translateY(-50px);
      $trans-val-2: translateY(0);
      $trans-origin-val: 50% 0%;
    } @else if
      $direction ==
      'bottom' or
      $direction ==
      'btm' or
      $direction ==
      'b'
    {
      $direction: 'bottom';
      $trans-val-1: translateY(50px);
      $trans-val-2: translateY(0);
      $trans-origin-val: 50% 100%;
    } @else if
      $direction ==
      'forwards' or
      $direction ==
      'forward' or
      $direction ==
      'front' or
      $direction ==
      'fwd' or
      $direction ==
      'fw' or
      $direction ==
      'f'
    {
      $direction: 'front';
      $trans-val-1: translateZ(80px);
      $trans-val-2: translateZ(0);
    } @else if
      $direction ==
      'backwards' or
      $direction ==
      'backward' or
      $direction ==
      'bckwrd' or
      $direction ==
      'back' or
      $direction ==
      'bck' or
      $direction ==
      'bw' or
      $direction ==
      'b'
    {
      $direction: 'back';
      $trans-val-1: translateZ(-80px);
      $trans-val-2: translateZ(0);
    } @else if is-alias('left', $direction) {
      $direction: 'left';
      $trans-val-1: translateX(-50px);
      $trans-val-2: translateX(0);
      $trans-origin-val: 0% 50%;
    } @else if is-alias('right', $direction) {
      $direction: 'right';
      $trans-val-1: translateX(50px);
      $trans-val-2: translateX(0);
      $trans-origin-val: 100% 50%;
    } @else if
      $direction ==
      'top-left' or
      $direction ==
      'topleft' or
      $direction ==
      't-l' or
      $direction ==
      'tl' or
      $direction ==
      'left-top' or
      $direction ==
      'lefttop' or
      $direction ==
      'l-t' or
      $direction ==
      'lt'
    {
      $direction: 'top-left';
      $trans-val-1: translateX(-50px) translateY(-50px);
      $trans-val-2: translateX(0) translateY(0);
      $trans-origin-val: 0% 0%;
    } @else if
      $direction ==
      'top-right' or
      $direction ==
      'topright' or
      $direction ==
      't-r' or
      $direction ==
      'tr' or
      $direction ==
      'right-top' or
      $direction ==
      'righttop' or
      $direction ==
      'r-t' or
      $direction ==
      'rt'
    {
      $direction: 'top-right';
      $trans-val-1: translateX(50px) translateY(-50px);
      $trans-val-2: translateX(0) translateY(0);
      $trans-orig-val: 100% 0%;
    } @else if
      $direction ==
      'bottom-right' or
      $direction ==
      'bottomright' or
      $direction ==
      'b-r' or
      $direction ==
      'br' or
      $direction ==
      'right-bottom' or
      $direction ==
      'rightbottom' or
      $direction ==
      'r-b' or
      $direction ==
      'rb'
    {
      $direction: 'bottom-right';
      $trans-val-1: translateX(50px) translateY(50px);
      $trans-val-2: translateX(0) translateY(0);
      $trans-orig-val: 100% 100%;
    } @else if
      $direction ==
      'bottom-left' or
      $direction ==
      'bottomleft' or
      $direction ==
      'b-l' or
      $direction ==
      'bl' or
      $direction ==
      'left-bottom' or
      $direction ==
      'leftbottom' or
      $direction ==
      'l-b' or
      $direction ==
      'lb'
    {
      $direction: 'bottom-left';
      $trans-val-1: translateX(-50px) translateY(50px);
      $trans-val-2: translateX(0) translateY(0);
      $trans-orig-val: 0% 100%;
    } @else if
      $direction ==
      'center' or
      $direction ==
      'cent' or
      $direction ==
      'c'
    {
      $direction: 'center';
    } @else {
      @error 'Invalid direction of `#{meta.inspect($direction)}` chosen for the ' +
          '[ puff() ] mixin.';
    }
  } @else {
    $direction: 'center';
  }

  // If puff is out rather than in, swap and reverse the necessary values
  @if not $in-or-out {
    $opacity-val-1: 1;
    $opacity-val-2: 0;
    $blur-val-1: blur(0);
    $blur-val-2: blur(2px);

    $temp-val: $trans-val-1;
    $trans-val-1: $trans-val-2;
    $trans-val-2: $temp-val;
  }

  @if not $timing {
    $timing: if($in-or-out, 0.7s, 1s);
  }

  @if meta.type-of($timing) != 'number' {
    @error 'Invalid $timing value of `#{$timing}` for the [ puff() ] ' +
        'mixin. The timing property must be a number.';
  } @else if math.is-unitless($timing) {
    // If no there is no unit for $timing, assume seconds
    $timing: $timing * 1s;
  } @else if not list.index('s' 'ms', math.unit($timing)) {
    @error 'Invalid $timing value of `#{$timing}` for the [ puff() ] mixin.' +
        'The timing property must be in either s or ms units.';
  } @else if math.unit($timing) == 'ms' and $timing % 100 == 0ms {
    // If time in ms would be shorter as seconds, convert it
    $timing: math.div($timing, 1000ms) * 1s;
  }

  @if not
    $delay or
    $delay ==
    0 or
    $delay ==
    0s or
    $delay ==
    0ms or
    is-alias('none', $delay)
  {
    $delay: null;
  }
  @if $delay {
    @if meta.type-of($delay) != 'number' {
      @error 'Invalid delay value of `#{meta.inspect($delay)}` for the [ puff() ] mixin.' +
          'The delay property must be a number.';
    } @else if math.is-unitless($delay) {
      // If no there is no unit for $delay, assume seconds
      $delay: $delay * 1s;
    } @else if not list.index('s' 'ms', math.unit($delay)) {
      @error 'Invalid delay value of `#{meta.inspect($delay)}` for the [ puff() ] mixin.' +
          'The delay property must be in either s or ms units.';
    } @else if math.unit($delay) == 'ms' and $delay % 100 == 0ms {
      // If time in ms would be shorter as seconds, convert it
      $delay: math.div($delay, 1000ms) * 1s;
    }
  }

  @if $iterations {
    @if meta.type-of($iterations) == 'string' {
      $iterations: string.to-lower-case($iterations);
    }

    @if is-alias('infinite', $iterations) {
      $iterations: infinite;
    } @else if (
        math.is-unitless($iterations) and meta.type-of($iterations) == 'number'
      ) or $iterations == initial or $iterations == inherit
    {
      $iterations: $iterations;
    } @else {
      @error 'Invalid $iterations value of `#{meta.inspect($iterations)}`' +
          ' for the [ puff() ] mixin.';
    }
  }

  @if not
    $anim-dir or
    is-alias('none', $anim-dir) or
    is-alias('normal', $anim-dir)
  {
    $anim-dir: null;
  } @else if is-alias('reverse' $anim-dir) {
    $anim-drection: reverse;
  } @else if is-alias('alternate' $anim-dir) {
    $anim-dir: alternate;
  } @else if is-alias('alternate-reverse' $anim-dir) {
    $anim-dir: alternate-reverse;
  } @else {
    @error 'Invalid animation-direction value of `#{$anim-dir}` passed with ' +
        '$anim-dir to the [ puff() ] mixin';
  }

  @if not
    $timing-func or
    is-alias('none', $timing-func) or
    is-alias('normal', $timing-func)
  {
    // Take all potential values the user might pass to keep the default setting
    // and ensure that the timing function remains at that default
    $timing-func: if(
      $in-or-out,
      cubic-bezier(0.47, 0, 0.745, 0.715),
      cubic-bezier(0.165, 0.84, 0.44, 1)
    );
  }

  $anim-suffix: string.insert(
    $anim-suffix,
    '-#{$direction}',
    string.length($anim-suffix) + 1
  );

  @if not $anim-num {
    $anim-num: null;
  } @else {
    $anim-suffix: string.insert(
      $anim-suffix,
      '--#{$anim-num}',
      string.length($anim-suffix) + 1
    );
  }

  animation: puff#{$anim-suffix} #{$timing} #{$timing-func} #{$delay} #{$iterations}
    #{$anim-dir} both;

  @at-root {
    @keyframes puff#{$anim-suffix} {
      0% {
        opacity: $opacity-val-1;
        filter: $blur-val-1;
        transform: $trans-val-1;

        @if $trans-origin-val {
          transform-origin: $trans-origin-val;
        }
      }

      100% {
        opacity: $opacity-val-2;
        filter: $blur-val-2;
        transform: $trans-val-2;

        @if $trans-origin-val {
          transform-origin: $trans-origin-val;
        }
      }
    }
  }
}
