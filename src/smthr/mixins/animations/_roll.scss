@use 'sass:meta';
@use 'sass:list';
@use 'sass:math';
@use 'sass:string';
@use '../../functions/is-alias' as *;

/// Generates an animation that rolls an element in or out, from or towards a
/// given direction.
///
/// @param {Bool|String} $in-or-out [in] - Determines if the element will
/// roll `in` (or true, `i`) our `out` (or false, `o`).
/// @param {String} $direction [top] - Will either roll in from this
/// direction or roll out towards this direction, depending on the value of
/// $in-or-out. The value of $direction must be one of the following:
/// 'top', 'right', 'bottom', 'left'.
/// @param {Time} $duration [null] - The duration of the animation (s or ms)
/// @param {Time} $delay [null] - The optional delay time for the animation.
/// @param {Number|String} $iterations [null] - The number of iterations
/// to complete. If the value passed is not a number, it will be set to infinite
/// @param {Keyword} $anim-dir [null] - Sets the animation-direction property.
/// Can be `normal`, `reverse`, `alternate`, or `alternate-reverse`. Default of
/// null assumes the CSS property default of `normal`.
/// @param {Timing-Function} $timing-func [null] - The timing function for
/// the animation. A null value passed here will default to the recommended
/// timing function for this animation of `ease-out` on a roll-in animation,
/// and `ease-in` on a roll-out animation.
/// @param {Number|String} $anim-num [null] - If the mixin is used more than
/// once with different values in a stylesheet, you can pass a number or string
/// to the mixin here that gets appeneded to end of the animation name so that
/// the animations do not overwrite each other.
///
/// @group Animations
/// @require {function} is-alias
///
/// @throw Invalid $in-or-out value
/// @throw Invalid $duration value
/// @throw Invalid $delay value
/// @throw Invalid $iterations value
/// @throw Invalid $anim-dir value
@mixin roll(
  $in-or-out: in,
  $direction: left,
  $duration: 0.6s,
  $delay: null,
  $iterations: null,
  $anim-dir: null,
  $timing-func: null,
  $anim-num: null
) {
  $opacity-val-1: 0;
  $opacity-val-2: 1;
  $trans-val-1: null;
  $trans-val-2: null;
  $temp-val: null;
  $anim-suffix: '';

  @if $in-or-out and meta.type-of($in-or-out) == 'string' {
    $in-or-out: string.to-lower-case($in-or-out);
  }

  @if $anim-dir and meta.type-of($anim-dir) == 'string' {
    $anim-dir: string.to-lower-case($anim-dir);
  }

  @if $delay and meta.type-of($delay) == 'string' {
    $delay: string.to-lower-case($delay);
  }

  @if $timing-func and meta.type-of($timing-func) == 'string' {
    $timing-func: string.to-lower-case($timing-func);
  }

  @if $in-or-out == true or is-alias('in', $in-or-out) {
    $in-or-out: true;
    $anim-suffix: '-in-from-';
  } @else if not $in-or-out or is-alias('out', $in-or-out) {
    $in-or-out: false;
    $anim-suffix: '-out-to-';
  } @else {
    @error 'Invalid $in-or-out value of `#{meta.inspect($in-or-out)}` for ' +
        'the [ roll() ] mixin. It must be either `in` or `out`, true or false.';
  }

  @if $direction {
    @if meta.type-of($direction) == 'string' {
      $direction: string.to-lower-case($direction);
    }

    @if is-alias('top', $direction) {
      $trans-val-1: translateY(-800px) rotate(-540deg);
      $trans-val-2: translateY(0) rotate(0);
      $anim-suffix: string.insert(
        $anim-suffix,
        'top',
        string.length($anim-suffix) + 1
      );
    } @else if is-alias('bottom', $direction) {
      $trans-val-1: translateY(800px) rotate(540deg);
      $trans-val-2: translateY(0) rotate(0);
      $anim-suffix: string.insert(
        $anim-suffix,
        'bottom',
        string.length($anim-suffix) + 1
      );
    } @else if is-alias('right', $direction) {
      $trans-val-1: translateX(800px) rotate(540deg);
      $trans-val-2: translateX(0) rotate(0);
      $anim-suffix: string.insert(
        $anim-suffix,
        'right',
        string.length($anim-suffix) + 1
      );
    } @else if is-alias('left', $direction) {
      $trans-val-1: translateX(-800px) rotate(-540deg);
      $trans-val-2: translateX(0) rotate(0);
      $anim-suffix: string.insert(
        $anim-suffix,
        'left',
        string.length($anim-suffix) + 1
      );
    } @else {
      @error 'Invalid direction of `#{meta.inspect($direction)}` chosen for ' +
          'the [ roll() ] mixin. The $direction value must be one of the ' +
          'following: `top`, `right`, `bottom`, `left`.';
    }
  } @else {
    $direction: null;
  }

  // If roll is out rather than in, swap and reverse the necessary values
  @if not $in-or-out {
    $opacity-val-1: 1;
    $opacity-val-2: 0;

    $temp-val: $trans-val-1;
    $trans-val-1: $trans-val-2;
    $trans-val-2: $temp-val;
  }

  @if meta.type-of($duration) != 'number' {
    @error 'Invalid $duration value of `#{$duration}` for the ' +
        '[ roll() ] mixin. The duration property must be a number.';
  } @else if math.is-unitless($duration) {
    // If no there is no unit for $duration, unless $duration > 60, assume seconds
    $duration: if($duration > 60, $duration * 1ms, $duration * 1s);
  } @else if not list.index('s' 'ms', math.unit($duration)) {
    @error 'Invalid $duration value of `#{$duration}` for the ' +
        '[ roll() ] mixin. The duration property must be in either s or ms units.';
  } @else if math.unit($duration) == 'ms' and $duration % 100 == 0ms {
    // If time in ms would be shorter as seconds, convert it
    $duration: math.div($duration, 1000ms) * 1s;
  }

  @if not
    $delay or
    $delay ==
    0 or
    $delay ==
    0s or
    $delay ==
    0ms or
    is-alias('none', $delay)
  {
    $delay: null;
  }
  @if $delay {
    @if meta.type-of($delay) != 'number' {
      @error 'Invalid delay value of `#{meta.inspect($delay)}` for the ' +
          '[ roll() ] mixin. The delay property must be a number.';
    } @else if math.is-unitless($delay) {
      // If no there is no unit for $delay, unless $delay > 60, assume seconds
      $delay: if($delay > 60, $delay * 1ms, $delay * 1s);
    } @else if not list.index('s' 'ms', math.unit($delay)) {
      @error 'Invalid delay value of `#{meta.inspect($delay)}` for the ' +
          '[ roll() ] mixin. The delay property must be in either s or ms units.';
    } @else if math.unit($delay) == 'ms' and $delay % 100 == 0ms {
      // If time in ms would be shorter as seconds, convert it
      $delay: math.div($delay, 1000ms) * 1s;
    }
  }

  @if $iterations {
    @if meta.type-of($iterations) == 'string' {
      $iterations: string.to-lower-case($iterations);
    }

    @if is-alias('infinite', $iterations) {
      $iterations: infinite;
    } @else if (
        math.is-unitless($iterations) and meta.type-of($iterations) == 'number'
      ) or
      $iterations ==
      initial or
      $iterations ==
      inherit
    {
      $iterations: $iterations;
    } @else {
      @error 'Invalid $iterations value of `#{meta.inspect($iterations)}` ' +
          'for the [ roll() ] mixin.';
    }
  } @else {
    $iterations: null;
  }

  @if not
    $anim-dir or
    is-alias('none', $anim-dir) or
    is-alias('normal', $anim-dir)
  {
    $anim-dir: null;
  } @else if is-alias('reverse', $anim-dir) {
    $anim-drection: reverse;
  } @else if is-alias('alternate', $anim-dir) {
    $anim-dir: alternate;
  } @else if is-alias('alternate-reverse', $anim-dir) {
    $anim-dir: alternate-reverse;
  } @else {
    @error 'Invalid animation-direction value of `#{$anim-dir}` ' +
        'for the [ roll() ] mixin';
  }

  @if not $timing-func or is-alias('normal', $timing-func) {
    $timing-func: if(($in-or-out), ease-out, ease-in);
  }

  @if not $anim-num {
    $anim-num: null;
  } @else {
    $anim-suffix: string.insert(
      $anim-suffix,
      '--#{$anim-num}',
      string.length($anim-suffix) + 1
    );
  }

  animation: roll#{$anim-suffix} #{$duration} #{$timing-func} #{$delay} #{$iterations}
    #{$anim-dir} both;

  @at-root {
    @keyframes roll#{$anim-suffix} {
      0% {
        opacity: $opacity-val-1;
        transform: $trans-val-1;
      }

      100% {
        opacity: $opacity-val-2;
        transform: $trans-val-2;
      }
    }
  }
}
