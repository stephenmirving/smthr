@use 'sass:meta';
@use 'sass:string';
@use 'sass:list';
@use 'sass:math';
@use '../../functions/is-alias' as *;

/// Does a slow and artistic Ken Burns style zoom-in on the background image
/// of an element.
///
/// @param {String} $direction [bottom] - The direction of the angle the
/// zoom-in will have. Accepts `top`, `left`, `right`, `bottom`,
/// `bottom-right`, `top-right`, `bottom-left`, or `top-left`.
/// @param {Number} $duration [5s] - The duration of the animation's effect.
/// @param {Number} $delay [null] - An optional delay before starting the effect.
/// @param {Number | String} $anim-num [null] - If the mixin is used more than
/// once with different values in a stylesheet, you can pass a number or string
/// to the mixin here that gets appeneded to end of the animation name so that
/// the animations do not overwrite each other.
///
/// @group Animations
/// @require {function} is-alias
///
/// @throw  Invalid keyword for $direction.
/// @throw  Invalid data type for $duration.
/// @throw  Invalid data type for $delay.
@mixin zoom-in(
  $direction: bottom,
  $duration: 5s,
  $delay: null,
  $anim-num: null
) {
  // Default values for bottom $direction
  $dir-val1: scale(1) translateY(0);
  $dir-val2: 50% 16%;
  $dir-val3: scale(1.25) translateY(15px);
  $dir-val4: 50% 100%;
  $anim-suffix: '-to-bottom';

  @if $direction and meta.type-of($direction) == 'string' {
    $direction: string.to-lower-case($direction);
  }

  @if $delay and meta.type-of($delay) == 'string' {
    $delay: string.to-lower-case($delay);
  }

  @if is-alias('top', $direction) {
    $dir-val1: scale(1) translateY(0);
    $dir-val2: 50% 84%;
    $dir-val3: scale(1.25) translateY(-15px);
    $dir-val4: top;
    $anim-suffix: '-to-top';
  } @else if is-alias('left', $direction) {
    $dir-val1: scale(1) translate(0, 0);
    $dir-val2: 16% 50%;
    $dir-val3: scale(1.25) translate(-20px, 15px);
    $dir-val4: left;
    $anim-suffix: '-to-left';
  } @else if is-alias('right', $direction) {
    $dir-val1: scale(1) translateX(0);
    $dir-val2: 84% 50%;
    $dir-val3: scale(1.25) translateX(20px);
    $dir-val4: right;
    $anim-suffix: '-to-right';
  } @else if is-alias('bottom right', $direction) {
    $dir-val1: scale(1) translate(0, 0);
    $dir-val2: 84% 84%;
    $dir-val3: scale(1.25) translate(20px, 15px);
    $dir-val4: 100% 100%;
    $anim-suffix: '-to-bottom-right';
  } @else if is-alias('top right', $direction) {
    $dir-val1: scale(1) translate(0, 0);
    $dir-val2: 84% 16%;
    $dir-val3: scale(1.25) translate(20px, -15px);
    $dir-val4: 100% 0%;
    $anim-suffix: '-to-top-right';
  } @else if is-alias('bottom left', $direction) {
    $dir-val1: scale(1) translate(0, 0);
    $dir-val2: 16% 84%;
    $dir-val3: scale(1.25) translate(-20px, 15px);
    $dir-val4: 0% 100%;
    $anim-suffix: '-to-bottom-left';
  } @else if is-alias('top left', $direction) {
    $dir-val1: scale(1) translate(0, 0);
    $dir-val2: 16% 16%;
    $dir-val3: scale(1.25) translate(-20px, -15px);
    $dir-val4: 0% 0%;
    $anim-suffix: '-to-top-left';
  } @else if not is-alias('bottom', $direction) {
    @error 'Invalid $direction of `#{meta.inspect($direction)}` for the ' +
        '[ zoom-in() ] mixin. Accepted direction values include: ' +
        '`top`, `left`, `right`, `bottom`, `bottom-right`, `top-right`, ' +
        '`bottom-left`, or `top-left`.';
  }

  @if meta.type-of($duration) != 'number' {
    @error 'Invalid $duration value of `#{$duration}` for the ' +
        '[ zoom-in() ] mixin. The duration property must be a number.';
  } @else if math.is-unitless($duration) {
    // If no there is no unit for $duration, unless $duration > 60, assume seconds
    $duration: if($duration > 60, $duration * 1ms, $duration * 1s);
  } @else if not list.index('s' 'ms', math.unit($duration)) {
    @error 'Invalid $duration value of `#{$duration}` for the ' +
        '[ zoom-in() ] mixin. The duration property must be in either ' +
        's (seconds) or ms (milliseconds) units.';
  } @else if $duration % 10 == 0ms {
    // If time in ms would be shorter as seconds, convert it
    $duration: math.div($duration, 1000ms) * 1s;

    // Get rid of possible leading zero in front of decimal place
    @if string.slice($duration + '', 1, 2) == '0.' {
      $duration: #{string.slice($duration + '', 2)};
    }
  }

  @if not
    $delay or
    $delay ==
    0 or
    $delay ==
    0s or
    $delay ==
    0ms or
    is-alias('none', $delay)
  {
    $delay: null;
  }
  @if $delay {
    @if meta.type-of($delay) != 'number' {
      @error 'Invalid delay value of `#{meta.inspect($delay)}` for the ' +
          '[ zoom-in() ] mixin. The delay property must be a number.';
    } @else if math.is-unitless($delay) {
      // If no there is no unit for $delay, unless $delay > 60, assume seconds
      $delay: if($delay > 60, $delay * 1ms, $delay * 1s);
    } @else if not list.index('s' 'ms', math.unit($delay)) {
      @error 'Invalid delay value of `#{meta.inspect($delay)}` for the ' +
          '[ zoom-in() ] mixin. The delay property must be in either ' +
          's (seconds) or ms (milliseconds) units.';
    } @else if $delay % 10 == 0ms {
      $delay: math.div($delay, 1000ms) * 1s;

      @if string.slice($delay + '', 1, 2) == '0.' {
        $delay: #{string.slice($delay + '', 2)};
      }
    }
  }

  @if not $anim-num {
    $anim-num: null;
  } @else {
    $anim-suffix: string.insert(
      $anim-suffix,
      '--#{$anim-num}',
      string.length($anim-suffix) + 1
    );
  }

  animation: zoom-in#{$anim-suffix} #{$duration} ease-out #{$delay} both;

  @at-root {
    @keyframes zoom-in#{$anim-suffix} {
      0% {
        transform: #{$dir-val1};
        transform-origin: #{$dir-val2};
      }

      100% {
        transform: #{$dir-val3};
        transform-origin: #{$dir-val4};
      }
    }
  }
}

/// Does a slow and artistic Ken Burns style zoom-in on the background image
/// of an element.
///
/// @param {String} $direction [bottom] - The direction of the angle the
/// zoom-in will have. Accepts `top`, `left`, `right`, `bottom`,
/// `bottom-right`, `top-right`, `bottom-left`, or `top-left`.
/// @param {Number} $duration [5s] - The duration of the animation's effect.
/// @param {Number} $delay [null] - An optional delay before starting the effect.
/// @param {Number | String} $anim-num [null] - If the mixin is used more than
/// once with different values in a stylesheet, you can pass a number or string
/// to the mixin here that gets appeneded to end of the animation name so that
/// the animations do not overwrite each other.
///
/// @group Animations
/// @require {function} is-alias
///
/// @throw  Invalid keyword for $direction.
/// @throw  Invalid data type for $duration.
/// @throw  Invalid data type for $delay.
///
/// @alias zoom-in
@mixin ken-burns(
  $direction: bottom,
  $duration: 5s,
  $delay: null,
  $anim-num: null
) {
  @include zoom-in($direction, $duration, $delay, $anim-num);
}
