@use 'sass:meta';
@use 'sass:string';
@use 'sass:list';
@use 'sass:math';

/// Does a slow, artistic, Ken Burns style zoom in on the background image
/// of an element
///
/// @param {String} $direction [bottom] - The direction of the angle the
/// zoom-in will have. Accepts `top`, `t`, `up`, or `u` for the top,
/// `left` or `l` for `left`, `right` or `r` for right, and either `bottom`,
/// `b`, `down`, or `d` for the bottom. It also accepts `bottom-right` or
/// `right-bottom` or rb` or `br` for the bottom-right, `top-right`,
/// `right-top`, `rt`, or `tr` for the top-right, `bottom-left`, `left-bottom`,
/// `lb`, or `bl` for the bottom-left and `top-left`, `left-top`, `lt`, or `tl`
/// for the top-left.
/// @param {Time} $timing [5s] - The duration of the animation's effect.
/// @param {Time} $delay [null] - An optional delay before starting the effect.
///
/// @group Animations
/// @throw Invalid keyword for $direction
/// @throw Invalid $timing value
/// @throw Invalid $delay value
@mixin zoom-in($direction: bottom, $timing: 5s, $delay: null) {
  // Default values for bottom $direction
  $dir-val1: scale(1) translateY(0);
  $dir-val2: 50% 16%;
  $dir-val3: scale(1.25) translateY(15px);
  $dir-val4: bottom;

  @if $direction and meta.type-of($direction) == 'string' {
    $direction: string.to-lower-case($direction);
  }

  @if $delay and meta.type-of($delay) == 'string' {
    $delay: string.to-lower-case($delay);
  }

  @if $direction ==
    'top' or
    $direction ==
    'up' or
    $direction ==
    't' or
    $direction ==
    'u'
  {
    $dir-val1: scale(1) translateY(0);
    $dir-val2: 50% 84%;
    $dir-val3: scale(1.25) translateY(-15px);
    $dir-val4: top;
  } @else if $direction == 'left' or $direction == 'l' {
    $dir-val1: scale(1) translate(0, 0);
    $dir-val2: 16% 50%;
    $dir-val3: scale(1.25) translate(-20px, 15px);
    $dir-val4: left;
  } @else if $direction == 'right' or $direction == 'r' {
    $dir-val1: scale(1) translateX(0);
    $dir-val2: 84% 50%;
    $dir-val3: scale(1.25) translateX(20px);
    $dir-val4: right;
  } @else if
    $direction ==
    'bottom-right' or
    $direction ==
    'right-bottom' or
    $direction ==
    'br' or
    $direction ==
    'rb'
  {
    $dir-val1: scale(1) translate(0, 0);
    $dir-val2: 84% 84%;
    $dir-val3: scale(1.25) translate(20px, 15px);
    $dir-val4: right bottom;
  } @else if
    $direction ==
    'top-right' or
    $direction ==
    'right-top' or
    $direction ==
    'rt' or
    $direction ==
    'tr'
  {
    $dir-val1: scale(1) translate(0, 0);
    $dir-val2: 84% 16%;
    $dir-val3: scale(1.25) translate(20px, -15px);
    $dir-val4: right top;
  } @else if
    $direction ==
    'bottom-left' or
    $direction ==
    'left-bottom' or
    $direction ==
    'lb' or
    $direction ==
    'bl'
  {
    $dir-val1: scale(1) translate(0, 0);
    $dir-val2: 16% 84%;
    $dir-val3: scale(1.25) translate(-20px, 15px);
    $dir-val4: left bottom;
  } @else if
    $direction ==
    'top-left' or
    $direction ==
    'left-top' or
    $direction ==
    'lt' or
    $direction ==
    'tl'
  {
    $dir-val1: scale(1) translate(0, 0);
    $dir-val2: 16% 16%;
    $dir-val3: scale(1.25) translate(-20px, -15px);
    $dir-val4: left top;
  } @else if
    $direction !=
    'bottom' or
    $direction !=
    'b' or
    $direction !=
    'down' or
    $direction !=
    'd'
  {
    @error '[ #{meta.inspect($direction)} ] is not a valid direction for the ' +
        '`zoom-in` mixin';
  }

  @if meta.type-of($timing) != 'number' {
    @error 'Invalid $timing value of `#{$timing}` for the ' +
        '`zoom-in` mixin. The timing property must be a number.';
  } @else if math.is-unitless($timing) {
    // If no there is no unit for $timing, assume seconds
    $timing: $timing * 1s;
  } @else if not list.index('s' 'ms', math.unit($timing)) {
    @error 'Invalid $timing value of `#{$timing}` for the ' +
        '`zoom-in` mixin. The timing property must be in either ' +
        's (seconds) or ms (milliseconds) units.';
  } @else if $timing % 10 == 0ms {
    // If time in ms would be shorter as seconds, convert it
    $timing: math.div($timing, 1000ms) * 1s;

    // Get rid of possible leading zero in front of decimal place
    @if string.slice($timing + '', 1, 2) == '0.' {
      $timing: string.unquote(string.slice($timing + '', 2));
    }
  }

  @if $delay ==
    0 or
    $delay ==
    0s or
    $delay ==
    0ms or
    $delay ==
    'none' or
    $delay ==
    'no' or
    $delay ==
    'n' or
    $delay ==
    'n/a' or
    $delay ==
    nil or not
    $delay
  {
    $delay: null;
  }
  @if $delay {
    @if meta.type-of($delay) != 'number' {
      @error 'Invalid delay value of `#{meta.inspect($delay)}` for the ' +
          '`zoom-in` mixin. The delay property must be a number.';
    } @else if math.is-unitless($delay) {
      $delay: $delay * 1s;
    } @else if not list.index('s' 'ms', math.unit($delay)) {
      @error 'Invalid delay value of `#{meta.inspect($delay)}` for the ' +
          '`zoom-in` mixin. The delay property must be in either ' +
          's (seconds) or ms (milliseconds) units.';
    } @else if $delay % 10 == 0ms {
      $delay: math.div($delay, 1000ms) * 1s;

      @if string.slice($delay + '', 1, 2) == '0.' {
        $delay: #{string.slice($delay + '', 2)};
      }
    }
  }

  @if not $anim-num {
    $anim-num: null;
  }

  @if $anim-num {
    $anim-num: '-' + $anim-num;
  }

  animation: zoom-in#{$anim-num} #{$timing} ease-out #{$delay} both;

  @at-root {
    @keyframes zoom-in#{$anim-num} {
      0% {
        transform: #{$dir-val1};
        transform-origin: #{$dir-val2};
      }

      100% {
        transform: #{$dir-val3};
        transform-origin: #{$dir-val4};
      }
    }
  }
}
