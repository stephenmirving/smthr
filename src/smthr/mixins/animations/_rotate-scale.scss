@use 'sass:meta';
@use 'sass:list';
@use 'sass:math';
@use 'sass:string';
@use '../utilities/only-moz' as *;

/// Animates an element by rotating it along a point and/or an axis while either
/// scaling it up or down. For optimal effect, use the `animation-stage` mixin
/// on the parent element, and a front and back child element within the rotated
/// element, with the animation-front-face and animation-back-face mixins
/// applied, respectively.
///
/// @param {String|Boolean} $up-or-down [up] - Whether the elelment is
/// scaling up or down. This value can be `up` (or true, `u`, `t`) or `down` (or
/// false, `down`, `d`, `f`).
/// @param {Time} $timing [0.4s] - The duration of the animation (s or ms).
/// @param {Time} $delay [null] - The optional delay time for the animation.
/// @param {String} $axis [null] - The animation can optionally rotate along an
/// axis line. This value can be null (or false, `no`, `n`), `horizontal` (or
/// `horiz`, `horz`, `hor`, `h`) or `vertical` (or `vert`, `ver`, `v`). It can
/// also be either `diagonal` (or `diag` `diagonal1`, `diag1`, `d`, `d1`), or
/// `diagonal2` (or `diag2`, `d2`).
/// @param {Number|String} $iterations [null] - The number of iterations
/// for the animation to complete. If the value passed is not a number, it will
/// be set to infinite.
/// @param {Keyword} $anim-dir [null] - Sets the animation-direction property.
/// Can be `normal`, `reverse`, `alternate`, or `alternate-reverse`. Default of
/// null assumes the CSS property default of `normal`.
/// @param {Timing-Function} $timing-func [linear] - The timing function for the
/// animation.
/// @param {Number|String} $anim-num [null] - If the mixin is used more than
/// once with different values in a stylesheet, you can pass a number or string
/// to the mixin here that gets appeneded to end of the animation name so that
/// the animations do not overwrite each other.
///
/// @group Animations
/// @throw Invalid $direction value
/// @throw Invalid $axis value
/// @throw Invalid $timing value
/// @throw Invalid $delay value
/// @throw Invalid $anim-dir value
@mixin rotate-scale(
  $up-or-down: 'up',
  $timing: 0.7s,
  $delay: null,
  $axis: null,
  $iterations: null,
  $anim-dir: null,
  $timing-func: linear,
  $anim-num: null
) {
  // Values for a default scale up
  $trans-val-1: scale(1) rotateZ(0);
  $trans-val-2: scale(2) rotateZ(180deg);
  $trans-val-3: scale(1) rotateZ(360deg);
  $is-on-axis: false;
  $is-diagonal: false;
  $anim-suffix: '';

  @if $up-or-down and meta.type-of($up-or-down) == 'string' {
    $up-or-down: string.to-lower-case($up-or-down);
  }

  @if $axis and meta.type-of($axis) == 'string' {
    $axis: string.to-lower-case($axis);
  }

  @if $anim-dir and meta.type-of($anim-dir) == 'string' {
    $anim-dir: string.to-lower-case($anim-dir);
  }

  @if $delay and meta.type-of($delay) == 'string' {
    $delay: string.to-lower-case($delay);
  }

  @if $timing-func and meta.type-of($timing-func) == 'string' {
    $timing-func: string.to-lower-case($timing-func);
  }

  @if $up-or-down == true or
    $up-or-down == 'up' or
    $up-or-down == 'u' or
    $up-or-down == 't'
  {
    $up-or-down: true;
    $anim-suffix: '-up';
  } @else if not $up-or-down or
    $up-or-down == 'down' or
    $up-or-down == 'd' or
    $up-or-down == 'f'
  {
    $up-or-down: false;
    $trans-val-2: scale(0.5) rotateZ(180deg);
    $anim-suffix: '-down';
  } @else {
    @error 'Invalid direction value of [#{meta.inspect($up-or-down)}] for the ' +
        '`rotate-scale` mixin.';
  }

  @if $axis and $axis != 'none' and $axis != 'no' and $axis != 'n' {
    $is-on-axis: true;

    @if $axis == 'vertical' or $axis == 'vert' or $axis == 'ver' or $axis == 'v'
    {
      $trans-val-1: if($up-or-down, scale(1) rotateY(0), scale(1) rotateY(0));
      $trans-val-2: if(
        $up-or-down,
        scale(2) rotateY(180deg),
        scale(0.5) rotateY(180deg)
      );
      $trans-val-3: if(
        $up-or-down,
        scale(1) rotateY(360deg),
        scale(1) rotateY(360deg)
      );
    } @else if
      $axis ==
      'horizontal' or
      $axis ==
      'horz' or
      $axis ==
      'hor' or
      $axis ==
      'h'
    {
      $trans-val-1: if($up-or-down, scale(1) rotateX(0), scale(1) rotateX(0));
      $trans-val-2: if(
        $up-or-down,
        scale(2) rotateX(-180deg),
        scale(0.5) rotateX(-180deg)
      );
      $trans-val-3: if(
        $up-or-down,
        scale(1) rotateX(-360deg),
        scale(1) rotateX(-360deg)
      );
    } @else if
      $axis ==
      'diagonal' or
      $axis ==
      'diagonal1' or
      $axis ==
      'diag' or
      $axis ==
      'diag1' or
      $axis ==
      'd' or
      $axis ==
      'd1' or
      $axis ==
      'diagonal2' or
      $axis ==
      'diag2' or
      $axis ==
      'd2'
    {
      $is-diagonal: true;

      @if $axis == 'diagonal2' or $axis == 'diag2' or $axis == 'd2' {
        $trans-val-1: if(
          $up-or-down,
          scale(1) rotate3d(-1, 1, 0, 0),
          scale(1) rotate3d(-1, 1, 0, 0)
        );
        $trans-val-2: if(
          $up-or-down,
          scale(2) rotate3d(-1, 1, 0, 180deg),
          scale(0.5) rotate3d(-1, 1, 0, 180deg)
        );
        $trans-val-3: if(
          $up-or-down,
          scale(1) rotate3d(-1, 1, 0, 360deg),
          scale(1) rotate3d(-1, 1, 0, 360deg)
        );
      } @else {
        $trans-val-1: if(
          $up-or-down,
          scale(1) rotate3d(1, 1, 0, 0),
          scale(1) rotate3d(1, 1, 0, 0)
        );
        $trans-val-2: if(
          $up-or-down,
          scale(2) rotate3d(1, 1, 0, -180deg),
          scale(0.5) rotate3d(1, 1, 0, -180deg)
        );
        $trans-val-3: if(
          $up-or-down,
          scale(1) rotate3d(1, 1, 0, -360deg),
          scale(1) rotate3d(1, 1, 0, -360deg)
        );
      }
    } @else {
      @error 'Invalid $axis value of [#{meta.inspect($axis)}] for the ' +
          '`rotate-scale` mixin.';
    }
  }

  @if meta.type-of($timing) != 'number' {
    @error 'Invalid $timing value of `#{$timing}` for the ' +
        '`rotate-scale` mixin. The timing property must be a number.';
  } @else if math.is-unitless($timing) {
    // If no there is no unit for $timing, assume seconds
    $timing: $timing * 1s;
  } @else if not list.index('s' 'ms', math.unit($timing)) {
    @error 'Invalid $timing value of `#{$timing}` for the ' +
        '`rotate-scale` mixin. The timing property must be in either ' +
        's or ms units.';
  } @else if $timing % 10 == 0ms {
    // If time in ms would be shorter as seconds, convert it
    $timing: math.div($timing, 1000ms) * 1s;

    // Get rid of possible leading zero in front of decimal place
    @if string.slice($timing + '', 1, 2) == '0.' {
      $timing: string.unquote(string.slice($timing + '', 2));
    }
  }

  @if $delay ==
    0 or
    $delay ==
    0s or
    $delay ==
    0ms or
    $delay ==
    'none' or
    $delay ==
    'no' or
    $delay ==
    'n' or
    $delay ==
    'n/a' or
    $delay ==
    nil or not
    $delay
  {
    $delay: null;
  }
  @if $delay {
    @if meta.type-of($delay) != 'number' {
      @error 'Invalid delay value of `#{meta.inspect($delay)}` for the `rotate-scale` ' +
          'mixin. The delay property must be a number.';
    } @else if math.is-unitless($delay) {
      $delay: $delay * 1s;
    } @else if not list.index('s' 'ms', math.unit($delay)) {
      @error 'Invalid delay value of `#{meta.inspect($delay)}` for the `rotate-scale` ' +
          'mixin. The delay property must be in either s or ms units.';
    } @else if $delay % 10 == 0ms {
      $delay: math.div($delay, 1000ms) * 1s;

      @if string.slice($delay + '', 1, 2) == '0.' {
        $delay: #{string.slice($delay + '', 2)};
      }
    }
  }

  @if $iterations {
    @if meta.type-of($iterations) == 'string' {
      $iterations: string.to-lower-case($iterations);
    }

    @if $iterations == 'infinite' or $iterations == 'inf' or $iterations == 'i'
    {
      $iterations: infinite;
    } @else if (
        math.is-unitless($iterations) and meta.type-of($iterations) == 'number'
      ) or
      $iterations ==
      initial or
      $iterations ==
      inherit
    {
      $iterations: $iterations;
    } @else {
      @error 'Invalid $iterations value of `#{meta.inspect($iterations)}` for the ' +
          '`rotate-scale` mixin.';
    }
  } @else {
    $iterations: null;
  }

  @if not
    $anim-dir or
    $anim-dir ==
    'none' or
    $anim-dir ==
    'no' or
    $anim-dir ==
    'n/a' or
    $anim-dir ==
    'n' or
    $anim-dir ==
    'default' or
    $anim-dir ==
    'def' or
    $anim-dir ==
    'normal' or
    $anim-dir ==
    'nor'
  {
    $anim-dir: null;
  } @else if $anim-dir == 'reverse' or $anim-dir == 'rev' or $anim-dir == 'rvs' or $anim-dir == 'r' {
    $anim-drection: reverse;
  } @else if $anim-dir == 'alternate' or $anim-dir == 'alt' or $anim-dir == 'a'
  {
    $anim-dir: alternate;
  } @else if
    $anim-dir ==
    'alternate-reverse' or
    $anim-dir ==
    'alternate reverse' or
    $anim-dir ==
    'alternatereverse' or
    $anim-dir ==
    'alt-rev' or
    $anim-dir ==
    'alt rev' or
    $anim-dir ==
    'altrev' or
    $anim-dir ==
    'alt-rvs' or
    $anim-dir ==
    'alt rvs' or
    $anim-dir ==
    'altrvs' or
    $anim-dir ==
    'a-r' or
    $anim-dir ==
    'ar'
  {
    $anim-dir: alternate-reverse;
  } @else {
    @error 'Invalid animation-direction value of `#{$anim-dir}` for the ' +
        '`rotate-scale` mixin';
  }

  @if not
    $timing-func or
    $timing-func ==
    'none' or
    $timing-func ==
    'no' or
    $timing-func ==
    'n' or
    $timing-func ==
    'def' or
    $timing-func ==
    'default' or
    $timing-func ==
    'd'
  {
    // Take all potential values the user might pass to keep the default setting
    // and ensure that the timing function remains at that default
    $timing-func: linear;
  }

  @if not $anim-num {
    $anim-num: null;
  } @else {
    $anim-suffix: string.insert(
      $anim-suffix,
      '-#{$anim-num}',
      string.length($anim-suffix) + 1
    );
  }

  animation: rotate-scale#{$anim-suffix} #{$timing} #{$timing-func} #{$delay} #{$iterations}
    #{$anim-dir} both;
  @if $is-on-axis {
    transform: translate3d(0, 0, 0);
    transform-style: preserve-3d;

    @include only-moz {
      backface-visibility: hidden;
    }
  }

  @at-root {
    @keyframes rotate-scale#{$anim-suffix} {
      0% {
        transform: $trans-val-1;
      }

      50% {
        transform: $trans-val-2;
      }

      100% {
        transform: $trans-val-3;
      }
    }
  }
}
