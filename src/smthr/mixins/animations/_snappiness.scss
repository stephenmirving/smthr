@use 'sass:meta';
@use 'sass:list';
@use 'sass:math';
@use 'sass:string';

/// Animates an element like it is a rubber band being pulled and snapped.
///
/// @param {String} $direction [horizontal] - The direction of the animation
/// occurs in. Can be horizontal (`horizontal`, `horiz`, or `h`), vertical
/// (`vertical`, `vert`, or `v`), right diagonal (`right-diagonal`, `rd`,
/// `diagonal1` or `d1`) or left-diagonal (`left-diagonal`, `ld`, `diagonal2`,
/// or `d2`).
/// @param {Time} $timing [0.9s] - The duration of the animation (s or ms).
/// @param {Time} $delay [null] - The optional delay of the animation (ms or s)
/// @param {Number|String} $iterations [null] - The number of iterations
/// for the animation to complete. If the value passed is not a number, it will
/// be set to infinite.
/// @param {Keyword} $anim-dir [null] - Sets the animation-direction property.
/// Can be `normal`, `reverse`, `alternate`, or `alternate-reverse`. Default of
/// null assumes the CSS property default of `normal`.
/// @param {Timing-Function} $timing-func [null] - The timing function for the
/// animation. A null $timing-func will create an animation with the CSS default
/// timiing-function of ease.
/// @param {Number|String} $anim-num [null] - If the mixin is used more than
/// once with different values in a stylesheet, you can pass a number or string
/// to the mixin here that gets appeneded to end of the animation name so that
/// the animations do not overwrite each other.
///
/// @group Animations
/// @throw Invalid $direction value
/// @throw Invalid $timing value
/// @throw Invalid $delay value
/// @throw Invalid $iterations value
/// @throw Invalid $anim-dir value
/// @alias snap
@mixin snappiness(
  $direction: horizontal,
  $timing: 0.9s,
  $delay: null,
  $iterations: null,
  $anim-dir: null,
  $timing-func: linear,
  $anim-num: null
) {
  // Default $direction values for horizontal
  $dir-val1: scale3d(1, 1, 1);
  $dir-val2: scale3d(1.25, 0.75, 1);
  $dir-val3: scale3d(0.75, 1.25, 1);
  $dir-val4: scale3d(1.15, 0.85, 1);
  $dir-val5: scale3d(0.95, 1.05, 1);
  $dir-val6: scale3d(1.05, 0.95, 1);

  @if $direction and meta.type-of($direction) == 'string' {
    $direction: string.to-lower-case($direction);
  }

  @if $delay and meta.type-of($delay) == 'string' {
    $delay: string.to-lower-case($delay);
  }

  @if $anim-dir and meta.type-of($anim-dir) == 'string' {
    $anim-dir: string.to-lower-case($anim-dir);
  }

  @if $timing-func and meta.type-of($timing-func) == 'string' {
    $timing-func: string.to-lower-case($timing-func);
  }

  @if $direction == 'vertical' or $direction == 'vert' or $direction == 'v' {
    $dir-val1: scale3d(1, 1, 1);
    $dir-val2: scale3d(0.75, 1.25, 1);
    $dir-val3: scale3d(1.25, 0.75, 1);
    $dir-val4: scale3d(0.85, 1.15, 1);
    $dir-val5: scale3d(1.05, 0.95, 1);
    $dir-val6: scale3d(0.95, 1.05, 1);
  } @else if
    $direction ==
    'right-diagonal' or
    $direction ==
    'rd' or
    $direction ==
    'diagonal1' or
    $direction ==
    'd1'
  {
    $dir-val1: skew(0, 0);
    $dir-val2: skew(25deg, 25deg);
    $dir-val3: skew(-15deg, -15deg);
    $dir-val4: skew(15deg, 15deg);
    $dir-val5: skew(-5deg, -5deg);
    $dir-val6: skew(5deg, 5deg);
  } @else if $direction == 'left-diagonal' or
    $direction == 'ld' or
    $direction == 'diagonal2' or
    $direction == 'd2'
  {
    $dir-val1: skew(0, 0);
    $dir-val2: skew(-25deg, -25deg);
    $dir-val3: skew(15deg, 15deg);
    $dir-val4: skew(-15deg, -15deg);
    $dir-val5: skew(5deg, 5deg);
    $dir-val6: skew(-5deg, -5deg);
  } @else if $direction != 'horizontal' and
    $direction != 'hor' and
    $direction != 'h'
  {
    @error '`#{meta.inspect($direction)}` is not a valid direction for the ' +
        '[ snappiness() ] mixin.';
  }

  @if meta.type-of($timing) != 'number' {
    @error 'Invalid $timing value of `#{$timing}` for the ' +
        '[ snappinesss ] mixin. The timing property must be a number.';
  } @else if math.is-unitless($timing) {
    // If no there is no unit for $timing, assume seconds
    $timing: $timing * 1s;
  } @else if not list.index('s' 'ms', math.unit($timing)) {
    @error 'Invalid $timing value of `#{$timing}` for the ' +
        '[ snappinesss ] mixin. The timing property must be in either s or ms units.';
  } @else if $timing % 10 == 0ms {
    // If time in ms would be shorter as seconds, convert it
    $timing: math.div($timing, 1000ms) * 1s;

    // Get rid of possible leading zero in front of decimal place
    @if string.slice($timing + '', 1, 2) == '0.' {
      $timing: string.unquote(string.slice($timing + '', 2));
    }
  }

  @if not $delay or
    $delay == 0 or
    $delay == 0s or
    $delay == 0ms or
    $delay == 'none' or
    $delay == 'no' or
    $delay == 'n' or
    $delay == 'n/a' or
    $delay == nil
  {
    $delay: null;
  }
  @if $delay {
    @if meta.type-of($delay) != 'number' {
      @error 'Invalid delay value of `#{meta.inspect($delay)}` for the ' +
          '`snappinesss` mixin. The delay property must be a number.';
    } @else if math.is-unitless($delay) {
      $delay: $delay * 1s;
    } @else if not list.index('s' 'ms', math.unit($delay)) {
      @error 'Invalid delay value of `#{meta.inspect($delay)}` for the ' +
          '`snappiness` mixin. The delay property must be in either `s` ' +
          '(seconds) or `ms` (milliseconds) units.';
    } @else if $delay % 10 == 0ms {
      $delay: math.div($delay, 1000ms) * 1s;

      @if string.slice($delay + '', 1, 2) == '0.' {
        $delay: #{string.slice($delay + '', 2)};
      }
    }
  }

  @if $iterations {
    @if meta.type-of($iterations) == 'string' {
      $iterations: string.to-lower-case($iterations);
    }

    @if $iterations == 'infinite' or $iterations == 'inf' or $iterations == 'i'
    {
      $iterations: infinite;
    } @else if (
        math.is-unitless($iterations) and meta.type-of($iterations) == 'number'
      ) or
      $iterations ==
      initial or
      $iterations ==
      inherit
    {
      $iterations: $iterations;
    } @else {
      @error 'Invalid $iterations value of `#{meta.inspect($iterations)}`' +
          ' for the `snappiness` mixin.';
    }
  } @else {
    $iterations: null;
  }

  @if not $anim-dir or
      $anim-dir ==
      'none' or
      $anim-dir ==
      'no' or
      $anim-dir ==
      'n/a' or
      $anim-dir ==
      'n' or
      $anim-dir ==
      'default' or
      $anim-dir ==
      'def' or
      $anim-dir ==
      'normal' or
      $anim-dir ==
      'nor'
  {
    $anim-dir: null;
  } @else if $anim-dir == 'reverse' or $anim-dir == 'rev' or $anim-dir == 'rvs' or $anim-dir == 'r' {
    $anim-drection: reverse;
  } @else if $anim-dir == 'alternate' or $anim-dir == 'alt' or $anim-dir == 'a'
  {
    $anim-dir: alternate;
  } @else if (
      $anim-dir ==
        'alternate-reverse' or
        $anim-dir ==
        'alternatereverse' or
        $anim-dir ==
        'alt-rev' or
        $anim-dir ==
        'altrev' or
        $anim-dir ==
        'a-r' or
        $anim-dir ==
        'ar'
    )
  {
    $anim-dir: alternate-reverse;
  } @else {
    @error 'Invalid animation-direction value of `#{$anim-dir}`' +
        ' for the `snappiness` mixin';
  }

  @if not $timing-func or
      $timing-func == 'none' or
      $timing-func == 'no' or
      $timing-func == 'n' or
      $timing-func == 'def' or
      $timing-func == 'default' or
      $timing-func == 'd' or
      $timing-func == 'ease'
  {
    $timing-func: null;
  }

  @if not $anim-num {
    $anim-num: null;
  } @else {
    $anim-num: '-#{$anim-num}';
  }

  animation: snap#{$anim-num} #{$timing} #{$timing-func} #{$delay} #{$iterations}
    #{$anim-dir} both;

  @at-root {
    @keyframes snap#{$anim-num} {
      0%,
      100% {
        transform: #{$dir-val1};
      }

      30% {
        transform: #{$dir-val2};
      }

      40% {
        transform: #{$dir-val3};
      }

      50% {
        transform: #{$dir-val4};
      }

      65% {
        transform: #{$dir-val5};
      }

      75% {
        transform: #{$dir-val6};
      }
    }
  }
}

/// Animates an element like it is a rubber band being pulled and snapped.
///
/// @param {String} $direction [horizontal] - The direction of the animation
/// occurs in. Can be horizontal (`horizontal`, `horiz`, or `h`), vertical
/// (`vertical`, `vert`, or `v`), right diagonal (`right-diagonal`, `rd`,
/// `diagonal1` or `d1`) or left-diagonal (`left-diagonal`, `ld`, `diagonal2`,
/// or `d2`).
/// @param {Time} $timing [0.9s] - The duration of the animation (s or ms).
/// @param {Time} $delay [null] - The optional delay of the animation (ms or s)
/// @param {Number|String} $iterations [null] - The number of iterations
/// for the animation to complete. If the value passed is not a number, it will
/// be set to infinite.
/// @param {Keyword} $anim-dir [null] - Sets the animation-direction property.
/// Can be `normal`, `reverse`, `alternate`, or `alternate-reverse`. Default of
/// null assumes the CSS property default of `normal`.
/// @param {Timing-Function} $timing-func [null] - The timing function for the
/// animation. A null $timing-func will create an animation with the CSS default
/// timiing-function of ease.
/// @param {Number|String} $anim-num [null] - If the mixin is used more than
/// once with different values in a stylesheet, you can pass a number or string
/// to the mixin here that gets appeneded to end of the animation name so that
/// the animations do not overwrite each other.
///
/// @group Animations
/// @throw Invalid $direction value
/// @throw Invalid $timing value
/// @throw Invalid $delay value
/// @throw Invalid $iterations value
/// @throw Invalid $anim-dir value
/// @alias snapiness
@mixin snap(
  $direction: horizontal,
  $timing: 0.9s,
  $delay: null,
  $iterations: null,
  $anim-dir: null,
  $timing-func: linear,
  $anim-num: null
) {
  @include snappiness(
    $direction,
    $timing,
    $delay,
    $iterations,
    $anim-dir,
    $timing-func,
    $anim-num
  );
}
