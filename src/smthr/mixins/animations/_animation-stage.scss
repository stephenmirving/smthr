@use 'sass:meta';
@use 'sass:list';
@use 'sass:math';

/// Apply the animation stage to the parent element of any element that has
/// a 3-D animation.
///
/// @param {Length|Keyword} $perspective [500px] - The perspective value that
/// will effect the child element's 3-d animation.
/// @param {Keyword|Length Percentage|List} $p-origin [55% 50%] - The
/// perspecitve-origin value that will effect the child element's 3-d animation
/// The syntax for this property can be just an x-position which can be the
/// keyword, `left` (equal to a 0 value), `center` (equal to 50%), or `right`
/// (equal to 100%), or can be a length-percentage. It can be also be in an
/// x-position y-position 2-value format. The y-position value can be the
/// keyword, `top` (equal to 0), `center` (equal to 50%), or `bottom` (equal to
/// 100%), or can it can be a length-percentage. (Ex: `left bottom` or
/// `100% 50%` or `left 30%). This property also accepts the global values of
/// inherit, initial, and unset as valid.
/// @param {Length-Percentage} $width [null] - The width of the element.
/// @param {Number} $z-index [null] - Sets the z-index value, if passed
/// @param {Length-Percentage} $height [$width] - The height of the element.
///
/// @group Animations
/// @group Utilities
/// @throw Invalid $perspective value
/// @throw Invalid $z-index value
@mixin animation-stage(
  $perspective: 500px,
  $p-origin: 55% 50%,
  $width: null,
  $z-index: null,
  $height: $width
) {
  @if $width {
    width: $width;
  }

  @if $height {
    height: $height;
  }

  @if $z-index and
    meta.type-of($z-index) ==
    'number' and
    math.is-unitless($z-index)
  {
    z-index: $z-index;
  }

  user-select: none;

  @if (
      meta.type-of($perspective) ==
        'number' and
        $perspective >
        0 and
        list.index('px' 'em' 'rem', math.unit($perspective))
    ) or
    $perspective ==
    'initial' or
    $perspective ==
    'inherit'
  {
    perspective: $perspective;
  }

  perspective-origin: $p-origin;
}
