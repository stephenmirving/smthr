@use 'sass:meta';
@use 'sass:list';
@use 'sass:math';
@use 'sass:string';

/// Generates an animation that slides an element in or out from or towards a
/// given direction.
///
/// @param {String|Boolean} $in-or-out [in] - Determines if the element will
/// slide `in` (or true, `i`) our `out` (or false, `o`).
/// @param {String} $direction [top] - Will either slide in from this
/// direction or slide out towards this direction.
/// @param {Time} $timing [.6s] - The duration of the animation (s or ms)
/// @param {Time} $delay [null] - The optional delay time for the animation.
/// @param {Number|String} $iterations [null] - The number of iterations
/// to complete. If the value passed is not a number, it will be set to infinite
/// @param {Keyword} $anim-dir [null] - Sets the animation-direction property.
/// Can be `normal`, `reverse`, `alternate`, or `alternate-reverse`. Default of
/// null assumes the CSS property default of `normal`.
/// @param {Timing-Function} $timing-func [null] - The timing function for the
/// animation. A null value passed here will default to the recommended timing
/// function for this animation of `cubic-bezier(0.25, 0.46, 0.45, 0.94)` on a
/// slide in and a timing function of `cubic-bezier(0.55, 0.085, 0.68, 0.53)`
/// on a slide out.
/// @param {Number|String} $anim-num [null] - If the mixin is used more than
/// once with different values in a stylesheet, you can pass a number or string
/// to the mixin here that gets appeneded to end of the animation name so that
/// the animations do not overwrite each other.
///
/// @group Animations
/// @throw Invalid $in-or-out value
/// @throw Invalid $timing value
/// @throw Invalid $delay value
/// @throw Invalid $iterations value
/// @throw Invalid $anim-dir value
@mixin slide(
  $in-or-out: in,
  $direction: top,
  $timing: 0.6s,
  $delay: null,
  $iterations: null,
  $anim-dir: null,
  $timing-func: null,
  $anim-num: null
) {
  // Default values for a slide in from the top
  $opacity-val1: 0;
  $opacity-val2: 1;
  $trans-val1: translateY(-1000px);
  $trans-val2: translateY(0);
  $temp-val: null;

  @if $in-or-out and meta.typeof($in-or-out) == 'string' {
    $in-or-out: string.to-lower-case($in-or-out);
  }

  @if $delay and $meta.typeof($delay) == 'string' {
    $delay: string.to-lower-case($delay);
  }

  @if $anim-dir and meta.typeof($anim-dir) == 'string' {
    $anim-dir: string.to-lower-case($anim-dir);
  }

  @if $timing-func and $meta.typeof($timing-func) == 'string' {
    $timing-func: string.to-lower-case($timing-func);
  }

  // Input scrubbing
  @if $in-or-out == true or $in-or-out == 'in' or $in-or-out == 'i' {
    $in-or-out: true;
  } @else if $in-or-out == false or $in-or-out == 'out' or $in-or-out == 'o' {
    $in-or-out: false;
  } @else {
    @error 'Invalid $in-or-out value of [#{meta.inspect($in-or-out)}] for the ' +
        '`slide` mixin.';
  }

  @if $direction {
    @if meta.typeof($direction) == 'string' {
      $direction: string.to-lower-case($direction);
    }

    @if $direction == 'bottom' or $direction == 'btm' or $direction == 'b' {
      $trans-val1: translateY(1000px);
    } @else if $direction == 'left' or $direction == 'l' {
      $trans-val1: translateX(-1000px);
      $trans-val2: translateX(0);
    } @else if $direction == 'right' or $direction == 'r' {
      $trans-val1: translateX(1000px);
      $trans-val2: translateX(0);
    } @else if
      $direction ==
      'top-left' or
      $direction ==
      'topleft' or
      $direction ==
      't-l' or
      $direction ==
      'tl' or
      $direction ==
      'left-top' or
      $direction ==
      'lefttop' or
      $direction ==
      'l-t' or
      $direction ==
      'lt'
    {
      $trans-val1: translateY(-1000px) translateX(-1000px);
      $trans-val2: translateY(0) translateX(0);
    } @else if (
        $direction ==
          'top-right' or
          $direction ==
          'topright' or
          $direction ==
          't-r' or
          $direction ==
          'tr' or
          $direction ==
          'right-top' or
          $direction ==
          'righttop' or
          $direction ==
          'r-t' or
          $direction ==
          'rt'
      )
    {
      $trans-val1: translateY(-1000px) translateX(1000px);
      $trans-val2: translateY(0) translateX(0);
    } @else if
      $direction ==
      'bottom-right' or
      $direction ==
      'bottomright' or
      $direction ==
      'b-r' or
      $direction ==
      'br' or
      $direction ==
      'right-bottom' or
      $direction ==
      'rightbottom' or
      $direction ==
      'r-b' or
      $direction ==
      'rb'
    {
      $trans-val1: translateY(1000px) translateX(1000px);
      $trans-val2: translateY(0) translateX(0);
    } @else if
      $direction ==
      'bottom-left' or
      $direction ==
      'bottomleft' or
      $direction ==
      'b-l' or
      $direction ==
      'bl' or
      $direction ==
      'left-bottom' or
      $direction ==
      'leftbottom' or
      $direction ==
      'l-b' or
      $direction ==
      'lb'
    {
      $trans-val1: translateY(1000px) translateX(-1000px);
      $trans-val2: translateY(0) translateX(0);
    } @else {
      @error 'Invalid direction of [#{meta.inspect($direction)}] chosen for the ' +
          '`slide` mixin.';
    }
  } @else {
    $direction: null;
  }

  @if not $in-or-out {
    // Swap values for slide-out state
    $temp-val: $opacity-val1;
    $opacity-val1: $opacity-val2;
    $opacity-val2: $temp-val;

    $temp-val: $trans-val1;
    $trans-val1: $trans-val2;
    $trans-val2: $temp-val;
  }

  @if meta.typeof($timing) != 'number' {
    @error 'Invalid timing value of [#{meta.inspect($timing)}] for the `slide` ' +
        'mixin. The timing property must be a number.';
  } @else if math.is-unitless($timing) {
    // If no there is no unit for $timing, assume seconds
    $timing: $timing * 1s;
  } @else if not list.index('s' 'ms', math.unit($timing)) {
    @error 'Invalid timing value of [#{meta.inspect($timing)}] for the `slide` mixin.' +
        'The timing property must be in either s or ms units.';
  } @else if $timing % 10 == 0ms {
    // If time in ms would be shorter as seconds, convert it
    $timing: math.div($timing, 1000ms) * 1s;

    // Get rid of possible leading zero in front of decimal place
    @if string.slice($timing + '', 1, 2) == '0.' {
      $timing: string.unquote(string.slice($timing + '', 2));
    }
  }

  @if $delay ==
    0 or
    $delay ==
    0s or
    $delay ==
    0ms or
    $delay ==
    'none' or
    $delay ==
    'no' or
    $delay ==
    'n' or
    $delay ==
    'n/a' or
    $delay ==
    nil or not
    $delay
  {
    $delay: null;
  }
  @if $delay {
    @if meta.typeof($delay) != 'number' {
      @error 'Invalid delay value of [#{meta.inspect($delay)}] for the ' +
          '`slide` mixin. The delay property must be a number.';
    } @else if math.is-unitless($delay) {
      $delay: $delay * 1s;
    } @else if not list.index('s' 'ms', math.unit($delay)) {
      @error 'Invalid delay value of [#{meta.inspect($delay)}] for the ' +
          '`slide` mixin. The delay property must be in either s or ms units.';
    } @else if $delay % 10 == 0ms {
      $delay: math.div($delay, 1000ms) * 1s;

      @if string.slice($delay + '', 1, 2) == '0.' {
        $delay: #{string.slice($delay + '', 2)};
      }
    }
  }

  @if $iterations {
    @if meta.typeof($iterations) == 'string' {
      $iterations: string.to-lower-case($iterations);
    }
    @if $iterations == 'infinite' or $iterations == 'inf' or $iterations == 'i'
    {
      $iterations: infinite;
    } @else if (
        math.is-unitless($iterations) and meta.typeof($iterations) == 'number'
      ) or
      $iterations ==
      initial or
      $iterations ==
      inherit
    {
      $iterations: $iterations;
    } @else {
      @error 'Invalid iteration-count value of [#{meta.inspect($iterations)}] for ' +
          'the `slide` mixin.';
    }
  }

  @if not
    $anim-dir or
    $anim-dir ==
    'none' or
    $anim-dir ==
    'no' or
    $anim-dir ==
    'n/a' or
    $anim-dir ==
    'n' or
    $anim-dir ==
    'default' or
    $anim-dir ==
    'def' or
    $anim-dir ==
    'normal' or
    $anim-dir ==
    'nor'
  {
    $anim-dir: null;
  } @else if $anim-dir == 'reverse' or $anim-dir == 'rev' or $anim-dir == 'r' {
    $anim-drection: reverse;
  } @else if $anim-dir == 'alternate' or $anim-dir == 'alt' or $anim-dir == 'a'
  {
    $anim-dir: alternate;
  } @else if
    $anim-dir ==
    'alternate-reverse' or
    $anim-dir ==
    'alternatereverse' or
    $anim-dir ==
    'alt-rev' or
    $anim-dir ==
    'altrev' or
    $anim-dir ==
    'a-r' or
    $anim-dir ==
    'ar'
  {
    $anim-dir: alternate-reverse;
  } @else {
    @error 'Invalid animation-direction value of [#{meta.inspect($anim-dir)}] for the ' +
        '`slide` mixin';
  }

  @if not
    $timing-func or
    $timing-func ==
    true or
    $timing-func ==
    'none' or
    $timing-func ==
    'no' or
    $timing-func ==
    'n' or
    $timing-func ==
    'def' or
    $timing-func ==
    'default' or
    $timing-func ==
    'd'
  {
    // Take all potential values the user might pass to keep the default setting
    // and ensure that the timing function remains at that default
    $timing-func: if(
      ($in-or-out),
      cubic-bezier(0.25, 0.46, 0.45, 0.94),
      cubic-bezier(0.55, 0.085, 0.68, 0.53)
    );
  }

  @if not $anim-num {
    $anim-num: null;
  }

  animation: slide#{$anim-num} #{$timing} #{$timing-func} #{$delay} #{$iterations}
    #{$anim-dir} both;

  @at-root {
    @keyframes slide#{$anim-num} {
      0% {
        opacity: $opacity-val1;
        transform: $trans-val1;
      }

      100% {
        opacity: $opacity-val2;
        transform: $trans-val2;
      }
    }
  }
}
