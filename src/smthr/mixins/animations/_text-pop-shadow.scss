/// Animates text by popping forward out from a shadow.
///
/// @param {String} $direction [top] - The direction the shadow will be
/// facing. Recommended to use this mixin with the animation-stage mixin or just
/// the perspective property on the parent element.
/// @param {Time} $timing [0.6s] - The duration of the animation (s or ms).
/// @param {Time} $delay [null] - The optional delay time for the animation.
/// @param {Number|String} $iterations [null] - The number of iterations
/// for the animation to complete. If the value passed is not a number, it will
/// be set to infinite.
/// @param {Keyword} $anim-dir [null] - Sets the animation-direction property.
/// Can be `normal`, `reverse`, `alternate`, or `alternate-reverse`. Default of
/// null assumes the CSS property default of `normal`.
/// @param {Timing-Function} $timing-func [null] - The timing function for the
/// animation. Default value of null will be the default CSS timing-function
/// propertiy's value of ease.
/// @param {Number|String} $anim-num [null] - If the mixin is used more than
/// once with different values in a stylesheet, you can pass a number or string
/// to the mixin here that gets appeneded to end of the animation name so that
/// the animations do not overwrite each other.
///
/// @group Animations
/// @throw Invalid $direction value
/// @throw Invalid $timing value
/// @throw Invalid $delay value
/// @throw Invalid $anim-dir value
@mixin text-pop-shadow(
  $direction: 'top',
  $timing: 0.6s,
  $delay: null,
  $iterations: null,
  $anim-dir: null,
  $timing-func: null,
  $anim-num: null
) {
  //  Default value for the 'top' direction
  $trans-val1: translateY(0);
  $shadow-val: 0 -1px #555, 0 -2px #555, 0 -3px #555, 0 -4px #555,
               0 -5px #555, 0 -6px #555, 0 -7px #555, 0 -8px #555;
  $trans-val2: translateY(8px);
  @if (string.to-lower-case($direction) == 'top-right'
      or string.to-lower-case($direction) == 'topright'
      or string.to-lower-case($direction) == 'right-top'
      or string.to-lower-case($direction) == 'righttop'
      or string.to-lower-case($direction) == 't-r'
      or string.to-lower-case($direction) == 'tr'
      or string.to-lower-case($direction) == 'r-t'
      or string.to-lower-case($direction) == 'rt') {
    $trans-val1: translateX(0) translateY(0);
    $trans-val2: translateX(-8px) translateY(8px);
    $shadow-val: 1px -1px #555, 2px -2px #555, 3px -3px #555, 4px -4px #555,
                 5px -5px #555, 6px -6px #555, 7px -7px #555, 8px -8px #555;
  } @else if (
    string.to-lower-case($direction) == 'right' or string.to-lower-case($direction) == 'r'
  ) {
    $trans-val1: translateX(0);
    $trans-val2: translateX(-8px);
    $shadow-val: 1px 0 #555, 2px 0 #555, 3px 0 #555, 4px 0 #555,
                 5px 0 #555, 6px 0 #555, 7px 0 #555, 8px 0 #555;
  } @else if (string.to-lower-case($direction) == 'bottom-right'
      or string.to-lower-case($direction) == 'bottomright'
      or string.to-lower-case($direction) == 'right-bottom'
      or string.to-lower-case($direction) == 'rightbottom'
      or string.to-lower-case($direction) == 'b-r'
      or string.to-lower-case($direction) == 'br'
      or string.to-lower-case($direction) == 'r-b'
      or string.to-lower-case($direction) == 'r-b') {
    $trans-val1: translateX(0) translateY(0);
    $trans-val2: translateX(-8px) translateY(-8px);
    $shadow-val: 1px 1px #555, 2px 2px #555, 3px 3px #555, 4px 4px #555,
                 5px 5px #555, 6px 6px #555, 7px 7px #555, 8px 8px #555;
  } @else if (string.to-lower-case($direction) == 'bottom'
      or string.to-lower-case($direction) == 'btm'
      or string.to-lower-case($direction) == 'b') {
    $trans-val2: translateY(-8px);
    $shadow-val: 0 1px #555, 0 2px #555, 0 3px #555, 0 4px #555,
                 0 5px #555, 0 6px #555, 0 7px #555, 0 8px #555;
  } @else if (string.to-lower-case($direction) == 'bottom-left'
      or string.to-lower-case($direction) == 'bottomleft'
      or string.to-lower-case($direction) == 'left-bottom'
      or string.to-lower-case($direction) == 'leftbottom'
      or string.to-lower-case($direction) == 'b-l'
      or string.to-lower-case($direction) == 'bl'
      or string.to-lower-case($direction) == 'l-b'
      or string.to-lower-case($direction) == 'lb') {
    $trans-val1: translateX(0) translateY(0);
    $trans-val2: translateX(8px) translateY(-8px);
    $shadow-val: -1px 1px #555, -2px 2px #555, -3px 3px #555, -4px 4px #555,
                 -5px 5px #555, -6px 6px #555, -7px 7px #555, -8px 8px #555;
  } @else if (string.to-lower-case($direction) == 'left'
  or string.to-lower-case($direction) == 'l') {
    $trans-val1: translateX(0);
    $trans-val2: translateX(8px);
    $shadow-val: -1px 0 #555, -2px 0 #555, -3px 0 #555, -4px 0 #555,
                 -5px 0 #555, -6px 0 #555, -7px 0 #555, -8px 0 #555;
  } @else if (string.to-lower-case($direction) == 'top-left'
      or string.to-lower-case($direction) == 'topleft'
      or string.to-lower-case($direction) == 'left-top'
      or string.to-lower-case($direction) == 'lefttop'
      or string.to-lower-case($direction) == 't-l'
      or string.to-lower-case($direction) == 'tl'
      or string.to-lower-case($direction) == 'l-t'
      or string.to-lower-case($direction) == 'lt') {
    $trans-val1: translateX(0) translateY(0);
    $trans-val2: translateX(8px) translateY(8px);
    $shadow-val: -1px -1px #555, -2px -2px #555, -3px -3px #555,
                 -4px -4px #555, -5px -5px #555, -6px -6px #555,
                 -7px -7px #555, -8px -8px #555;
  } @else if (string.to-lower-case($direction) != 'top'
      and string.to-lower-case($direction) != 't') {
    @error 'Invalid direction value of [#{meta.inspect($direction)}] for the ' +
        '`text-pop-shadow` mixin.';
  }

  @if meta.typeof($timing) != 'number' {
    @error 'Invalid timing value of [#{meta.inspect($timing)}] for the `text-pop-shadow` ' +
        'mixin. The timing property must be a number.';
  } @else if math.is-unitless($timing) {
    // If no there is no unit for $timing, assume seconds
    $timing: $timing * 1s;
  } @else if not list.index('s' 'ms', math.unit($timing)) {
    @error 'Invalid timing value of [#{meta.inspect($timing)}] for the `text-pop-shadow` ' +
        'mixin. The timing property must be in either s or ms units.';
  } @else if $timing % 10 == 0ms {
    // If time in ms would be shorter as seconds, convert it
    $timing: math.div($timing, 1000ms) * 1s;

    // Get rid of possible leading zero in front of decimal place
    @if string.slice($timing + '', 1, 2) == '0.' {
      $timing: string.unquote(string.slice($timing + '', 2));
    }
  }

  @if ($delay == 0 or $delay == 0s or $delay == 0ms or $delay == 'none'
      or $delay 'no' or $delay == 'n' or $delay == 'n/a' or $delay == nil) {
    $delay: null;
  }
  @if $delay {
    @if meta.typeof($delay) != 'number' {
      @error 'Invalid delay value of [#{meta.inspect($delay)}] for the `text-pop-shadow` ' +
          'mixin. The delay property must be a number.';
    } @else if math.is-unitless($delay) {
      // If no there is no unit for $delay, assume seconds
      $delay: $delay * 1s;
    } @else if not list.index('s' 'ms', math.unit($delay)) {
      @error 'Invalid delay value of [#{meta.inspect($delay)}] for the `text-pop-shadow` ' +
          'mixin. The delay property must be in either s or ms units.';
    } @else if $delay % 10 == 0ms {
      $delay: math.div($delay, 1000ms) * 1s;

      @if string.slice($delay + '', 1, 2) == '0.' {
        $delay: #{string.slice($delay + '', 2)};
      }
    }
  }

  @if $iterations {
    @if meta.typeof($iterations) == 'string' {
      $iterations: string.to-lower-case($iterations);
    }

    @if
      $iterations == 'infinite' or $iterations == 'inf' or $iterations == 'i'
    {
      $iterations: infinite;
    } @else if (
      (math.is-unitless($iterations) and meta.typeof($iterations) == 'number') or
      $iterations == initial or $iterations == inherit
    ) {
      $iterations: $iterations;
    } @else {
      @error 'Invalid iteration-count value of [#{meta.inspect($iterations)}] for the ' +
          '`text-pop-shadow` mixin.';
    }
  } @else {
    $iterations: null;
  }

  @if (
    not $anim-dir or $anim-dir == 'none' or $anim-dir == 'no' or
    $anim-dir == 'n/a' or $anim-dir == 'n' or $anim-dir == 'default' or
    $anim-dir == 'def' or $anim-dir == 'normal' or $anim-dir == 'nor'
  ) {
    $anim-dir: null;
  } @else if (
    $anim-dir == 'reverse' or $anim-dir == 'rev' or $anim-dir == 'r'
  ) {
    $anim-drection: reverse;
  } @else if (
    $anim-dir == 'alternate' or $anim-dir == 'alt' or $anim-dir == 'a'
  ) {
    $anim-dir: alternate;
  } @else if (
    $anim-dir == 'alternate-reverse' or $anim-dir == 'alternatereverse' or
    $anim-dir == 'alt-rev' or $anim-dir == 'altrev' or $anim-dir == 'a-r' or
    $anim-dir == 'ar'
  ) {
    $anim-dir: alternate-reverse;
  } @else {
    @error 'Invalid animation-direction value of [#{meta.inspect($anim-dir)}] for the ' +
        '`text-pop-shadow` mixin';
  }

  @if (
    not $timing-func or $timing-func == true or $timing-func == 'none' or
    $timing-func == 'no' or $timing-func == 'n' or $timing-func == 'def' or
    $timing-func == 'default' or $timing-func == 'd'
  ) {
    // Take all potential values the user might pass to keep the default setting
    // and ensure that the timing function remains at that default
    $timing-func: null;
  }

  @if not $anim-num {
    $anim-num: null;
  }
  animation: txt-shadow-pop#{$anim-num} #{$timing} #{$timing-func}
              #{$delay} #{$iterations} #{$anim-dir} both;

  @at-root {
    @keyframes txt-shadow-pop#{$anim-num} {
      0% {
        text-shadow: 0 0 #555, 0 0 #555, 0 0 #555, 0 0 #555,
                     0 0 #555, 0 0 #555, 0 0 #555, 0 0 #555;
        transform: #{$trans-val1};
      }

      100% {
        text-shadow: #{$shadow-val};
        transform: #{$trans-val2};
      }
    }
  }
}
