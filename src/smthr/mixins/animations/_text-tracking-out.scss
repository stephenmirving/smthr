@use 'sass:meta';
@use 'sass:string';
@use 'sass:list';
@use 'sass:math';

/// Animates text by tracking it into view
///
/// @param {String|Boolean} $expand-contract [contract] - Determines whether
/// the text will expand or contract as it animates.
/// @param {Boolean|String} $direction [false] - If true, will track in from a
/// direction, appearing to come from a forward direction on an expand animation
/// and appearing to come from the back, behind the point of view, on a contract
/// animation. If false (or null, `f`, `none`, `n/a`, `no`, `n`) the animation
/// will remain in one place.
/// @param {String} $origin [null] - The orientation the animation appears to
/// be extracting from or contracting towards. Can be `top` (or `t`), `bottom`
/// (or `btm`, `b`), or null (or false, `default`, `def`, `no`, `n/a`,
/// `none`, `n`).
/// @param {Time} $timing [.9s] - The duration of the animation (s or ms).
/// @param {Time} $delay [null] - The optional delay time for the animation.
/// @param {Number|String} $iterations [null] - The number of iterations
/// for the animation to complete. If the value passed is not a number, it will
/// be set to infinite.
/// @param {Keyword} $anim-dir [null] - Sets the animation-direction
/// property. Can be `normal`, `reverse`, `alternate`, or `alternate-reverse`.
/// Default of null assumes the default of `normal`.
/// @param {Timing-Function} $timing-func [cubic-bezier(0.55, 0.085, 0.68, 0.53)] -
/// The timing function for the animation. Using the default is recommended.
/// @param {Number|String} $anim-num [null] - If the mixin is used more than
/// once with different values in a stylesheet, you can pass a number or string
/// to the mixin here that gets appeneded to end of the animation name so that
/// the animations do not overwrite each other.
///
/// @group Animations
/// @throw Invalid $expand-contract value
/// @throw Invalid $direction value
/// @throw Invalid $origin value
/// @throw Invalid $timing value
/// @throw Invalid $delay value
/// @throw Invalid $anim-dir value
@mixin text-tracking-out(
  $expand-contract: 'contract',
  $direction: null,
  $origin: null,
  $timing: 0.8s,
  $delay: null,
  $iterations: null,
  $anim-dir: null,
  $timing-func: cubic-bezier(0.55, 0.085, 0.68, 0.53),
  $anim-num: null
) {
  @if $expand-contract and meta.type-of($expand-contract) == 'string' {
    $expand-contract: string.to-lower-case($expand-contract);
  }

  @if $direction and meta.type-of($direction) == 'string' {
    $direction: string.to-lower-case($direction);
  }

  @if $origin and meta.type-of($origin) == 'string' {
    $origin: string.to-lower-case($origin);
  }

  @if $delay and meta.type-of($delay) == 'string' {
    $delay: string.to-lower-case($delay);
  }

  @if $anim-dir and meta.type-of($anim-dir) == 'string' {
    $anim-dir: string.to-lower-case($anim-dir);
  }

  @if $timing-func and meta.type-of($timing-func) == 'string' {
    $timing-func: string.to-lower-case($timing-func);
  }

  @if $expand-contract ==
    'expand' or
    $expand-contract ==
    true or
    $expand-contract ==
    'exp' or
    $expand-contract ==
    'e'
  {
    $expand-contract: true;
  } @else if not
    $expand-contract or
    $expand-contract ==
    'c' or
    string.slice($expand-contract + '', 1, 3) ==
    'con'
  {
    $expand-contract: false;
  }

  @if $direction == true or $direction == 't' {
    $direction: true;
  } @else if not
    $direction or
    $direction ==
    'f' or
    $direction ==
    'none' or
    $direction ==
    'n' or
    $direction ==
    'n/a' or
    $direction ==
    'no'
  {
    $direction: false;
  } @else {
    @error 'Invalid $direction value of [#{meta.inspect($direction)}] for the ' +
        '`text-tracking-out` mixin.';
  }

  @if $origin == 'top' or $origin == 't' {
    $origin: 'top';
  } @else if $origin == 'bottom' or $origin == 'btm' or $origin == 'b' {
    $origin: 'bottom';
  } @else if not
    $origin or
    $origin ==
    'default' or
    $origin ==
    'def' or
    $origin ==
    'd' or
    $origin ==
    'no' or
    $origin ==
    'none' or
    $origin ==
    'n/a' or
    $origin ==
    'n'
  {
    $origin: null;
  } @else {
    @error 'Invalid origin value of `#{meta.inspect($origin)}` for the ' +
        '`text-tracking-out` mixin.';
  }

  @if meta.type-of($timing) != 'number' {
    @error 'Invalid timing value of [#{meta.inspect($timing)}] for the ' +
        '`text-tracking-out` mixin. The timing property must be a number.';
  } @else if math.is-unitless($timing) {
    // If no there is no unit for $timing, assume seconds
    $timing: $timing * 1s;
  } @else if not list.index('s' 'ms', math.unit($timing)) {
    @error 'Invalid timing value of [#{meta.inspect($timing)}] for the ' +
        '`text-tracking-out` mixin. The timing property must be in either ' +
        's (seconds) or ms (milliseconds) units.';
  } @else if $timing % 10 == 0ms {
    // If time in ms would be shorter as seconds, convert it
    $timing: math.div($timing, 1000ms) * 1s;

    // Get rid of possible leading zero in front of decimal place
    @if string.slice($timing + '', 1, 2) == '0.' {
      $timing: string.unquote(string.slice($timing + '', 2));
    }
  }

  @if $delay ==
    0 or
    $delay ==
    0s or
    $delay ==
    0ms or
    $delay ==
    'none' or
    $delay ==
    'no' or
    $delay ==
    'n' or
    $delay ==
    'n/a' or
    $delay ==
    nil or not
    $delay
  {
    $delay: null;
  }
  @if $delay {
    @if meta.type-of($delay) != 'number' {
      @error 'Invalid delay value of [#{meta.inspect($delay)}] for the ' +
          '`text-tracking-out` mixin. The delay property must be a number.';
    } @else if math.is-unitless($delay) {
      // If no there is no unit for $delay, assume seconds
      $delay: $delay * 1s;
    } @else if not list.index('s' 'ms', math.unit($delay)) {
      @error 'Invalid delay value of [#{meta.inspect($delay)}] for the ' +
          '`text-tracking-out` mixin. The delay property must be in either ' +
          '`s` (seconds) or `ms` (milliseconds) units.';
    } @else if $delay % 10 == 0ms {
      // If time in ms would be shorter as seconds, convert it
      $delay: math.div($delay, 1000ms) * 1s;

      @if string.slice($delay + '', 1, 2) == '0.' {
        $delay: #{string.slice($delay + '', 2)};
      }
    }
  }

  @if $iterations {
    @if meta.type-of($iterations) == 'string' {
      $iterations: string.to-lower-case($iterations);
    }

    @if $iterations == 'infinite' or $iterations == 'inf' or $iterations == 'i'
    {
      $iterations: infinite;
    } @else if (
        math.is-unitless($iterations) and meta.type-of($iterations) == 'number'
      ) or
      $iterations ==
      initial or
      $iterations ==
      inherit
    {
      $iterations: $iterations;
    } @else {
      @error 'Invalid iteration-count value of [#{meta.inspect($iterations)}] for the ' +
          '`text-tracking-out` mixin.';
    }
  } @else {
    $iterations: null;
  }

  @if not
    $anim-dir or
    $anim-dir ==
    'none' or
    $anim-dir ==
    'no' or
    $anim-dir ==
    'n/a' or
    $anim-dir ==
    'n' or
    $anim-dir ==
    'default' or
    $anim-dir ==
    'def' or
    $anim-dir ==
    'normal' or
    $anim-dir ==
    'nor'
  {
    $anim-dir: null;
  } @else if $anim-dir == 'reverse' or $anim-dir == 'rev' or $anim-dir == 'r' {
    $anim-drection: reverse;
  } @else if $anim-dir == 'alternate' or $anim-dir == 'alt' or $anim-dir == 'a'
  {
    $anim-dir: alternate;
  } @else if
    $anim-dir ==
    'alternate-reverse' or
    $anim-dir ==
    'alternatereverse' or
    $anim-dir ==
    'alt-rev' or
    $anim-dir ==
    'altrev' or
    $anim-dir ==
    'a-r' or
    $anim-dir ==
    'ar'
  {
    $anim-dir: alternate-reverse;
  } @else {
    @error 'Invalid animation-direction value of [#{meta.inspect($anim-dir)}] for the ' +
        '`text-tracking-out` mixin';
  }

  @if not
    $timing-func or
    $timing-func ==
    true or
    $timing-func ==
    'none' or
    $timing-func ==
    'no' or
    $timing-func ==
    'n' or
    $timing-func ==
    'def' or
    $timing-func ==
    'default' or
    $timing-func ==
    'd' or
    $timing-func ==
    0
  {
    // Take all potential values the user might pass to keep the default setting
    // and ensure that the timing function remains at that default
    $timing-func: cubic-bezier(0.55, 0.085, 0.68, 0.53);
  }

  @if not $anim-num {
    $anim-num: null;
  }

  @if $anim-num {
    $anim-num: '-' + $anim-num;
  }

  @if $direction {
    transform: translate3d(0, 0, 0);
    transform-style: preserve-3d;
  }

  animation: txt-track-out#{$anim-num} #{$timing} #{$timing-func} #{$delay} #{$iterations}
    #{$anim-dir} both;

  @at-root {
    @keyframes txt-track-out#{$anim-num} {
      0% {
        opacity: 1;

        @if not $expand-contract {
          @if $direction {
            @if not $origin {
              transform: translateZ(0);
            } @else {
              transform: translateZ(0) translateY(0);
            }
          }
        } @else {
          @if $direction {
            @if not $origin {
              transform: translateZ(0);
            } @else {
              transform: translateZ(0) translateY(0);
            }
          }
        }
      }

      @if not $expand-contract and not $direction and not $origin {
        50% {
          opacity: 1;
        }
      } @else {
        60% {
          @if not $expand-contract {
            opacity: 1;
          } @else {
            opacity: 0.8;
          }
        }
      }

      100% {
        opacity: 0;

        @if not $expand-contract {
          letter-spacing: -0.5em;

          @if $direction {
            @if not $origin {
              transform: translateZ(-500px);
            } @else if $origin == 'top' {
              transform: translateZ(-500px) translateY(-300px);
            } @else {
              transform: translateZ(-500px) translateY(300px);
            }
          }
        } @else {
          letter-spacing: 1em;

          @if $direction {
            @if not $origin {
              transform: translateZ(300px);
            } @else if $origin == 'top' {
              transform: translateZ(300px) translateY(-200px);
            } @else {
              transform: translateZ(300px) translateY(200px);
            }
          }
        }
      }
    }
  }
}
