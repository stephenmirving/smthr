@use 'sass:meta';
@use 'sass:list';
@use 'sass:math';
@use 'sass:string';

/// An animation that bounces an element in to view
///
/// @param {String|Boolean} $in-or-out [in] - Determines if the element will
/// bounce `in` (or true, `i`) our `out` (or false, `o`).
/// @param {String} $direction [top] - The direction the animation will appear
/// to be bouncing in from or bouncing out towards.
/// @param {Time} $timing [null] The duration of the animation (s or ms).
/// @param {Time} $delay [null] - The optional delay time for the animation.
/// @param {Number|String} $iterations [null] - The number of iterations
/// to complete. If the value passed is not a number, it will be set to infinite.
/// @param {Keyword} $anim-dir [null] - Sets the animation-direction property.
/// Can be `normal`, `reverse`, `alternate`, or `alternate-reverse`. Default of
/// null assumes the CSS property default of `normal`.
/// @param {Timing-Function} $timing-func [null] - The timing function for the
/// animation. The default of null applies the default timing function of ease.
/// @param {Number|String} $anim-num [null] - If the mixin is used more than
/// once with different values in a stylesheet, you can pass a number or string
/// to the mixin here that gets appeneded to end of the animation name so that
/// the animations do not overwrite each other.
///
/// @group Animations
/// @throw Invalid $in-or-out value
/// @throw Invalid $direction value
/// @throw Invalid $timing value
/// @throw Invalid $delay value
/// @throw Invalid $iterations value
/// @throw Invalid $anim-dir value
@mixin bounce(
  $in-or-out: in,
  $direction: top,
  $timing: null,
  $delay: null,
  $iterations: null,
  $anim-dir: null,
  $timing-func: null,
  $anim-num: null
) {
  // Default values for bounce in from the top $direction
  $dir-val1: translateY(-500px);
  $dir-val2: translateY(0);
  $dir-val3: translateY(-65px);
  $dir-val4: translateY(-28px);
  $dir-val5: translateY(-8px);
  $xtra-val: null;
  $fwd-bck: false;

  // Input scrubbing
  @if $in-or-out == true or $in-or-out == 'in' or $in-or-out == 'i' {
    $in-or-out: true;
  } @else if $in-or-out == false or $in-or-out == 'out' or $in-or-out == 'o' {
    $in-or-out: false;
  } @else {
    @error 'Invalid value for $in-or-out of [ #{meta.inspect($in-or-out)} ] ' +
        'for the `bounce` mixin.';
  }

  $direction: string.to-lower-case($direction);

  @if $direction == 'bottom' or $direction == 'b' or $direction == 'down' {
    $direction: 'bottom';
  } @else if $direction == 'right' or $direction == 'r' {
    $direction: 'right';
  } @else if $direction == 'left' or $direction == 'l' {
    $direction: 'left';
  } @else if
    $direction ==
    'forward' or
    $direction ==
    'forwards' or
    $direction ==
    'fwd' or
    $direction ==
    'f'
  {
    $direction: 'forward';
    $fwd-bck: true;
  } @else if
    $direction ==
    'backward' or
    $direction ==
    'backwards' or
    $direction ==
    'bckwrd' or
    $direction ==
    'back' or
    $direction ==
    'bck' or
    $direction ==
    'b'
  {
    $direction: 'backward';
    $fwd-bck: true;
  } @else if
    $direction ==
    'top' or
    $direction !=
    't' or
    $direction !=
    'up' or
    $direction !=
    'u'
  {
    $direction: 'top';
  } @else {
    @error '[ #{meta.inspect($direction)} ] is not a valid direction for the `bounce` mixin.';
  }

  @if $in-or-out {
    @if $direction == 'bottom' {
      $dir-val1: translateY(500px);
      $dir-val2: translateY(0);
      $dir-val3: translateY(65px);
      $dir-val4: translateY(28px);
      $dir-val5: translateY(8px);
    } @else if $direction == 'right' {
      $dir-val1: translateX(600px);
      $dir-val2: translateX(0);
      $dir-val3: translateX(68px);
      $dir-val4: translateX(32px);
      $dir-val5: translateX(8px);
    } @else if $direction == 'left' {
      $dir-val1: translateX(-600px);
      $dir-val2: translateX(0);
      $dir-val3: translateX(-68px);
      $dir-val4: translateX(-32px);
      $dir-val5: translateX(-8px);
    } @else if $direction == 'forward' {
      $dir-val1: scale(0);
      $dir-val2: scale(1);
      $dir-val3: scale(0.7);
      $dir-val4: scale(0.84);
      $dir-val5: scale(0.95);
    } @else if
      $direction ==
      'backward' or
      $direction ==
      'bckwrd' or
      $direction ==
      'back' or
      $direction ==
      'bck' or
      $direction ==
      'b'
    {
      $dir-val1: scale(7);
      $dir-val2: scale(1);
      $dir-val3: scale(1.5);
      $dir-val4: scale(1.24);
      $dir-val5: scale(1.04);
    }
  } @else {
    @if $direction == 'top' {
      $dir-val1: translateY(0);
      $dir-val2: translateY(-30px);
      $dir-val3: translateY(-38px);
      $dir-val4: translateY(-75px);
      $dir-val5: translateY(-800px);
    } @else if $direction == 'bottom' {
      $dir-val1: translateY(0);
      $dir-val2: translateY(30px);
      $dir-val3: translateY(38px);
      $dir-val4: translateY(75px);
      $dir-val5: translateY(800px);
    } @else if $direction == 'right' {
      $dir-val1: translateX(0);
      $dir-val2: translateX(30px);
      $dir-val3: translateX(38px);
      $dir-val4: translateX(80px);
      $dir-val5: translateX(1000px);
    } @else if $direction == 'left' {
      $dir-val1: translateX(0);
      $dir-val2: translateX(-30px);
      $dir-val3: translateX(-38px);
      $dir-val4: translateX(-80px);
      $dir-val5: translateX(-1000px);
    } @else if $direction == 'forward' {
      $dir-val1: translateZ(0);
      $dir-val2: translateZ(90px);
      $dir-val3: translateZ(95px);
      $dir-val4: translateZ(150px);
      $dir-val5: translateZ(500px);
    } @else if
      $direction ==
      'backward' or
      $direction ==
      'bckwrd' or
      $direction ==
      'back' or
      $direction ==
      'bck' or
      $direction ==
      'b'
    {
      $dir-val1: translateZ(0);
      $dir-val2: translateZ(-100px);
      $dir-val3: translateZ(-110px);
      $dir-val4: translateZ(-200px);
      $dir-val5: translateZ(-900px) scale(0);
      $xtra-val: translateZ(0) scale(1);
    }
  }

  @if not $timing {
    $timing: if(($in-or-out), 1.1s, 1.5s);
  }
  @if meta.type-of($timing) != 'number' {
    @error 'Invalid $timing value of [ #{meta.inspect($timing)} ] for the `bounce` ' +
        'mixin. The timing property must be a number.';
  } @else if math.is-unitless($timing) {
    // If no there is no unit for $timing, assume seconds
    $timing: $timing * 1s;
  } @else if not list.index('s' 'ms', math.unit($timing)) {
    @error 'Invalid $timing value of [ #{meta.inspect($timing)} ] for the `bounce` ' +
        'mixin. The timing property must be in either s or ms units.';
  } @else if $timing % 10 == 0ms {
    // If time in ms would be shorter as seconds, convert it
    $timing: math.div($timing, 1000ms) * 1s;

    // Get rid of possible leading zero in front of decimal place
    @if string.slice($timing + '', 1, 2) == '0.' {
      $timing: string.unquote(string.slice($timing + '', 2));
    }
  }

  @if (
    $delay ==
      0 or
      $delay ==
      0s or
      $delay ==
      0ms or
      $delay ==
      'none' or
      $delay ==
      'no' or
      $delay ==
      'n' or
      $delay ==
      'n/a' or
      $delay ==
      nil or not
      $delay
  ) {
    $delay: null;
  }
  @if $delay {
    @if meta.type-of($delay) != 'number' {
      @error 'Invalid delay value of [ #{meta.inspect($delay)} ] for the `bounce` ' +
          'mixin. The delay property must be a number.';
    } @else if math.is-unitless($delay) {
      $delay: $delay * 1s;
    } @else if not list.index('s' 'ms', math.unit($delay)) {
      @error 'Invalid delay value of [ #{meta.inspect($delay)} ] for the `bounce` ' +
          'mixin. The delay property must be in either s or ms units.';
    } @else if $delay % 10 == 0ms {
      $delay: math.div($delay, 1000ms) * 1s;

      @if string.slice($delay + '', 1, 2) == '0.' {
        $delay: #{string.slice($delay + '', 2)};
      }
    }
  }

  @if $iterations {
    @if meta.type-of($iterations) == 'string' {
      $iterations: string.to-lower-case($iterations);
    }

    @if
      $iterations == 'infinite' or $iterations == 'inf' or $iterations == 'i'
    {
      $iterations: infinite;
    } @else if
      (
        (math.is-unitless($iterations) and meta.type-of($iterations) == 'number') or
          $iterations ==
          initial or
          $iterations ==
          inherit
      )
    {
      $iterations: $iterations;
    } @else {
      @error 'Invalid iteration-count value of [ #{meta.inspect($iterations)} ] for the ' +
          '`bounce` mixin.';
    }
  }

  @if (
    not
      $anim-dir or
      $anim-dir ==
      'none' or
      $anim-dir ==
      'no' or
      $anim-dir ==
      'n/a' or
      $anim-dir ==
      'n' or
      $anim-dir ==
      'default' or
      $anim-dir ==
      'def' or
      $anim-dir ==
      'normal' or
      $anim-dir ==
      'nor'
  ) {
    $anim-dir: null;
  } @else if $anim-dir == 'reverse' or $anim-dir == 'rev' or $anim-dir == 'r' {
    $anim-drection: reverse;
  } @else if $anim-dir == 'alternate' or $anim-dir == 'alt' or $anim-dir == 'a'
  {
    $anim-dir: alternate;
  } @else if
    $anim-dir ==
    'alternate-reverse' or
    $anim-dir ==
    'alt-rev' or
    $anim-dir ==
    'alternatereverse' or
    $anim-dir ==
    'altrev' or
    $anim-dir ==
    'a-r' or
    $anim-dir ==
    'ar'
  {
    $anim-dir: alternate-reverse;
  } @else {
    @error 'Invalid animation-direction value of [ #{meta.inspect($anim-dir)} ] for the ' +
        '`bounce` mixin';
  }

  @if (
    not
      $timing-func or
      $timing-func ==
      true or
      $timing-func ==
      'none' or
      $timing-func ==
      'no' or
      $timing-func ==
      'n' or
      $timing-func ==
      'def' or
      $timing-func ==
      'default' or
      $timing-func ==
      'd' or
      $timing-func ==
      'ease'
  ) {
    // Take all potential values the user might pass to keep the default setting
    // and ensure that the timing function remains at that default
    $timing-func: null;
  }

  animation: bounce#{$anim-num} #{$timing} #{$timing-func} #{$delay} #{$iterations}
    #{$anim-dir} both;
  @if $fwd-bck {
    transform: translate3d(0, 0, 0);
    transform-style: preserve-3d;
  }

  @at-root {
    @keyframes bounce#{$anim-num} {
      @if $in-or-out {
        0% {
          opacity: 0;
          transform: #{$dir-val1};
          animation-timing-function: ease-in;
        }

        38% {
          opacity: 1;
          transform: #{$dir-val2};
          animation-timing-function: ease-out;
        }

        55% {
          transform: #{$dir-val3};
          animation-timing-function: ease-in;
        }

        @if not $fwd-bck {
          72%,
          90%,
          100% {
            transform: #{$dir-val2};
            animation-timing-function: ease-out;
          }
        } @else {
          72%,
          89%,
          100% {
            transform: #{$dir-val2};
            animation-timing-function: ease-out;
          }
        }

        81% {
          transform: #{$dir-val4};
          animation-timing-function: ease-in;
        }

        95% {
          transform: #{$dir-val5};
          animation-timing-function: ease-in;
        }
      } @else {
        0%,
        15%,
        38% {
          transform: #{$dir-val1};
          animation-timing-function: ease-out;
        }

        5% {
          transform: #{$dir-val2};
          animation-timing-function: ease-in;
        }

        25% {
          transform: #{$dir-val3};
          animation-timing-function: ease-in;
        }

        52% {
          transform: #{$dir-val4};
          animation-timing-function: ease-in;
        }

        70% {
          transform: if(($direction != 'backward'), #{$dir-val1}, #{$xtra-val});
          animation-timing-function: ease-out;
        }

        85% {
          opacity: 1;
        }

        100% {
          @if $fwd-bck {
            animation-timing-function: ease-in;
          }

          opacity: 0;
          transform: #{$dir-val5};
        }
      }
    }
  }
}
