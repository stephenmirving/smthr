@use 'sass:meta';
@use 'sass:string';
@use 'sass:list';
@use 'sass:math';
@use '../../functions/is-alias' as *;

/// Adds a text pop-up animation to a given element.
///
/// @param {String} $direction [top] - The direction the animation will appear
/// to be going in.
/// @param {Time} $duration [0.5s] The duration of the animation (s or ms).
/// @param {Length-Percentage} $size [15rem] - The size of the element. If
/// the $height property is not set explicitly, it is both height and width, if
/// $height is set explicitly, then this value sets only the width.
/// @param {Time} $delay [null] - The duration of the optional delay of the
/// animation (s or ms).
/// @param {Timing-Function} $timing-func [cubic-bezier(0.25, 0.46, 0.45, 0.94)] -
/// The timing function for the animation.
/// @param {*} $infinite [null] If any value other than null, or false is
/// passed, the `infinite alternate` values will be applied to the animation.
/// @param {Length-Percentage} $height [$size] - The height of the element.
/// @param {Number|String} $anim-num [null] - If the mixin is used more than
/// once with different values in a stylesheet, you can pass a number or string
/// to the mixin here that gets appeneded to end of the animation name so that
/// the animations do not overwrite each other.
///
/// @group Animations
/// @require {Function} is-alias
///
/// @throw Invalid $direction value
/// @throw Invalid $duration value
/// @throw Invalid $delay value
/// @throw Invalid $iterations value
/// @throw Invalid $anim-dir value
@mixin text-pop-up(
  $direction: top,
  $duration: 0.5s,
  $size: 15rem,
  $delay: null,
  $timing-func: cubic-bezier(0.25, 0.46, 0.45, 0.94),
  $infinite: null,
  $height: $size,
  $anim-num: null
) {
  $dir-val: translateY(-50px);

  @if $direction and meta.type-of($direction) == 'string' {
    $direction: string.to-lower-case($direction);
  }

  @if $delay and meta.type-of($delay) == 'string' {
    $delay: string.to-lower-case($delay);
  }

  @if $timing-func and meta.type-of($timing-func) == 'string' {
    $timing-func: string.to-lower-case($timing-func);
  }

  @if $anim-dir and meta.type-of($anim-dir) == 'string' {
    $anim-dir: string.to-lower-case($anim-dir);
  }

  @if $infinite {
    $infinite: infinite alternate;
  }

  @if is-alias('bottom', $direction) {
    $dir-val: translateY(50px);
  } @else if
    $direction ==
    'left' or
    $direction ==
    'l' or
    $direction ==
    'left-side'
  {
    $dir-val: translateX(-50px);
  } @else if
    $direction ==
    'right' or
    $direction ==
    'r' or
    $direction ==
    'right-side'
  {
    $dir-val: translateX(50px);
  } @else if is-alias('top-right', $direction) {
    $dir-val: translateY(-50px) translateX(50px);
  } @else if is-alias('top-left', $direction) {
    $dir-val: translateY(-50px) translateX(-50px);
  } @else if is-alias('bottom-right', $direction) {
    $dir-val: translateY(50px) translateX(50px);
  } @else if is-alias('bottom-left', $direction) {
    $dir-val: translateY(50px) translateX(-50px);
  } @else if $direction != 'top' and $direction != 't' and $direction != 'up' {
    @error '`#{meta.inspect($direction)}` is not a valid direction for the ' +
        'text-pop-up mixin.';
  }

  @if meta.type-of($duration) != 'number' {
    @error 'Invalid $duration value of `#{$duration}` for the `text-pop-up` ' +
        'mixin. The timing property must be a number.';
  } @else if math.is-unitless($duration) {
    // If no there is no unit for $duration, assume seconds
    $duration: $duration * 1s;
  } @else if not list.index('s' 'ms', math.unit($duration)) {
    @error 'Invalid $duration value of `#{$duration}` for the `text-pop-up` ' +
        'mixin. The timing property must be in either s or ms units.';
  } @else if $duration % 10 == 0ms {
    // If time in ms would be shorter as seconds, convert it
    $duration: math.div($duration, 1000ms) * 1s;

    // Get rid of possible leading zero in front of decimal place
    @if string.slice($duration + '', 1, 2) == '0.' {
      $duration: #{string.slice($duration + '', 2)};
    }
  }

  @if not
    $delay or
    $delay ==
    0 or
    $delay ==
    0s or
    $delay ==
    0ms or
    is-alias('none', $delay)
  {
    $delay: null;
  }
  @if $delay {
    @if meta.type-of($delay) != 'number' {
      @error 'Invalid delay value of `#{meta.inspect($delay)}` for the `text-pop-up` ' +
          'mixin. The delay property must be a number.';
    } @else if math.is-unitless($delay) {
      // If no there is no unit for $delay, assume seconds
      $delay: $delay * 1s;
    } @else if not list.index('s' 'ms', math.unit($delay)) {
      @error 'Invalid delay value of `#{meta.inspect($delay)}` for the `text-pop-up` ' +
          'mixin. The delay property must be in either s or ms units.';
    } @else if $delay % 10 == 0ms {
      $delay: math.div($delay, 1000ms) * 1s;

      @if string.slice($delay + '', 1, 2) == '0.' {
        $delay: #{string.slice($delay + '', 2)};
      }
    }
  }

  @if not $anim-num {
    $anim-num: null;
  } @else {
    $anim-num: '-#{$anim-num}';
  }

  width: $size;
  height: $height;
  text-transform: none;
  animation: txt-pop-up#{$anim-num} #{$duration} #{$timing-func} #{$delay} #{$infinite}
    both;

  @at-root {
    @keyframes txt-pop-up#{$anim-num} {
      0% {
        text-shadow: none;
        transform: translateY(0);
        transform-origin: 50% 50%;
      }

      100% {
        text-shadow:
          0 1px 0 hsl(0 0% 80%),
          0 2px 0 hsl(0 0% 80%),
          0 3px 0 hsl(0 0% 80%),
          0 4px 0 hsl(0 0% 80%),
          0 5px 0 hsl(0 0% 80%),
          0 6px 0 hsl(0 0% 80%),
          0 7px 0 hsl(0 0% 80%),
          0 8px 0 hsl(0 0% 80%),
          0 9px 0 hsl(0 0% 80%),
          0 50px 30px hsl(0 0% 0 / 0.3);
        transform: #{$dir-val};
        transform-origin: 50% 50%;
      }
    }
  }
}
