@use 'sass:meta';
@use 'sass:string';
@use 'sass:list';
@use 'sass:math';
@use '../../functions/equals-false' as *;
@use '../../functions/is-alias' as *;
@use '../../functions/is-color' as *;
@use '../../functions/is-falsey' as *;
@use '../../functions/is-list' as *;
@use '../../functions/is-number' as *;
@use '../../functions/is-string' as *;
@use '../../functions/list-to-string' as *;

/// Applies a text pop-up animation with a shadow effect to a given element.
///
/// @param {String} $direction ['top'] - The direction the animation will appear
/// to be going in. Accepted $direction values are: `top`, `top-right`, `right`,
/// `bottom-right`, `bottom`, `bottom-left`, `left`, `top-left`, and all valid
/// aliases for these $direction values.
/// @param {Number} $duration [0.5s] - The duration of the animation (`s` or `ms`).
/// @param {Number} $delay [null] - The duration of the optional delay of the
/// animation (`s` or `ms`).
/// @param {Timing-Function} $timing-func [cubic-bezier(0.25, 0.46, 0.45, 0.94)] -
/// The timing function for the animation.
/// @param {Color} $shadow-color [hsl(0 0% 80%)] - The color of the shadow used
/// in the effect. Leave this value blank for the default color unless you
/// want something less subtle.
/// @param {Bool} $infinite [null] If any value other than `null` or `false` is
/// passed, the `infinite alternate` values will be applied to the animation.
/// @param {Number | String} $anim-num [null] - If the mixin is used more than
/// once with different values in a stylesheet, you can pass a number or string
/// to the mixin here that gets appeneded to end of the animation name so that
/// the animations do not overwrite each other.
///
/// @group Animations
/// @require {function} equals-false
/// @require {function} is-alias
/// @require {function} is-color
/// @require {function} is-falsey
/// @require {function} is-list
/// @require {function} is-number
/// @require {function} is-string
/// @require {function} list-to-string
///
/// @throw Invalid $direction value error.
/// @throw Invalid $duration value error.
/// @throw Invalid $delay value error.
/// @throw Invalid $iterations value error.
@mixin text-pop-up(
  $direction: 'top',
  $duration: 0.5s,
  $delay: null,
  $timing-func: cubic-bezier(0.25, 0.46, 0.45, 0.94),
  $shadow-color: hsl(0 0% 80%),
  $infinite: null,
  $anim-num: null
) {
  // Values for the default $direction of 'top'
  $dir-val: translateY(-50px);
  $anim-suffix: '-to-top';

  @if $direction {
    @if is-list($direction) {
      $direction: list-to-string($direction);
    }

    @if is-string($direction) {
      $direction: string.to-lower-case($direction);
    }
  }

  @if $delay and is-string($delay) {
    $delay: string.to-lower-case($delay);
  }

  @if $timing-func and is-string($timing-func) {
    $timing-func: string.to-lower-case($timing-func);
  }

  @if not $shadow-color or not is-color($shadow-color) {
    $shadow-color: hsl(0 0% 80%);

    @warn 'Invalid $shadow-color value passed to the [ text-drop-shadow() ] ' +
        'mixin. You must pass a valid CSS color in hex, rgb, rgba, hsl, or ' +
        'hsla notation. The $shadow-color value has been reset to the ' +
        'default of hsl(0 0% 80%)';
  }

  @if $infinite {
    $infinite: infinite alternate;
  }

  @if is-alias('bottom', $direction) {
    $dir-val: translateY(50px);
    $anim-suffix: '-to-bottom';
  } @else if is-alias('left', $direction) {
    $dir-val: translateX(-50px);
    $anim-suffix: '-to-left';
  } @else if is-alias('right', $direction) {
    $dir-val: translateX(50px);
    $anim-suffix: '-to-right';
  } @else if is-alias('top right', $direction) {
    $dir-val: translateY(-50px) translateX(50px);
    $anim-suffix: '-to-top-right';
  } @else if is-alias('top left', $direction) {
    $dir-val: translateY(-50px) translateX(-50px);
    $anim-suffix: '-to-top-left';
  } @else if is-alias('bottom right', $direction) {
    $dir-val: translateY(50px) translateX(50px);
    $anim-suffix: '-to-bottom-right';
  } @else if is-alias('bottom left', $direction) {
    $dir-val: translateY(50px) translateX(-50px);
    $anim-suffix: '-to-bottom-left';
  } @else if not is-alias('top', $direction) {
    @error 'Invalid $direction value of `#{meta.inspect($direction)}` for ' +
        'the [ text-pop-up() ] mixin. The $direction value must be one of ' +
        'the following: `top`, `top-right`, `right`, `bottom-right`, `bottom`' +
        '`bottom-left`, `left`, or `top-left`.';
  }

  @if not is-number($duration) {
    @error 'Invalid $duration value of `#{$duration}` for the [ text-pop-up() ] ' +
        'mixin. The duration property must be a number.';
  } @else if math.is-unitless($duration) {
    // If no there is no unit for $duration, unless $duration > 60, assume seconds
    $duration: if($duration > 60, $duration * 1ms, $duration * 1s);
  } @else if not list.index('s' 'ms', math.unit($duration)) {
    @error 'Invalid $duration value of `#{$duration}` for the [ text-pop-up() ] ' +
        'mixin. The duration property must be in either s or ms units.';
  } @else if $duration % 10 == 0ms {
    // If time in ms would be shorter as seconds, convert it
    $duration: math.div($duration, 1000ms) * 1s;

    // Get rid of possible leading zero in front of decimal place
    @if string.slice($duration + '', 1, 2) == '0.' {
      $duration: #{string.slice($duration + '', 2)};
    }
  }

  @if is-falsey($delay) or
      is-alias('none', $delay) or
      $delay == 0s or $delay == 0ms
  {
    $delay: null;
  }

  @if $delay {
    @if not is-number($delay) {
      @error 'Invalid delay value of `#{meta.inspect($delay)}` for the ' +
          '[ text-pop-up() ] mixin. The delay property must be a number.';
    } @else if math.is-unitless($delay) {
      // If no there is no unit for $delay, unless $delay > 60, assume seconds
      $delay: if($delay > 60, $delay * 1ms, $delay * 1s);
    } @else if not list.index('s' 'ms', math.unit($delay)) {
      @error 'Invalid delay value of `#{meta.inspect($delay)}` for the ' +
          '[ text-pop-up() ] mixin. The delay property must be in ' +
          'either s or ms units.';
    } @else if $delay % 10 == 0ms {
      $delay: math.div($delay, 1000ms) * 1s;

      @if string.slice($delay + '', 1, 2) == '0.' {
        $delay: #{string.slice($delay + '', 2)};
      }
    }
  }

  @if equals-false($anim-num) or $anim-num == '' {
    $anim-num: null;
  } @else {
    $anim-suffix: string.insert(
      $anim-suffix,
      '--#{$anim-num}',
      string.length($anim-suffix) + 1
    );
  }

  transform: translate3d(0, 0, 0);
  animation: txt-pop-up#{$anim-suffix} #{$duration} #{$timing-func} #{$delay}
      #{$infinite} both;

  @at-root {
    @keyframes txt-pop-up#{$anim-suffix} {
      0% {
        text-shadow: none;
        transform: translateY(0);
        transform-origin: 50% 50%;
      }

      100% {
        text-shadow:
          0 1px 0 $shadow-color,
          0 2px 0 $shadow-color,
          0 3px 0 $shadow-color,
          0 4px 0 $shadow-color,
          0 5px 0 $shadow-color,
          0 6px 0 $shadow-color,
          0 7px 0 $shadow-color,
          0 8px 0 $shadow-color,
          0 9px 0 $shadow-color,
          0 50px 30px hsla(0, 0%, 0%, 0.3);
        transform: #{$dir-val};
        transform-origin: 50% 50%;
      }
    }
  }
}
