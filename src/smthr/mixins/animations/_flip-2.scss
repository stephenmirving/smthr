@use 'sass:meta';
@use 'sass:string';
@use 'sass:list';
@use 'sass:math';
@use '../utilities/only-moz' as *;

// TODO: Change the values on this according to flip-2 here: https://animista.net/play/basic/flip-2

/// Generates an animation that flips an element over. The element this mixin is
/// applied to must have a front-face and a back-face child element. It is
/// recommended that you use this mixin in conjunction with the
/// `animation-front-face` and 'animation-back-face' mixins for element 'face'
/// child elements and the 'animation-stage` mixin for the parent element.
///
/// @param {String} $direction [top] - The direction the scale effect causes
/// the element to seem to be moving towards
/// @param {String} $axis [horizontal] - The axis the element will flip over
/// @param {Time} $timing [0.5s] - The duration of the animation (s or ms)
/// @param {Time} $delay [null] - The optional delay time for the animation.
/// @param {Number|String} $iterations [null] - The number of iterations
/// to complete. If the value passed is not a number, it will be set to infinite
/// @param {Keyword} $anim-dir [null] - Sets the animation-direction property.
/// Can be `normal`, `reverse`, `alternate`, or `alternate-reverse`. Default of
/// null assumes the CSS property default of `normal`.
/// @param {Timing-Function} $timing-func [null] - The timing function for the
/// animation. A null value passed here will default to the recommended timing
/// function for this animation of `cubic-bezier(0.455, 0.03, 0.515, 0.955)`;
/// @param {Number|String} $anim-num [null] - If the mixin is used more than
/// once with different values in a stylesheet, you can pass a number or string
/// to the mixin here that gets appeneded to end of the animation name so that
/// the animations do not overwrite each other.
///
/// @group Animations
/// @throw Invalid $direction value
/// @throw Invalid $axis value
/// @throw Invalid $timing value
/// @throw Invalid $delay value
/// @throw Invalid $iterations value
/// @throw Invalid $anim-dir value
@mixin flip(
  $direction: 'top',
  $axis: 'horizontal',
  $timing: 0.5s,
  $delay: null,
  $iterations: null,
  $anim-dir: null,
  $timing-func: null,
  $anim-num: null
) {
  // Default tranform values for $direction of `top` and $axis of `horizontal`
  $trans-val-1: rotateX(0);
  $trans-val-2: rotateX(180deg);

  @if $anim-dir and meta.type-of($anim-dir) == 'string' {
    $anim-dir: string.to-lower-case($anim-dir),
  }

  @if $delay and meta.type-of($delay) == 'string' {
    $delay: string.to-lower-case($delay);
  }

  @if $timing-func and meta.type-of($timing-func) == 'string' {
    $timing-func: string.to-lower-case($timing-func),
  }

  @if $direction {
    $direction: string.to-lower-case($direction);

    @if $direction == 'bottom' or $direction == 'btm' or $direction == 'b' {
      $direction: 'bottom';
    } @else if
      $direction ==
      'forwards' or
      $direction ==
      'forward' or
      $direction ==
      'front' or
      $direction ==
      'fwd' or
      $direction ==
      'fw' or
      $direction ==
      'f'
    {
      $direction: 'forward';
    } @else if
      $direction ==
      'backwards' or
      $direction ==
      'backward' or
      $direction ==
      'bckwrd' or
      $direction ==
      'back' or
      $direction ==
      'bck' or
      $direction ==
      'bw' or
      $direction ==
      'b'
    {
      $direction: 'backward';
    } @else if
      $direction ==
      'top' or
      $direction ==
      't' or
      $direction ==
      'up' or
      $direction ==
      'u'
    {
      $direction: 'top';
    } @else if $direction == 'left' or $direction == 'l' {
      $direction: 'left';
    } @else if $direction == 'right' or $direction == 'r' {
      $direction: 'right';
    } @else if
      $direction ==
      'top-left' or
      $direction ==
      'topleft' or
      $direction ==
      't-l' or
      $direction ==
      'tl' or
      $direction ==
      'left-top' or
      $direction ==
      'lefttop' or
      $direction ==
      'l-t' or
      $direction ==
      'lt'
    {
      $direction: 'top-left';
    } @else if
      $direction ==
      'top-right' or
      $direction ==
      'topright' or
      $direction ==
      't-r' or
      $direction ==
      'tr' or
      $direction ==
      'right-top' or
      $direction ==
      'righttop' or
      $direction ==
      'r-t' or
      $direction ==
      'rt'
    {
      $direction: 'top-right';
    } @else if
      $direction ==
      'bottom-right' or
      $direction ==
      'bottomright' or
      $direction ==
      'b-r' or
      $direction ==
      'br' or
      $direction ==
      'right-bottom' or
      $direction ==
      'rightbottom' or
      $direction ==
      'r-b' or
      $direction ==
      'rb'
    {
      $direction: 'bottom-right';
    } @else if
      $direction ==
      'bottom-left' or
      $direction ==
      'bottomleft' or
      $direction ==
      'b-l' or
      $direction ==
      'bl' or
      $direction ==
      'left-bottom' or
      $direction ==
      'leftbottom' or
      $direction ==
      'l-b' or
      $direction ==
      'lb'
    {
      $direction: 'bottom-left';
    } @else {
      @error 'Invalid direction of `#{meta.inspect($direction)}` chosen for the [ flip ] mixin.';
    }
  } @else {
    @error 'You must choose a direction for the `flip` mixin.';
  }

  @if $axis {
    $axis: string.to-lower-case($axis);

    @if $axis ==
      'horizontal' or
      $axis ==
      'horiz' or
      $axis ==
      'horz' or
      $axis ==
      'h'
    {
      $axis: 'horizontal';
    } @else if
      $axis ==
      'vertical' or
      $axis ==
      'vert' or
      $axis ==
      'ver' or
      $axis ==
      'v'
    {
      $axis: 'vertical';
    } @else if
      $axis ==
      'diagonal' or
      $axis ==
      'diagonal1' or
      $axis ==
      'diag' or
      $axis ==
      'diag1' or
      $axis ==
      'd' or
      $axis ==
      'd1'
    {
      $axis: 'diagonal1';
    } @else if $axis == 'diagonal2' or $axis == 'diag2' or $axis == 'd2' {
      $axis: 'diagonal2';
    } @else {
      @error 'Invalid axis of [ #{meta.inspect($axis)} ] chosen for the [ flip ] mixin.';
    }
  } @else {
    @error 'You must choose an axis for the `flip` mixin.';
  }

  @if $axis == 'horizontal' {
    @if $direction == 'bottom' {
      $trans-val-2: rotateX(-180deg);
    } @else if $direction == 'forward' {
      $trans-val-1: translateZ(0) rotateX(0);
      $trans-val-2: translateZ(160px) rotateX(-180deg);
    } @else if $direction == 'backward' {
      $trans-val-1: translateZ(0) rotateX(0);
      $trans-val-2: translateZ(-260px) rotateX(180deg);
    } @else if $direction != 'top' {
      @error 'Invalid direction value of `#{meta.inspect($direction)}` with an $axis of ' +
          '`horizontal`. For a horizontal axis, you must choose a direction ' +
          'of either `top`, `bottom`, `backward`, or `forward`.';
    }
  } @else if $axis == 'vertical' {
    $trans-val-1: rotateY(0);
    $trans-val-2: rotateY(180deg);

    @if $direction == 'left' {
      $trans-val-2: rotateY(-180deg);
    } @else if $direction == 'forward' {
      $trans-val-1: translateZ(0) rotateY(0);
      $trans-val-2: translateZ(160px) rotateY(180deg);
    } @else if $direction == 'backward' {
      $trans-val-1: translateZ(0) rotateY(0);
      $trans-val-2: translateZ(160px) rotateY(180deg);
    } @else if $direction != 'right' {
      @error 'Invalid direction value of `#{meta.inspect($direction)}` with an $axis of ' +
      '`vertical`. For a vertical axis, you must choose a direction ' +
      'of either `left`, `right`, `backward`, or `forward`.';
    }
  } @else if $axis == 'diagonal1' {
    $trans-val-1: rotate3d(1, 1, 0, 0);
    $trans-val-2: rotate3d(1, 1, 0, 180deg);

    @if $direction == 'bottom-left' {
      $trans-val-2: rotate3d(1, 1, 0, -180deg);
    } @else if $direction == 'forward' {
      $trans-val-1: translateZ(0) rotate3d(1, 1, 0, 0);
      $trans-val-2: translateZ(160px) rotate3d(1, 1, 0, 180deg);
    } @else if $direction == 'backward' {
      $trans-val-1: translateZ(0) rotate3d(1, 1, 0, 0);
      $trans-val-2: translateZ(-260px) rotate3d(1, 1, 0, -180deg);
    } @else if $direction != 'top-right' {
      @error 'Invalid direction value of `#{meta.inspect($direction)}` with ' +
      'an $axis of `diagonal1`. For the diagonal1 axis, you must choose a direction ' +
      'of either `top-right`, `bottom-left`, `backward`, or `forward`.';
    }
  } @else if $axis == 'diagonal2' {
    $trans-val-1: rotate3d(-1, 1, 0, 0);
    $trans-val-2: rotate3d(-1, 1, 0, -180deg);

    @if $direction == 'bottom-right' {
      $trans-val-2: rotate3d(-1, 1, 0, 180deg);
    } @else if $direction == 'forward' {
      $trans-val-1: translateZ(0) rotate3d(-1, 1, 0, 0);
      $trans-val-2: translateZ(160px) rotate3d(-1, 1, 0, 180deg);
    } @else if $direction == 'backward' {
      $trans-val-1: translateZ(0) rotate3d(-1, 1, 0, 0);
      $trans-val-2: translateZ(-260px) rotate3d(-1, 1, 0, -180deg);
    } @else if $direction != 'top-left' {
      @error 'Invalid direction value of `#{meta.inspect($direction)}` with ' +
          'an $axis of [ diagonal2 ]. For the diagonal1 axis, you must choose ' +
          'a direction of either `top-left`, `bottom-right`, `backward`, or `forward`.';
    }
  }

  @if meta.type-of($timing) != 'number' {
    @error 'Invalid $timing value of `#{$timing}` for the ' +
        '[ flip ] mixin. The timing property must be a number.';
  } @else if math.is-unitless($timing) {
    // If no there is no unit for $timing, assume seconds
    $timing: $timing * 1s;
  } @else if not list.index('s' 'ms', math.unit($timing)) {
    @error 'Invalid $timing value of `#{$timing}` for the ' +
        '[ flip ] mixin. The timing property must be in either s or ms units.';
  } @else if $timing % 10 == 0ms {
    // If time in ms would be shorter as seconds, convert it
    $timing: math.div($timing, 1000ms) * 1s;
  }

  @if $delay ==
    0 or
    $delay ==
    0s or
    $delay ==
    0ms or
    $delay ==
    'none' or
    $delay ==
    'no' or
    $delay ==
    'n' or
    $delay ==
    'n/a' or
    $delay ==
    nil or not
    $delay
  {
    $delay: null;
  }
  @if $delay {
    @if meta.type-of($delay) != 'number' {
      @error 'Invalid delay value of `#{meta.inspect($delay)}` for the ' +
          '[ flip ] mixin. The delay property must be a number.';
    } @else if math.is-unitless($delay) {
      // If no there is no unit for $delay, assume seconds
      $delay: $delay * 1s;
    } @else if not list.index('s' 'ms', math.unit($delay)) {
      @error 'Invalid delay value of `#{meta.inspect($delay)}` for the ' +
          '[ flip ] mixin. The delay property must be in either s or ms units.';
    } @else if $delay % 10 == 0ms {
      // If time in ms would be shorter as seconds, convert it
      $delay: math.div($delay, 1000ms) * 1s;
    }
  }

  @if $iterations {
    @if meta.type-of($iterations)!= 'string' {
      $iterations: string.to-lower-case($iterations);
    }

    @if $iterations == 'infinite' or $iterations == 'inf' or $iterations == 'i'
    {
      $iterations: infinite;
    } @else if (
        math.is-unitless($iterations) and meta.type-of($iterations) == 'number'
      ) or
      $iterations ==
      initial or
      $iterations ==
      inherit
    {
      $iterations: $iterations;
    } @else {
      @error 'Invalid $iterations value of `#{meta.inspect($iterations)}` ' +
          'for the [ flip ] mixin.';
    }
  } @else {
    $iterations: null;
  }

  @if not
    $anim-dir or
    $anim-dir ==
    'none' or
    $anim-dir ==
    'no' or
    $anim-dir ==
    'n/a' or
    $anim-dir ==
    'n' or
    $anim-dir ==
    'default' or
    $anim-dir ==
    'def' or
    $anim-dir ==
    'normal' or
    $anim-dir ==
    'nor'
  {
    $anim-dir: null;
  } @else if $anim-dir == 'reverse' or $anim-dir == 'rev' or $anim-dir == 'rvs' or $anim-dir == 'r' {
    $anim-drection: reverse;
  } @else if $anim-dir == 'alternate' or $anim-dir == 'alt' or $anim-dir == 'a'
  {
    $anim-dir: alternate;
  } @else if
    $anim-dir ==
    'alternate-reverse' or
    $anim-dir ==
    'alternate reverse' or
    $anim-dir ==
    'alternatereverse' or
    $anim-dir ==
    'alt-rev' or
    $anim-dir ==
    'alt rev' or
    $anim-dir ==
    'altrev' or
    $anim-dir ==
    'alt-rvs' or
    $anim-dir ==
    'alt rvs' or
    $anim-dir ==
    'altrvs' or
    $anim-dir ==
    'a-r' or
    $anim-dir ==
    'ar'
  {
    $anim-dir: alternate-reverse;
  } @else {
    @error 'Invalid animation-direction value of `#{$anim-dir}` ' +
        'for the [ flip ] mixin';
  }

  @if not
    $timing-func or
    $timing-func ==
    'none' or
    $timing-func ==
    'no' or
    $timing-func ==
    'n' or
    $timing-func ==
    'def' or
    $timing-func ==
    'default' or
    $timing-func ==
    'd'
  {
    // Take all potential values the user might pass to keep the default setting
    // and ensure that the timing function remains at that default
    $timing-func: cubic-bezier(0.455, 0.03, 0.515, 0.955);
  }

  @if not $anim-num {
    $anim-num: null;
  } @else {
    $anim-num: '-#{$anim-num}';
  }

  transform: translate3d(0, 0, 0);
  transform-style: preserve-3d;
  animation: flip#{$anim-num} #{$timing} #{$timing-func} #{$delay} #{$iterations}
    #{$anim-dir} both;

  @include only-moz {
    backface-visibility: hidden;
  }

  @at-root {
    @keyframes flip#{$anim-num} {
      0% {
        transform: $trans-val-1;
      }

      100% {
        transform: $trans-val-2;
      }
    }
  }
}
