@use 'sass:meta';
@use 'sass:list';
@use 'sass:math';
@use 'sass:string';
@use '../../functions/is-alias' as *;

/// Adds a shadow dropping animation to a given element's text
///
/// @param {String} $direction [center] - The direction the shadow will fall.
/// @param {Time} $duration [0.7s] The duration of the animation (s or ms).
/// @param {Time} $delay [null] The duration of the optional animation delay.
/// @param {Number|String} $anim-num [null] - If the mixin is used more than
/// once with different values in a stylesheet, you can pass a number or string
/// to the mixin here that gets appeneded to end of the animation name so that
/// the animations do not overwrite each other.
///
/// @group Animations
/// @require {Function} is-alias
///
/// @throw Invalid $direction value
/// @throw Invalid $duration value
/// @throw Invalid $delay value
@mixin text-drop-shadow(
  $direction: center,
  $duration: 0.7s,
  $delay: null,
  $anim-num: null
) {
  $dir-vals: 0 0 18px; // Default of center

  @if $direction and meta.type-of($direction) == 'string' {
    $direction: string.to-lower-case($direction);
  }

  @if $delay and meta.type-of($delay) == 'string' {
    $delay: string.to-lower-case($delay);
  }

  @if $anim-dir and meta.type-of($anim-dir) == 'string' {
    $anim-dir: string.to-lower-case($anim-dir);
  }

  @if is-alias('bottom', $direction) {
    $dir-vals: 0 6px 18px;
  } @else if $direction == 'bottom-right' or $direction == 'br' {
    $dir-vals: 6px 6px 18px;
  } @else if is-alias('right', $direction) {
    $dir-vals: 6px 0 18px;
  } @else if $direction == 'top-left' or $direction == 'tl' {
    $dir-vals: -6px -6px 18px;
  } @else if $direction == 'top-right' or $direction == 'tr' {
    $dir-vals: 6px -6px 18px;
  } @else if is-alias('left', $direction) {
    $dir-vals: -6px 0 18px;
  } @else if $direction == 'top' or $direction == 't' {
    $dir-vals: 0 -6px 18px;
  } @else if $direction == 'bottom-left' or $direction == 'bl' {
    $dir-vals: -6px 6px 18px;
  } @else if
    $direction !=
    'center' and
    $direction !=
    'centre' and
    $direction !=
    'cent' and
    $direction !=
    'cen' and
    $direction !=
    'c'
  {
    @error '`#{meta.inspect($direction)}` is not a valid direction for the ' +
        '`drop-text-shadow` mixin.';
  }

  @if meta.type-of($duration) != 'number' {
    @error 'Invalid $duration value of `#{$duration}` for the ' +
        '`text-drop-shadow` mixin. The timing property must be a number.';
  } @else if math.is-unitless($duration) {
    // If no there is no unit for $duration, assume seconds
    $duration: $duration * 1s;
  } @else if not list.index('s' 'ms', math.unit($duration)) {
    @error 'Invalid $duration value of `#{$duration}` for the ' +
        '`text-drop-shadow` mixin. The timing property must be in either ' +
        's (seconds) or ms (milliseconds) units.';
  } @else if $duration % 10 == 0ms {
    // If time in ms would be shorter as seconds, convert it
    $duration: math.div($duration, 1000ms) * 1s;

    // Get rid of possible leading zero in front of decimal place
    @if string.slice($duration + '', 1, 2) == '0.' {
      $duration: string.unquote(string.slice($duration + '', 2));
    }
  }

  @if not
    $delay or
    $delay ==
    0 or
    $delay ==
    0s or
    $delay ==
    0ms or
    is-alias('none', $delay)
  {
    $delay: null;
  }
  @if $delay {
    @if meta.type-of($delay) != 'number' {
      @error 'Invalid delay value of `#{meta.inspect($delay)}` for the `text-drop-shadow` ' +
          'mixin. The delay property must be a number.';
    } @else if math.is-unitless($delay) {
      // If no there is no unit for $delay, assume seconds
      $delay: $delay * 1s;
    } @else if not list.index('s' 'ms', math.unit($delay)) {
      @error 'Invalid delay value of `#{meta.inspect($delay)}` for the `text-drop-shadow` ' +
          'mixin. The delay property must be in either s or ms units.';
    } @else if $delay % 10 == 0ms {
      // If time in ms would be shorter as seconds, convert it
      $delay: math.div($delay, 1000ms) * 1s;

      @if string.slice($delay + '', 1, 2) == '0.' {
        $delay: #{string.slice($delay + '', 2)};
      }
    }
  }

  text-transform: none;
  animation: txt-shadow-drop#{$anim-num} #{$duration} #{$delay} both;

  @at-root {
    @keyframes txt-shadow-drop#{$anim-num} {
      0% {
        text-shadow: 0 0 0 hsl(0 0% 0% / 0);
      }

      100% {
        text-shadow: #{$dir-vals} hsl(0 0% 0% / 0.3);
      }
    }
  }
}
