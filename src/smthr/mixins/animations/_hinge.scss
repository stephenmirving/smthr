@use 'sass:meta';
@use 'sass:list';
@use 'sass:math';
@use 'sass:string';
@use '../../functions/equals-false' as *;
@use '../../functions/equals-true' as *;
@use '../../functions/is-alias' as *;
@use '../../functions/is-global-value' as *;
@use '../../functions/is-falsey' as *;
@use '../../functions/is-list' as *;
@use '../../functions/is-number' as *;
@use '../../functions/is-string' as *;
@use '../../functions/list-to-string' as *;

/// Generates an hingeing open or hingeing closed animation that turns an
/// element from one of its corners.
///
/// @param {String | Bool} $open-or-closed ['open'] - Determines if the element will
/// hinge 'open' (`open`, `true`, or `o`) or 'closed' (`closed`, `close`,
/// `false`, or `c`).
/// @param {String} $side ['top'] - Will either hinge open or closed
/// from this side of the element, depending on the value of $open-or-closed
/// The value of $side must be one of the following: `top`, `right`, `bottom`,
/// `left`, or any valid aliases for these $side values.
/// @param {Number} $duration [null] - The duration of the animation (`s` or `ms`)
/// @param {Number} $delay [null] - The optional delay time for the animation.
/// @param {Number | String} $iterations [null] - The number of iterations
/// for the animation to complete. Can be `infinite`, any unitless number, or
/// any CSS global value.
/// @param {String} $anim-dir [null] - Sets the animation-direction property.
/// Can be `normal`, `reverse`, `alternate`, or `alternate-reverse`. Can also be
/// any CSS global value. Default of `null` assumes the CSS property default of
/// `normal`.
/// @param {Timing-Function} $timing-func [null] - The timing function for the
/// animation. A null value passed here will cause the animation to render
/// according to the CSS default timing function value of `ease`;
/// @param {Number | String} $anim-num [null] - If the mixin is used more than
/// once with different values in a stylesheet, you can pass a number or string
/// to the mixin here that gets appeneded to end of the animation name so that
/// the animations do not overwrite each other.
///
/// @group Animations
/// @require {function} equals-false
/// @require {function} equals-true
/// @require {function} is-alias
/// @require {function} is-falsey
/// @require {function} is-global-value
/// @require {function} is-list
/// @require {function} is-number
/// @require {function} is-string
/// @require {function} list-to-string
///
/// @throw Invalid $open-or-closed value error.
/// @throw Invalid $side value error.
/// @throw Invalid $duration value error.
/// @throw Invalid $delay value error.
/// @throw Invalid $iterations value error.
/// @throw Invalid $anim-dir value error.
@mixin hinge(
  $open-or-closed: 'open',
  $side: 'top',
  $duration: 1s,
  $delay: null,
  $iterations: null,
  $anim-dir: null,
  $timing-func: null,
  $anim-num: null,
) {
  $trans-val-1: null;
  $trans-val-2: null;
  $temp-val: null;
  $trans-origin: null;
  $anim-suffix: '';

  @if $open-or-closed and is-string($open-or-closed) {
    $open-or-closed: string.to-lower-case($open-or-closed);
  }

  @if $anim-dir {
    @if is-list($anim-dir) {
      $anim-dir: list-to-string($anim-dir);
    }

    @if is-string($anim-dir) {
      $anim-dir: string.to-lower-case($anim-dir);
    }
  }

  @if $delay and is-string($delay) {
    $delay: string.to-lower-case($delay);
  }

  @if $timing-func and is-string($timing-func) {
    $timing-func: string.to-lower-case($timing-func);
  }

  @if equals-true($open-or-closed) or
      $open-or-closed == 'open' or
      $open-or-closed == 'o'
  {
    $open-or-closed: true;
    $anim-suffix: '-open-from-';
  } @else if equals-false($open-or-closed) or
      $open-or-closed == 'closed' or
      $open-or-closed == 'close' or
      $open-or-closed == 'c' {
    $open-or-closed: false;
    $anim-suffix: '-close-from-';
  } @else {
    @error 'Invalid $open-or-closed value of #{meta.inspect($open-or-closed)} ' +
        'for the [ hinge() ] mixin. It must be either `open` (or `o` or `true`) ' +
        'or `closed` (or `close` `c` or `false`.';
  }

  @if $side {
    @if is-list($side) {
      $side: list-to-string($side);
    }

    @if is-string($side) {
      $side: string.to-lower-case($side);
    }

    @if is-alias('top', $side) {
      $trans-val-1: perspective(800px) rotateX(0deg);
      $trans-val-2: perspective(800px) rotateX(180deg);
      $trans-origin: 0% 0%;
      $anim-suffix: string.insert(
        $anim-suffix,
        'top',
        string.length($anim-suffix) + 1
      );
    } @else if is-alias('right', $side) {
      $trans-val-1: perspective(800px) rotateY(0deg);
      $trans-val-2: perspective(800px) rotateY(180deg);
      $trans-origin: 100% 0%;
      $anim-suffix: string.insert(
        $anim-suffix,
        'right',
        string.length($anim-suffix) + 1
      );
    } @else if is-alias('bottom', $side) {
      $trans-val-1: perspective(800px) rotateX(0deg);
      $trans-val-2: perspective(800px) rotateX(-180deg);
      $trans-origin: 0% 100%;
      $anim-suffix: string.insert(
        $anim-suffix,
        'bottom',
        string.length($anim-suffix) + 1
      );
    } @else if is-alias('left', $side) {
      $trans-val-1: perspective(800px) rotateY(0deg);
      $trans-val-2: perspective(800px) rotateY(-180deg);
      $trans-origin: 0% 0%;
      $anim-suffix: string.insert(
        $anim-suffix,
        'left',
        string.length($anim-suffix) + 1
      );
    } @else {
      @error 'Invalid $side of #{meta.inspect($side)} chosen for ' +
          'the [ hinge() ] mixin. The $side value must be one of the ' +
          'following: `top`, `right`, `bottom`, `left`.';
    }
  } @else {
    @error 'You must pass a $side for the [ hinge() ] mixin. The ' +
        '$side value must be one of the following: `top`, `right` ' +
        '`bottom`, `left`.';
  }

  // If hinge is closed rather than open, reverse the necessary values
  @if not $open-or-closed {
    $temp-val: $trans-val-1;
    $trans-val-1: $trans-val-2;
    $trans-val-2: $temp-val;
  }

  @if not is-number($duration) {
    @error 'Invalid $duration value of `#{meta.inspect($duration)}` for the ' +
        '[ hinge() ] mixin. The duration property must be a number.';
  } @else if math.is-unitless($duration) {
    // If no there is no unit for $duration, unless $duration > 60, assume seconds
    $duration: if($duration > 60, $duration * 1ms, $duration * 1s);
  } @else if not list.index('s' 'ms', math.unit($duration)) {
    @error 'Invalid $duration value of `#{meta.inspect($duration)}` for the ' +
        '[ hinge() ] mixin. The duration property must be in either s or ms units.';
  } @else if math.unit($duration) == 'ms' and $duration % 100 == 0ms {
    // If time in ms would be shorter as seconds, convert it
    $duration: math.div($duration, 1000ms) * 1s;
  }

  @if is-falsey($delay) or
      is-alias('none', $delay) or
      $delay == 0s or
      $delay == 0ms
  {
    $delay: null;
  }
  @if $delay {
    @if not is-number($delay) {
      @error 'Invalid delay value of `#{meta.inspect($delay)}` for the ' +
          '[ hinge() ] mixin. The delay property must be a number.';
    } @else if math.is-unitless($delay) {
      // If no there is no unit for $delay, unless $delay > 60, assume seconds
      $delay: if($delay > 60, $delay * 1ms, $delay * 1s);
    } @else if not list.index('s' 'ms', math.unit($delay)) {
      @error 'Invalid delay value of `#{meta.inspect($delay)}` for the ' +
          '[ hinge() ] mixin. The delay property must be in either s or ms units.';
    } @else if math.unit($delay) == 'ms' and $delay % 100 == 0ms {
      // If time in ms would be shorter as seconds, convert it
      $delay: math.div($delay, 1000ms) * 1s;
    }
  }

  @if $iterations {
    @if is-string($iterations) {
      $iterations: string.to-lower-case($iterations);
    }

    @if is-alias('infinite', $iterations) {
      $iterations: infinite;
    } @else if not (is-number($iterations) and math.is-unitless($iterations)) and
      not is-global-value($iterations)
    {
      @error 'Invalid $iterations value of `#{meta.inspect($iterations)}` ' +
          'for the [ hinge() ] mixin.';
    }
  } @else {
    $iterations: null;
  }

  @if is-falsey($anim-dir) or
      is-alias('none', $anim-dir) or
      is-alias('normal', $anim-dir)
  {
    $anim-dir: null;
  } @else if is-alias('reverse', $anim-dir) {
    $anim-dir: reverse;
  } @else if is-alias('alternate', $anim-dir) {
    $anim-dir: alternate;
  } @else if is-alias('alternate-reverse', $anim-dir) {
    $anim-dir: alternate-reverse;
  } @else if not is-global-value($anim-dir) {
    @error 'Invalid animation-direction value of `#{$anim-dir}` ' +
        'for the [ hinge() ] mixin.';
  }

  @if equals-false($timing-func) or is-alias('normal', $timing-func) {
    $timing-func: null;
  }

  @if equals-false($anim-num) or $anim-num == '' {
    $anim-num: null;
  } @else {
    $anim-suffix: string.insert(
      $anim-suffix,
      '--#{$anim-num}',
      string.length($anim-suffix) + 1
    );
  }

  animation: hinge#{$anim-suffix} #{$duration} #{$timing-func} #{$delay}
    #{$iterations} #{$anim-dir} both;

  @at-root {
    @keyframes hinge#{$anim-suffix} {
      0% {
        transform: $trans-val-1;
        transform-origin: $trans-origin;
      }

      100% {
        transform: $trans-val-2;
        transform-origin: $trans-origin;
      }
    }
  }
}
