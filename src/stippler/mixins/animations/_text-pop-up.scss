/// Adds a text pop-up animation to a given element.
///
/// @param {String} $direction [top] - The direction the animation will appear
/// to be going in.
/// @param {Time} $timing [.5s] The duration of the animation (s or ms).
/// @param {Length-Percentage} $size [15rem] - The size of the element. If
/// the $height property is not set explicitly, it is both height and width, if
/// $height is set explicitly, then this value sets only the width.
/// @param {Time} $delay [null] - The duration of the optional delay of the
/// animation (s or ms).
/// @param {Timing-Function} $timing-func [cubic-bezier(.25, .46, .45, .94)] -
/// The timing function for the animation.
/// @param {*} $infinite [null] If any value other than null, or false is
/// passed, the `infinite alternate` values will be applied to the animation.
/// @param {Length-Percentage} $height [$size] - The height of the element.
/// @param {Number|String} $anim-num [null] - If the mixin is used more than
/// once with different values in a stylesheet, you can pass a number or string
/// to the mixin here that gets appeneded to end of the animation name so that
/// the animations do not overwrite each other.
///
/// @group Animations
/// @throw Invalid $direction value
/// @throw Invalid $timing value
/// @throw Invalid $delay value
/// @throw Invalid $iterations value
/// @throw Invalid $anim-dir value
@mixin text-pop-up(
  $direction: top,
  $timing: .5s,
  $size: 15rem,
  $delay: null,
  $timing-func: cubic-bezier(.25, .46, .45, .94),
  $infinite: null,
  $height: $size,
  $anim-num: null
) {
  $dir-val: translateY(-50px);

  @if $infinite {
    $infinite: infinite alternate
  }

  @if ($direction == 'bottom' or $direction == 'b' or $direction == 'down') {
    $dir-val: translateY(50px);
  } @else if ($direction == 'left' or $direction == 'l' or
      $direction == 'left-side') {
    $dir-val: translateX(-50px);
  } @else if ($direction == 'right' or $direction == 'r' or
      $direction == 'right-side') {
    $dir-val: translateX(50px);
  } @else if ($direction == 'top-right' or $direction == 'tr') {
    $dir-val: translateY(-50px) translateX(50px);
  } @else if ($direction == 'top-left' or $direction == 'tl') {
    $dir-val: translateY(-50px) translateX(-50px);
  } @else if ($direction == 'bottom-right' or $direction == 'br') {
    $dir-val: translateY(50px) translateX(50px);
  } @else if ($direction == 'bottom-left' or $direction == 'bl') {
    $dir-val: translateY(50px) translateX(-50px);
  } @else if ($direction != 'top' and $direction != 't' and $direction != 'up') {
    @error '[#{meta.inspect($direction)}] is not a valid direction for the ' +
        'text-pop-up mixin.';
  }

  @if meta.typeof($timing) != 'number' {
    @error 'Invalid timing value of [#{meta.inspect($timing)}] for the `text-pop-up` ' +
        'mixin. The timing property must be a number.';
  } @else if unitless($timing) {
    // If no there is no unit for $timing, assume seconds
    $timing: $timing * 1s;
  } @else if not list.index('s' 'ms', math.unit($timing)) {
    @error 'Invalid timing value of [#{meta.inspect($timing)}] for the `text-pop-up` ' +
        'mixin. The timing property must be in either s or ms units.';
  } @else if ($timing % 10 == 0ms) {
    // If time in ms would be shorter as seconds, convert it
    $timing: ($timing / 1000ms) * 1s;

    // Get rid of possible leading zero in front of decimal place
    @if (string.slice($timing + '', 1, 2) == '0.') {
      $timing: unquote(string.slice($timing + '', 2));
    }
  }

  @if (
    $delay == 0 or $delay == 0s or $delay == 0ms or
    $delay == 'none' or $delay == 'no' or $delay == 'n' or
    $delay == 'n/a' or $delay == nil or not $delay
  ) {
    $delay: null;
  }
  @if $delay {
    @if meta.typeof($delay) != 'number' {
      @error 'Invalid delay value of [#{meta.inspect($delay)}] for the `text-pop-up` ' +
          'mixin. The delay property must be a number.';
    } @else if unitless($delay) {
      // If no there is no unit for $delay, assume seconds
      $delay: $delay * 1s;
    } @else if not list.index('s' 'ms', math.unit($delay)) {
      @error 'Invalid delay value of [#{meta.inspect($delay)}] for the `text-pop-up` ' +
          'mixin. The delay property must be in either s or ms units.';
    } @else if $delay % 10 == 0ms {
      $delay: ($delay / 1000ms) * 1s;
      @if string.slice($delay + '', 1, 2) == '0.' {
        $delay: #{string.slice($delay + '', 2)};
      }
    }
  }


  @if not $anim-num {
    $anim-num: null;
  }
  animation:
    txt-pop-up#{$anim-num}
    #{$timing}
    #{$timing-func}
    #{$delay}
    #{$infinite}
    both;
  height: $height;
  text-transform: none;
  width: $size;

  @at-root {
    @keyframes txt-pop-up#{$anim-num} {
      0% {
        transform: translateY(0);
        transform-origin: 50% 50%;
        text-shadow: none;
      }

      100% {
        transform: #{$dir-val};
        transform-origin: 50% 50%;
        text-shadow:  0 1px 0 #ccc, 0 2px 0 #ccc, 0 3px 0 #ccc, 0 4px 0 #ccc,
                      0 5px 0 #ccc, 0 6px 0 #ccc, 0 7px 0 #ccc, 0 8px 0 #ccc,
                      0 9px 0 #ccc, 0 50px 30px rgba(0, 0, 0, .3);
      }
    }
  }
}
