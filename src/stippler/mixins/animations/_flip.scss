/// Generates an animation that flips an element over. The element this mixin is
/// applied to must have a front-face and a back-face child element. It is
/// recommended that you use this mixin in conjunction with the
/// `animation-front-face` and 'animation-back-face' mixins for card 'face'
/// child elements and the 'animation-stage` mixin for the parent element.
///
/// @param {String} $direction [top] - The direction the scale effect causes
/// the element to seem to be moving towards
/// @param {String} $axis [horizontal] - The axis the element will flip over
/// @param {Time} $timing [.5s] - The duration of the animation (s or ms)
/// @param {Time} $delay [null] - The optional delay time for the animation.
/// @param {Number|String} $iterations [null] - The number of iterations
/// to complete. If the value passed is not a number, it will be set to infinite
/// @param {Keyword} $anim-dir [null] - Sets the animation-direction property.
/// Can be `normal`, `reverse`, `alternate`, or `alternate-reverse`. Default of
/// null assumes the CSS property default of `normal`.
/// @param {Timing-Function} $timing-func [null] - The timing function for the
/// animation. A null value passed here will default to the recommended timing
/// function for this animation of `cubic-bezier(.455, .03, .515, .955)`;
/// @param {Number|String} $anim-num [null] - If the mixin is used more than
/// once with different values in a stylesheet, you can pass a number or string
/// to the mixin here that gets appeneded to end of the animation name so that
/// the animations do not overwrite each other.
///
/// @group Animations
/// @throw Invalid $direction value
/// @throw Invalid $axis value
/// @throw Invalid $timing value
/// @throw Invalid $delay value
/// @throw Invalid $iterations value
/// @throw Invalid $anim-dir value
@mixin flip(
  $direction: 'top',
  $axis: 'horizontal',
  $timing: .5s,
  $delay: null,
  $iterations: null,
  $anim-dir: null,
  $timing-func: null,
  $anim-num: null
) {
  // Default tranform values for $direction of `top` and $axis of `horizontal`
  $trans-val1: rotateX(0);
  $trans-val2: rotateX(180deg);

  // Input scrubbing
  @if $direction {
    @if (
      string.to-lower-case($direction) == 'bottom' or
      string.to-lower-case($direction) == 'btm' or
      string.to-lower-case($direction) == 'b'
    ) {
      $direction: 'bottom';
    } @else if (
      string.to-lower-case($direction) == 'forwards' or
      string.to-lower-case($direction) == 'forward' or
      string.to-lower-case($direction) == 'fwd' or
      string.to-lower-case($direction) == 'fw' or
      string.to-lower-case($direction) == 'f'
    ) {
      $direction: 'forward';
    } @else if (
      string.to-lower-case($direction) == 'backwards' or
      string.to-lower-case($direction) == 'backward' or
      string.to-lower-case($direction) == 'bckwrd' or
      string.to-lower-case($direction) == 'back' or
      string.to-lower-case($direction) == 'bck' or
      string.to-lower-case($direction) == 'bw' or
      string.to-lower-case($direction) == 'b'
    ) {
      $direction: 'backward';
    } @else if (string.to-lower-case($direction) == 'top'
        or string.to-lower-case($direction) == 't'
        or string.to-lower-case($direction) == 'up'
        or string.to-lower-case($direction) == 'u') {
      $direction: 'top';
    } @else if (
      string.to-lower-case($direction) == 'left'or string.to-lower-case($direction) == 'l'
    ) {
      $direction: 'left';
    } @else if (
      string.to-lower-case($direction) == 'right' or string.to-lower-case($direction) == 'r'
    ) {
      $direction: 'right';
    } @else if (
      string.to-lower-case($direction) == 'top-left' or
      string.to-lower-case($direction) == 'topleft' or
      string.to-lower-case($direction) == 't-l' or
      string.to-lower-case($direction) == 'tl' or
      string.to-lower-case($direction) == 'left-top' or
      string.to-lower-case($direction) == 'lefttop' or
      string.to-lower-case($direction) == 'l-t' or
      string.to-lower-case($direction) == 'lt'
    ) {
      $direction: 'top-left';
    } @else if (
      string.to-lower-case($direction) == 'top-right' or
      string.to-lower-case($direction) == 'topright' or
      string.to-lower-case($direction) == 't-r' or
      string.to-lower-case($direction) == 'tr' or
      string.to-lower-case($direction) == 'right-top' or
      string.to-lower-case($direction) == 'righttop' or
      string.to-lower-case($direction) == 'r-t' or
      string.to-lower-case($direction) == 'rt'
    ) {
      $direction: 'top-right';
    } @else if (
      string.to-lower-case($direction) == 'bottom-right' or
      string.to-lower-case($direction) == 'bottomright' or
      string.to-lower-case($direction) == 'b-r' or
      string.to-lower-case($direction) == 'br' or
      string.to-lower-case($direction) == 'right-bottom' or
      string.to-lower-case($direction) == 'rightbottom' or
      string.to-lower-case($direction) == 'r-b' or
      string.to-lower-case($direction) == 'rb'
    ) {
      $direction: 'bottom-right';
    } @else if (
      string.to-lower-case($direction) == 'bottom-left' or
      string.to-lower-case($direction) == 'bottomleft' or
      string.to-lower-case($direction) == 'b-l' or
      string.to-lower-case($direction) == 'bl' or
      string.to-lower-case($direction) == 'left-bottom' or
      string.to-lower-case($direction) == 'leftbottom' or
      string.to-lower-case($direction) == 'l-b' or
      string.to-lower-case($direction) == 'lb'
    ) {
      $direction: 'bottom-left';
    } @else {
      @error 'Invalid direction of [#{meta.inspect($direction)}] chosen for the `flip` mixin.';
    }
  } @else {
    @error 'You must choose a direction for the `flip` mixin.';
  }

  @if $axis {
    @if (string.to-lower-case($axis) == 'horizontal' or string.to-lower-case($axis) == 'horiz'
        or string.to-lower-case($axis) == 'horz' or string.to-lower-case($axis) == 'h') {
      $axis: 'horizontal';
    } @else if (string.to-lower-case($axis) == 'vertical'
        or string.to-lower-case($axis) == 'vert' or string.to-lower-case($axis) == 'ver'
        or string.to-lower-case($axis) == 'v') {
      $axis: 'vertical';
    } @else if (string.to-lower-case($axis) == 'diagonal'
        or string.to-lower-case($axis) == 'diagonal1' or string.to-lower-case($axis) == 'diag'
        or string.to-lower-case($axis) == 'diag1' or string.to-lower-case($axis) == 'd'
        or string.to-lower-case($axis) == 'd1') {
      $axis: 'diagonal1';
    } @else if (
      string.to-lower-case($axis) == 'diagonal2' or
      string.to-lower-case($axis) == 'diag2' or
      string.to-lower-case($axis) == 'd2'
    ) {
      $axis: 'diagonal2';
    } @else {
      @error 'Invalid axis of [#{meta.inspect($axis)}] chosen for the `flip` mixin.';
    }
  } @else {
    @error 'You must choose an axis for the `flip` mixin.';
  }

  @if ($axis == 'horizontal') {
    @if $direction == 'bottom' {
      $trans-val2: rotateX(-180deg);
    } @else if ($direction == 'forward') {
      $trans-val1: translateZ(0) rotateX(0);
      $trans-val2: translateZ(160px) rotateX(-180deg);
    } @else if ($direction == 'backward') {
      $trans-val1: translateZ(0) rotateX(0);
      $trans-val2: translateZ(-260px) rotateX(180deg);
    } @else if ($direction != 'top') {
      @error 'Invalid direction value of [#{meta.inspect($direction)}] with an $axis of ' +
          '`horizontal`. For a horizontal axis, you must choose a direction ' +
          'of either `top`, `bottom`, `backward`, or `forward`.';
    }
  } @else if ($axis == 'vertical') {
    $trans-val1: rotateY(0);
    $trans-val2: rotateY(180deg);
    @if ($direction == 'left') {
      $trans-val2: rotateY(-180deg);
    } @else if  ($direction == 'forward') {
      $trans-val1: translateZ(0) rotateY(0);
      $trans-val2: translateZ(160px) rotateY(180deg);
    } @else if ($direction == 'backward') {
      $trans-val1: translateZ(0) rotateY(0);
      $trans-val2: translateZ(160px) rotateY(180deg);
    } @else if ($direction != 'right') {
      @error 'Invalid direction value of [#{meta.inspect($direction)}] with an $axis of ' +
      '`vertical`. For a vertical axis, you must choose a direction ' +
      'of either `left`, `right`, `backward`, or `forward`.';
    }
  } @else if ($axis == 'diagonal1') {
    $trans-val1: rotate3d(1, 1, 0, 0);
    $trans-val2: rotate3d(1, 1, 0, 180deg);
    @if ($direction == 'bottom-left') {
      $trans-val2: rotate3d(1, 1, 0, -180deg);
    } @else if ($direction == 'forward') {
      $trans-val1: translateZ(0) rotate3d(1, 1, 0, 0);
      $trans-val2: translateZ(160px) rotate3d(1, 1, 0, 180deg);
    } @else if ($direction == 'backward') {
      $trans-val1: translateZ(0) rotate3d(1, 1, 0, 0);
      $trans-val2: translateZ(-260px) rotate3d(1, 1, 0, -180deg);
    } @else if ($direction != 'top-right') {
      @error 'Invalid direction value of [#{meta.inspect($direction)}] with an $axis of ' +
      '`diagonal1`. For the diagonal1 axis, you must choose a direction ' +
      'of either `top-right`, `bottom-left`, `backward`, or `forward`.';
    }
  } @else if ($axis == 'diagonal2') {
    $trans-val1: rotate3d(-1, 1, 0, 0);
    $trans-val2: rotate3d(-1, 1, 0, -180deg);
    @if ($direction == 'bottom-right') {
      $trans-val2: rotate3d(-1, 1, 0, 180deg);
    } @else if ($direction == 'forward') {
      $trans-val1: translateZ(0) rotate3d(-1, 1, 0, 0);
      $trans-val2: translateZ(160px) rotate3d(-1, 1, 0, 180deg);
    } @else if ($direction == 'backward') {
      $trans-val1: translateZ(0) rotate3d(-1, 1, 0, 0);
      $trans-val2: translateZ(-260px) rotate3d(-1, 1, 0, -180deg);
    } @else if ($direction != 'top-left') {
      @error 'Invalid direction value of [#{meta.inspect($direction)}] with an $axis of ' +
      '`diagonal2`. For the diagonal1 axis, you must choose a direction ' +
      'of either `top-left`, `bottom-right`, `backward`, or `forward`.';
    }
  }

  @if meta.typeof($timing) != 'number' {
    @error 'Invalid timing value of [#{meta.inspect($timing)}] for the `flip` ' +
        'mixin. The timing property must be a number.';
  } @else if unitless($timing) {
    // If no there is no unit for $timing, assume seconds
    $timing: $timing * 1s;
  } @else if not list.index('s' 'ms', math.unit($timing)) {
    @error 'Invalid timing value of [#{meta.inspect($timing)}] for the `flip` mixin.' +
        'The timing property must be in either s or ms units.';
  } @else if ($timing % 10 == 0ms) {
    // If time in ms would be shorter as seconds, convert it
    $timing: ($timing / 1000ms) * 1s;
  }

  @if (
    $delay == 0 or $delay == 0s or $delay == 0ms or
    $delay == 'none' or $delay == 'no' or $delay == 'n' or
    $delay == 'n/a' or $delay == nil or not $delay
  ) {
    $delay: null;
  }
  @if $delay {
    @if meta.typeof($delay) != 'number' {
      @error 'Invalid delay value of [#{meta.inspect($delay)}] for the `flip` mixin.' +
          'The delay property must be a number.';
    } @else if unitless($delay) {
      // If no there is no unit for $delay, assume seconds
      $delay: $delay * 1s;
    } @else if not list.index('s' 'ms', math.unit($delay)) {
      @error 'Invalid delay value of [#{meta.inspect($delay)}] for the `flip` mixin.' +
          'The delay property must be in either s or ms units.';
    } @else if $delay % 10 == 0ms {
      // If time in ms would be shorter as seconds, convert it
      $delay: ($delay / 1000ms) * 1s;
    }
  }

  @if $iterations {
    @if (
      $iterations == 'infinite' or $iterations == 'inf' or $iterations == 'i'
    ) {
      $iterations: infinite;
    } @else if (
      (unitless($iterations) and meta.typeof($iterations) == 'number') or
      $iterations == initial or $iterations == inherit
    ) {
      $iterations: $iterations;
    } @else {
      @error 'Invalid iteration-count value of [#{meta.inspect($iterations)}] for the ' +
          '`flip` mixin.';
    }
  } @else {
    $iterations: null;
  }

  @if (
    not $anim-dir or $anim-dir == 'none' or $anim-dir == 'no' or
    $anim-dir == 'n/a' or $anim-dir == 'n' or $anim-dir == 'default' or
    $anim-dir == 'def' or $anim-dir == 'normal' or $anim-dir == 'nor'
  ) {
    $anim-dir: null;
  } @else if $anim-dir == 'reverse' or $anim-dir == 'rev' or $anim-dir == 'r' {
    $anim-drection: reverse;
  } @else if $anim-dir == 'alternate' or $anim-dir == 'alt' or $anim-dir == 'a' {
    $anim-dir: alternate;
  } @else if (
    $anim-dir == 'alternate-reverse' or $anim-dir == 'alternatereverse' or
    $anim-dir == 'alt-rev' or $anim-dir == 'altrev' or $anim-dir == 'a-r' or
    $anim-dir == 'ar'
  ) {
    $anim-dir: alternate-reverse;
  } @else {
    @error 'Invalid animation-direction value of [#{meta.inspect($anim-dir)}] for the ' +
        '`flip` mixin';
  }

  @if (
    not $timing-func or $timing-func == true or $timing-func == 'none' or
    $timing-func == 'no' or $timing-func == 'n' or $timing-func == 'def' or
    $timing-func == 'default' or $timing-func == 'd'
  ) {
    // Take all potential values the user might pass to keep the default setting
    // and ensure that the timing function remains at that default
    $timing-func: cubic-bezier(.455, .03, .515, .955);
  }

  @if not $anim-num {
    $anim-num: null;
  }
  animation: flip#{$anim-num} #{$timing} #{$timing-func}
              #{$delay} #{$iterations} #{$anim-dir} both;
  transform: translate3d(0, 0, 0);
  transform-style: preserve-3d;
  @include only-moz {
    backface-visibility: hidden;
  }

  @at-root {
    @keyframes flip#{$anim-num} {
      0% {
                transform: $trans-val1;
      }

      100% {
                transform: $trans-val2;
      }
    }
  }
}
