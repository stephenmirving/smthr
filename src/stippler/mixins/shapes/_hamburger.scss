/// Creates a menu icon 'hamburger' with a set width, height, number of bars,
/// and colors. The mixin uses the height of the icon and the weight of the bars
/// to determine spacing.
///
/// @param {Color} $color [$black] - Color to use for the icon.
/// @param {Color} $color-hover [$dark-gray] - Color to use when the icon is
/// hovered over.
/// @param {Length} $width [20px] - Width of the icon.
/// @param {Length} $height [16px] - Total height of the icon.
/// @param {Length} $weight [2px] - Height of individual bars in the icon.
/// @param {Number} $bars [3] - Number of bars in the icon.
///
/// @group Shapes
@mixin hamburger(
  $color: $black,
  $color-hover: $dark-gray,
  $width: 20px,
  $height: 16px,
  $weight: 2px,
  $bars: 3
) {
  // box-shadow CSS output
  $shadow: ();
  $hover-shadow: ();

  // Spacing between bars is calculated based on the total height of the icon
  // and the weight of each bar
  $spacing: ($height - ($weight * $bars)) / ($bars - 1);

  @if (unit($spacing) == 'px') {
    $spacing: floor($spacing);
  }

  @for $i from 2 through $bars {
    $offset: ($weight + $spacing) * ($i - 1);
    $shadow: selector.append($shadow, 0 $offset 0 $color, comma);
  }

  // Icon container
  cursor: pointer;
  display: inline-block;
  height: $height;
  position: relative;
  vertical-align: middle;
  width: $width;

  // Icon bars
  &:after {
    background: $color;
    box-shadow: $shadow;
    content: '';
    display: block;
    height: $weight;
    left: 0;
    position: absolute;
    top: 0;
    width: 100%;
  }

  // Hover state
  @if ($color-hover) {
    @for $i from 2 through $bars {
      $offset: ($weight + $spacing) * ($i - 1);
      $hover-shadow: selector.append($hover-shadow, 0 $offset 0 $color-hover, comma);
    }

    &:hover:after {
      background: $color-hover;
      box-shadow: $hover-shadow;
    }
  }
}
